
Disco_F746G_LCD_SD_FreeRTOS_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011820  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002540  080119f0  080119f0  000219f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013f30  08013f30  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  08013f30  08013f30  00023f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013f38  08013f38  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013f38  08013f38  00023f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013f3c  08013f3c  00023f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08013f40  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c94  20000090  08013fd0  00030090  2**2
                  ALLOC
 10 ._user_heap_stack 00004004  20004d24  08013fd0  00034d24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033789  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000065c5  00000000  00000000  00063849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002980  00000000  00000000  00069e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000026d8  00000000  00000000  0006c790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030e11  00000000  00000000  0006ee68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030324  00000000  00000000  0009fc79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ca43  00000000  00000000  000cff9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ec9e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b7bc  00000000  00000000  001eca34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080119d8 	.word	0x080119d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	080119d8 	.word	0x080119d8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005b6:	b480      	push	{r7}
 80005b8:	b083      	sub	sp, #12
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
 80005be:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005c0:	bf00      	nop
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
	...

080005dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4a07      	ldr	r2, [pc, #28]	; (8000608 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	4a06      	ldr	r2, [pc, #24]	; (800060c <vApplicationGetIdleTaskMemory+0x30>)
 80005f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	200000ac 	.word	0x200000ac
 800060c:	20000104 	.word	0x20000104

08000610 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000618:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800061c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000620:	f003 0301 	and.w	r3, r3, #1
 8000624:	2b00      	cmp	r3, #0
 8000626:	d013      	beq.n	8000650 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000628:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800062c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000630:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000634:	2b00      	cmp	r3, #0
 8000636:	d00b      	beq.n	8000650 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000638:	e000      	b.n	800063c <ITM_SendChar+0x2c>
    {
      __NOP();
 800063a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800063c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d0f9      	beq.n	800063a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000646:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	b2d2      	uxtb	r2, r2
 800064e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000650:	687b      	ldr	r3, [r7, #4]
}
 8000652:	4618      	mov	r0, r3
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr

0800065e <_write>:
//	HAL_UART_Transmit(&huart1,(uint8_t *)ptr,len,10);
//	return len;
//}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	b086      	sub	sp, #24
 8000662:	af00      	add	r7, sp, #0
 8000664:	60f8      	str	r0, [r7, #12]
 8000666:	60b9      	str	r1, [r7, #8]
 8000668:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++)
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]
 800066e:	e009      	b.n	8000684 <_write+0x26>
    {
        ITM_SendChar(*ptr++);
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	1c5a      	adds	r2, r3, #1
 8000674:	60ba      	str	r2, [r7, #8]
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ffc9 	bl	8000610 <ITM_SendChar>
    for (int i = 0; i < len; i++)
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	3301      	adds	r3, #1
 8000682:	617b      	str	r3, [r7, #20]
 8000684:	697a      	ldr	r2, [r7, #20]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	429a      	cmp	r2, r3
 800068a:	dbf1      	blt.n	8000670 <_write+0x12>
    }
    return len;
 800068c:	687b      	ldr	r3, [r7, #4]
}
 800068e:	4618      	mov	r0, r3
 8000690:	3718      	adds	r7, #24
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <LCD_Config>:

static void LCD_Config(void)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	af00      	add	r7, sp, #0
	/* LCD Initialization */
	BSP_LCD_Init();
 800069a:	f002 fb35 	bl	8002d08 <BSP_LCD_Init>

	/* LCD Initialization */
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800069e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80006a2:	2000      	movs	r0, #0
 80006a4:	f002 fbc8 	bl	8002e38 <BSP_LCD_LayerDefaultInit>

	/* Enable the LCD */
	BSP_LCD_DisplayOn();
 80006a8:	f002 fe64 	bl	8003374 <BSP_LCD_DisplayOn>

	/* Select the LCD Background Layer  */
	BSP_LCD_SelectLayer(0);
 80006ac:	2000      	movs	r0, #0
 80006ae:	f002 fc23 	bl	8002ef8 <BSP_LCD_SelectLayer>

	/* Clear the Background Layer */
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 80006b2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80006b6:	f002 fce1 	bl	800307c <BSP_LCD_Clear>

	/* Configure the transparency for background */
	BSP_LCD_SetTransparency(0, 100);
 80006ba:	2164      	movs	r1, #100	; 0x64
 80006bc:	2000      	movs	r0, #0
 80006be:	f002 fc69 	bl	8002f94 <BSP_LCD_SetTransparency>
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <Screen_Init>:

	/* Enable D-Cache */
	SCB_EnableDCache();
}

static void Screen_Init(Screen *screen) {
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]

	LCD_Config();
 80006ce:	f7ff ffe2 	bl	8000696 <LCD_Config>

	screen->width  = BSP_LCD_GetXSize();
 80006d2:	f002 fb89 	bl	8002de8 <BSP_LCD_GetXSize>
 80006d6:	4602      	mov	r2, r0
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	609a      	str	r2, [r3, #8]
	screen->height = BSP_LCD_GetYSize();
 80006dc:	f002 fb98 	bl	8002e10 <BSP_LCD_GetYSize>
 80006e0:	4602      	mov	r2, r0
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	60da      	str	r2, [r3, #12]
	screen->addr[0] = LCD_FB_START_ADDRESS;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 80006ec:	601a      	str	r2, [r3, #0]
	screen->addr[1] = LCD_FB_START_ADDRESS + screen->width * screen->height * 4;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	689b      	ldr	r3, [r3, #8]
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	68d2      	ldr	r2, [r2, #12]
 80006f6:	fb02 f303 	mul.w	r3, r2, r3
 80006fa:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 80006fe:	009a      	lsls	r2, r3, #2
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	605a      	str	r2, [r3, #4]
	screen->front = 1;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2201      	movs	r2, #1
 8000708:	611a      	str	r2, [r3, #16]

	BSP_LCD_LayerDefaultInit(0, screen->addr[0]);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4619      	mov	r1, r3
 8000710:	2000      	movs	r0, #0
 8000712:	f002 fb91 	bl	8002e38 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1, screen->addr[1]);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	4619      	mov	r1, r3
 800071c:	2001      	movs	r0, #1
 800071e:	f002 fb8b 	bl	8002e38 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SetLayerVisible(0, DISABLE);
 8000722:	2100      	movs	r1, #0
 8000724:	2000      	movs	r0, #0
 8000726:	f002 fbf7 	bl	8002f18 <BSP_LCD_SetLayerVisible>
	BSP_LCD_SetLayerVisible(1, ENABLE);
 800072a:	2101      	movs	r1, #1
 800072c:	2001      	movs	r0, #1
 800072e:	f002 fbf3 	bl	8002f18 <BSP_LCD_SetLayerVisible>
	BSP_LCD_SelectLayer(0);
 8000732:	2000      	movs	r0, #0
 8000734:	f002 fbe0 	bl	8002ef8 <BSP_LCD_SelectLayer>
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <Screen_Flip_Buffers>:

void Screen_Flip_Buffers(Screen *screen) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	// wait for VSYNC
	while (!(LTDC->CDSR & LTDC_CDSR_VSYNCS)) { };
 8000748:	bf00      	nop
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <Screen_Flip_Buffers+0x50>)
 800074c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	2b00      	cmp	r3, #0
 8000754:	d0f9      	beq.n	800074a <Screen_Flip_Buffers+0xa>

	BSP_LCD_SetLayerVisible(screen->front, DISABLE);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	691b      	ldr	r3, [r3, #16]
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f002 fbdb 	bl	8002f18 <BSP_LCD_SetLayerVisible>
	screen->front ^= 1;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	691b      	ldr	r3, [r3, #16]
 8000766:	f083 0201 	eor.w	r2, r3, #1
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	611a      	str	r2, [r3, #16]
	BSP_LCD_SetLayerVisible(screen->front, ENABLE);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	691b      	ldr	r3, [r3, #16]
 8000772:	2101      	movs	r1, #1
 8000774:	4618      	mov	r0, r3
 8000776:	f002 fbcf 	bl	8002f18 <BSP_LCD_SetLayerVisible>
	BSP_LCD_SelectLayer(1-screen->front);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	691b      	ldr	r3, [r3, #16]
 800077e:	f1c3 0301 	rsb	r3, r3, #1
 8000782:	4618      	mov	r0, r3
 8000784:	f002 fbb8 	bl	8002ef8 <BSP_LCD_SelectLayer>
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40016800 	.word	0x40016800

08000794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000794:	b5b0      	push	{r4, r5, r7, lr}
 8000796:	b088      	sub	sp, #32
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079a:	f003 fba3 	bl	8003ee4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800079e:	f000 f83d 	bl	800081c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a2:	f000 fdab 	bl	80012fc <MX_GPIO_Init>
  MX_DMA_Init();
 80007a6:	f000 fd33 	bl	8001210 <MX_DMA_Init>
  MX_ADC3_Init();
 80007aa:	f000 f8e7 	bl	800097c <MX_ADC3_Init>
  MX_CRC_Init();
 80007ae:	f000 f937 	bl	8000a20 <MX_CRC_Init>
  MX_FMC_Init();
 80007b2:	f000 fd53 	bl	800125c <MX_FMC_Init>
  MX_LTDC_Init();
 80007b6:	f000 f987 	bl	8000ac8 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80007ba:	f000 fa3d 	bl	8000c38 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80007be:	f000 fa67 	bl	8000c90 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 80007c2:	f000 fb0b 	bl	8000ddc <MX_SDMMC1_SD_Init>
  MX_TIM3_Init();
 80007c6:	f000 fb39 	bl	8000e3c <MX_TIM3_Init>
  MX_TIM5_Init();
 80007ca:	f000 fbaf 	bl	8000f2c <MX_TIM5_Init>
  MX_TIM8_Init();
 80007ce:	f000 fc25 	bl	800101c <MX_TIM8_Init>
  MX_TIM12_Init();
 80007d2:	f000 fc77 	bl	80010c4 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80007d6:	f000 fcbb 	bl	8001150 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80007da:	f000 fce9 	bl	80011b0 <MX_USART6_UART_Init>
  MX_DMA2D_Init();
 80007de:	f000 f941 	bl	8000a64 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */

	printf("Start in progress\n");
 80007e2:	480b      	ldr	r0, [pc, #44]	; (8000810 <main+0x7c>)
 80007e4:	f010 f9fa 	bl	8010bdc <puts>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of uSDThread */
  osThreadDef(uSDThread, StartuSDThread, osPriorityNormal, 0, 4096);
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <main+0x80>)
 80007ea:	1d3c      	adds	r4, r7, #4
 80007ec:	461d      	mov	r5, r3
 80007ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uSDThreadHandle = osThreadCreate(osThread(uSDThread), NULL);
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f00d fa75 	bl	800dcee <osThreadCreate>
 8000804:	4603      	mov	r3, r0
 8000806:	4a04      	ldr	r2, [pc, #16]	; (8000818 <main+0x84>)
 8000808:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800080a:	f00d fa4d 	bl	800dca8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800080e:	e7fe      	b.n	800080e <main+0x7a>
 8000810:	080119fc 	.word	0x080119fc
 8000814:	08011a10 	.word	0x08011a10
 8000818:	20001084 	.word	0x20001084

0800081c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b0b4      	sub	sp, #208	; 0xd0
 8000820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000822:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000826:	2230      	movs	r2, #48	; 0x30
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f010 f8b6 	bl	801099c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000830:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	2284      	movs	r2, #132	; 0x84
 8000846:	2100      	movs	r1, #0
 8000848:	4618      	mov	r0, r3
 800084a:	f010 f8a7 	bl	801099c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800084e:	f005 fd7b 	bl	8006348 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000852:	4b47      	ldr	r3, [pc, #284]	; (8000970 <SystemClock_Config+0x154>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	4a46      	ldr	r2, [pc, #280]	; (8000970 <SystemClock_Config+0x154>)
 8000858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085c:	6413      	str	r3, [r2, #64]	; 0x40
 800085e:	4b44      	ldr	r3, [pc, #272]	; (8000970 <SystemClock_Config+0x154>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800086a:	4b42      	ldr	r3, [pc, #264]	; (8000974 <SystemClock_Config+0x158>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a41      	ldr	r2, [pc, #260]	; (8000974 <SystemClock_Config+0x158>)
 8000870:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000874:	6013      	str	r3, [r2, #0]
 8000876:	4b3f      	ldr	r3, [pc, #252]	; (8000974 <SystemClock_Config+0x158>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000882:	2309      	movs	r3, #9
 8000884:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000888:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800088c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000890:	2301      	movs	r3, #1
 8000892:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000896:	2302      	movs	r3, #2
 8000898:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800089c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80008a4:	2319      	movs	r3, #25
 80008a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80008aa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80008ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008b2:	2302      	movs	r3, #2
 80008b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80008b8:	2309      	movs	r3, #9
 80008ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008be:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f005 fe62 	bl	800658c <HAL_RCC_OscConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80008ce:	f001 fa6d 	bl	8001dac <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008d2:	f005 fd49 	bl	8006368 <HAL_PWREx_EnableOverDrive>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008dc:	f001 fa66 	bl	8001dac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e0:	230f      	movs	r3, #15
 80008e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e6:	2302      	movs	r3, #2
 80008e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000902:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000906:	2106      	movs	r1, #6
 8000908:	4618      	mov	r0, r3
 800090a:	f006 f8e3 	bl	8006ad4 <HAL_RCC_ClockConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000914:	f001 fa4a 	bl	8001dac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <SystemClock_Config+0x15c>)
 800091a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800091c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000920:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000922:	2305      	movs	r3, #5
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000926:	2302      	movs	r3, #2
 8000928:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800092a:	2303      	movs	r3, #3
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800092e:	2301      	movs	r3, #1
 8000930:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000932:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000936:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000938:	f44f 7300 	mov.w	r3, #512	; 0x200
 800093c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800093e:	2300      	movs	r3, #0
 8000940:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000942:	2300      	movs	r3, #0
 8000944:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000946:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800094a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800094e:	2300      	movs	r3, #0
 8000950:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000954:	f107 0308 	add.w	r3, r7, #8
 8000958:	4618      	mov	r0, r3
 800095a:	f006 fa91 	bl	8006e80 <HAL_RCCEx_PeriphCLKConfig>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <SystemClock_Config+0x14c>
  {
    Error_Handler();
 8000964:	f001 fa22 	bl	8001dac <Error_Handler>
  }
}
 8000968:	bf00      	nop
 800096a:	37d0      	adds	r7, #208	; 0xd0
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40023800 	.word	0x40023800
 8000974:	40007000 	.word	0x40007000
 8000978:	00a00868 	.word	0x00a00868

0800097c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000982:	463b      	mov	r3, r7
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800098e:	4b21      	ldr	r3, [pc, #132]	; (8000a14 <MX_ADC3_Init+0x98>)
 8000990:	4a21      	ldr	r2, [pc, #132]	; (8000a18 <MX_ADC3_Init+0x9c>)
 8000992:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000994:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <MX_ADC3_Init+0x98>)
 8000996:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800099a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800099c:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <MX_ADC3_Init+0x98>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009a2:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <MX_ADC3_Init+0x98>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80009a8:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <MX_ADC3_Init+0x98>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80009ae:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <MX_ADC3_Init+0x98>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009b6:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <MX_ADC3_Init+0x98>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009bc:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <MX_ADC3_Init+0x98>)
 80009be:	4a17      	ldr	r2, [pc, #92]	; (8000a1c <MX_ADC3_Init+0xa0>)
 80009c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009c2:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <MX_ADC3_Init+0x98>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80009c8:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <MX_ADC3_Init+0x98>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_ADC3_Init+0x98>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_ADC3_Init+0x98>)
 80009d8:	2201      	movs	r2, #1
 80009da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80009dc:	480d      	ldr	r0, [pc, #52]	; (8000a14 <MX_ADC3_Init+0x98>)
 80009de:	f003 fb03 	bl	8003fe8 <HAL_ADC_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80009e8:	f001 f9e0 	bl	8001dac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009ec:	2304      	movs	r3, #4
 80009ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009f0:	2301      	movs	r3, #1
 80009f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009f8:	463b      	mov	r3, r7
 80009fa:	4619      	mov	r1, r3
 80009fc:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_ADC3_Init+0x98>)
 80009fe:	f003 fb37 	bl	8004070 <HAL_ADC_ConfigChannel>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000a08:	f001 f9d0 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000f34 	.word	0x20000f34
 8000a18:	40012200 	.word	0x40012200
 8000a1c:	0f000001 	.word	0x0f000001

08000a20 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a24:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <MX_CRC_Init+0x3c>)
 8000a26:	4a0e      	ldr	r2, [pc, #56]	; (8000a60 <MX_CRC_Init+0x40>)
 8000a28:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <MX_CRC_Init+0x3c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000a30:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <MX_CRC_Init+0x3c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <MX_CRC_Init+0x3c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000a3c:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <MX_CRC_Init+0x3c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <MX_CRC_Init+0x3c>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a48:	4804      	ldr	r0, [pc, #16]	; (8000a5c <MX_CRC_Init+0x3c>)
 8000a4a:	f003 fe67 	bl	800471c <HAL_CRC_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000a54:	f001 f9aa 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000938 	.word	0x20000938
 8000a60:	40023000 	.word	0x40023000

08000a64 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000a68:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <MX_DMA2D_Init+0x5c>)
 8000a6a:	4a16      	ldr	r2, [pc, #88]	; (8000ac4 <MX_DMA2D_Init+0x60>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000a6e:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <MX_DMA2D_Init+0x5c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <MX_DMA2D_Init+0x5c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <MX_DMA2D_Init+0x5c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a80:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <MX_DMA2D_Init+0x5c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <MX_DMA2D_Init+0x5c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <MX_DMA2D_Init+0x5c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <MX_DMA2D_Init+0x5c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a98:	4809      	ldr	r0, [pc, #36]	; (8000ac0 <MX_DMA2D_Init+0x5c>)
 8000a9a:	f004 fb2d 	bl	80050f8 <HAL_DMA2D_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000aa4:	f001 f982 	bl	8001dac <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <MX_DMA2D_Init+0x5c>)
 8000aac:	f004 fd92 	bl	80055d4 <HAL_DMA2D_ConfigLayer>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000ab6:	f001 f979 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	200015f8 	.word	0x200015f8
 8000ac4:	4002b000 	.word	0x4002b000

08000ac8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b09a      	sub	sp, #104	; 0x68
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ace:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ad2:	2234      	movs	r2, #52	; 0x34
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f00f ff60 	bl	801099c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000adc:	463b      	mov	r3, r7
 8000ade:	2234      	movs	r2, #52	; 0x34
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f00f ff5a 	bl	801099c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000ae8:	4b51      	ldr	r3, [pc, #324]	; (8000c30 <MX_LTDC_Init+0x168>)
 8000aea:	4a52      	ldr	r2, [pc, #328]	; (8000c34 <MX_LTDC_Init+0x16c>)
 8000aec:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000aee:	4b50      	ldr	r3, [pc, #320]	; (8000c30 <MX_LTDC_Init+0x168>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000af4:	4b4e      	ldr	r3, [pc, #312]	; (8000c30 <MX_LTDC_Init+0x168>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000afa:	4b4d      	ldr	r3, [pc, #308]	; (8000c30 <MX_LTDC_Init+0x168>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b00:	4b4b      	ldr	r3, [pc, #300]	; (8000c30 <MX_LTDC_Init+0x168>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000b06:	4b4a      	ldr	r3, [pc, #296]	; (8000c30 <MX_LTDC_Init+0x168>)
 8000b08:	2228      	movs	r2, #40	; 0x28
 8000b0a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000b0c:	4b48      	ldr	r3, [pc, #288]	; (8000c30 <MX_LTDC_Init+0x168>)
 8000b0e:	2209      	movs	r2, #9
 8000b10:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000b12:	4b47      	ldr	r3, [pc, #284]	; (8000c30 <MX_LTDC_Init+0x168>)
 8000b14:	2235      	movs	r2, #53	; 0x35
 8000b16:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000b18:	4b45      	ldr	r3, [pc, #276]	; (8000c30 <MX_LTDC_Init+0x168>)
 8000b1a:	220b      	movs	r2, #11
 8000b1c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000b1e:	4b44      	ldr	r3, [pc, #272]	; (8000c30 <MX_LTDC_Init+0x168>)
 8000b20:	f240 2215 	movw	r2, #533	; 0x215
 8000b24:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000b26:	4b42      	ldr	r3, [pc, #264]	; (8000c30 <MX_LTDC_Init+0x168>)
 8000b28:	f240 121b 	movw	r2, #283	; 0x11b
 8000b2c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000b2e:	4b40      	ldr	r3, [pc, #256]	; (8000c30 <MX_LTDC_Init+0x168>)
 8000b30:	f240 2235 	movw	r2, #565	; 0x235
 8000b34:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000b36:	4b3e      	ldr	r3, [pc, #248]	; (8000c30 <MX_LTDC_Init+0x168>)
 8000b38:	f240 121d 	movw	r2, #285	; 0x11d
 8000b3c:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000b3e:	4b3c      	ldr	r3, [pc, #240]	; (8000c30 <MX_LTDC_Init+0x168>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000b46:	4b3a      	ldr	r3, [pc, #232]	; (8000c30 <MX_LTDC_Init+0x168>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000b4e:	4b38      	ldr	r3, [pc, #224]	; (8000c30 <MX_LTDC_Init+0x168>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b56:	4836      	ldr	r0, [pc, #216]	; (8000c30 <MX_LTDC_Init+0x168>)
 8000b58:	f005 f848 	bl	8005bec <HAL_LTDC_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000b62:	f001 f923 	bl	8001dac <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 8000b6a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b6e:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 8000b74:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000b78:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000b7e:	23ff      	movs	r3, #255	; 0xff
 8000b80:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000b86:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b8a:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b8c:	2307      	movs	r3, #7
 8000b8e:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000b90:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000b94:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 8000b96:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b9a:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 8000b9c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000ba0:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bb4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bb8:	2200      	movs	r2, #0
 8000bba:	4619      	mov	r1, r3
 8000bbc:	481c      	ldr	r0, [pc, #112]	; (8000c30 <MX_LTDC_Init+0x168>)
 8000bbe:	f005 f9a7 	bl	8005f10 <HAL_LTDC_ConfigLayer>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 8000bc8:	f001 f8f0 	bl	8001dac <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bec:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000bee:	2305      	movs	r3, #5
 8000bf0:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000c10:	463b      	mov	r3, r7
 8000c12:	2201      	movs	r2, #1
 8000c14:	4619      	mov	r1, r3
 8000c16:	4806      	ldr	r0, [pc, #24]	; (8000c30 <MX_LTDC_Init+0x168>)
 8000c18:	f005 f97a 	bl	8005f10 <HAL_LTDC_ConfigLayer>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_LTDC_Init+0x15e>
  {
    Error_Handler();
 8000c22:	f001 f8c3 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	3768      	adds	r7, #104	; 0x68
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000a8c 	.word	0x20000a8c
 8000c34:	40016800 	.word	0x40016800

08000c38 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <MX_QUADSPI_Init+0x50>)
 8000c3e:	4a13      	ldr	r2, [pc, #76]	; (8000c8c <MX_QUADSPI_Init+0x54>)
 8000c40:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <MX_QUADSPI_Init+0x50>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <MX_QUADSPI_Init+0x50>)
 8000c4a:	2204      	movs	r2, #4
 8000c4c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <MX_QUADSPI_Init+0x50>)
 8000c50:	2210      	movs	r2, #16
 8000c52:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <MX_QUADSPI_Init+0x50>)
 8000c56:	2218      	movs	r2, #24
 8000c58:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <MX_QUADSPI_Init+0x50>)
 8000c5c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000c60:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MX_QUADSPI_Init+0x50>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000c68:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <MX_QUADSPI_Init+0x50>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <MX_QUADSPI_Init+0x50>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c74:	4804      	ldr	r0, [pc, #16]	; (8000c88 <MX_QUADSPI_Init+0x50>)
 8000c76:	f005 fbc7 	bl	8006408 <HAL_QSPI_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000c80:	f001 f894 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20004b18 	.word	0x20004b18
 8000c8c:	a0001000 	.word	0xa0001000

08000c90 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b092      	sub	sp, #72	; 0x48
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]
 8000ca6:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000cac:	463b      	mov	r3, r7
 8000cae:	222c      	movs	r2, #44	; 0x2c
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f00f fe72 	bl	801099c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000cb8:	4b46      	ldr	r3, [pc, #280]	; (8000dd4 <MX_RTC_Init+0x144>)
 8000cba:	4a47      	ldr	r2, [pc, #284]	; (8000dd8 <MX_RTC_Init+0x148>)
 8000cbc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000cbe:	4b45      	ldr	r3, [pc, #276]	; (8000dd4 <MX_RTC_Init+0x144>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000cc4:	4b43      	ldr	r3, [pc, #268]	; (8000dd4 <MX_RTC_Init+0x144>)
 8000cc6:	227f      	movs	r2, #127	; 0x7f
 8000cc8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000cca:	4b42      	ldr	r3, [pc, #264]	; (8000dd4 <MX_RTC_Init+0x144>)
 8000ccc:	22ff      	movs	r2, #255	; 0xff
 8000cce:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000cd0:	4b40      	ldr	r3, [pc, #256]	; (8000dd4 <MX_RTC_Init+0x144>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000cd6:	4b3f      	ldr	r3, [pc, #252]	; (8000dd4 <MX_RTC_Init+0x144>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000cdc:	4b3d      	ldr	r3, [pc, #244]	; (8000dd4 <MX_RTC_Init+0x144>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ce2:	483c      	ldr	r0, [pc, #240]	; (8000dd4 <MX_RTC_Init+0x144>)
 8000ce4:	f006 fcbc 	bl	8007660 <HAL_RTC_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000cee:	f001 f85d 	bl	8001dac <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d04:	2300      	movs	r3, #0
 8000d06:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000d0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d10:	2201      	movs	r2, #1
 8000d12:	4619      	mov	r1, r3
 8000d14:	482f      	ldr	r0, [pc, #188]	; (8000dd4 <MX_RTC_Init+0x144>)
 8000d16:	f006 fd35 	bl	8007784 <HAL_RTC_SetTime>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000d20:	f001 f844 	bl	8001dac <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d24:	2301      	movs	r3, #1
 8000d26:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8000d30:	2301      	movs	r3, #1
 8000d32:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000d3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d40:	2201      	movs	r2, #1
 8000d42:	4619      	mov	r1, r3
 8000d44:	4823      	ldr	r0, [pc, #140]	; (8000dd4 <MX_RTC_Init+0x144>)
 8000d46:	f006 fddb 	bl	8007900 <HAL_RTC_SetDate>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000d50:	f001 f82c 	bl	8001dac <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8000d7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d82:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d84:	463b      	mov	r3, r7
 8000d86:	2201      	movs	r2, #1
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4812      	ldr	r0, [pc, #72]	; (8000dd4 <MX_RTC_Init+0x144>)
 8000d8c:	f006 fe60 	bl	8007a50 <HAL_RTC_SetAlarm>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8000d96:	f001 f809 	bl	8001dac <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000d9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000da0:	463b      	mov	r3, r7
 8000da2:	2201      	movs	r2, #1
 8000da4:	4619      	mov	r1, r3
 8000da6:	480b      	ldr	r0, [pc, #44]	; (8000dd4 <MX_RTC_Init+0x144>)
 8000da8:	f006 fe52 	bl	8007a50 <HAL_RTC_SetAlarm>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8000db2:	f000 fffb 	bl	8001dac <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000db6:	2202      	movs	r2, #2
 8000db8:	2100      	movs	r1, #0
 8000dba:	4806      	ldr	r0, [pc, #24]	; (8000dd4 <MX_RTC_Init+0x144>)
 8000dbc:	f006 ffd2 	bl	8007d64 <HAL_RTCEx_SetTimeStamp>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8000dc6:	f000 fff1 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000dca:	bf00      	nop
 8000dcc:	3748      	adds	r7, #72	; 0x48
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20001088 	.word	0x20001088
 8000dd8:	40002800 	.word	0x40002800

08000ddc <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000de0:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <MX_SDMMC1_SD_Init+0x58>)
 8000de2:	4a15      	ldr	r2, [pc, #84]	; (8000e38 <MX_SDMMC1_SD_Init+0x5c>)
 8000de4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000de6:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <MX_SDMMC1_SD_Init+0x58>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <MX_SDMMC1_SD_Init+0x58>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <MX_SDMMC1_SD_Init+0x58>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000df8:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <MX_SDMMC1_SD_Init+0x58>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <MX_SDMMC1_SD_Init+0x58>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000e04:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <MX_SDMMC1_SD_Init+0x58>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000e0a:	480a      	ldr	r0, [pc, #40]	; (8000e34 <MX_SDMMC1_SD_Init+0x58>)
 8000e0c:	f007 f800 	bl	8007e10 <HAL_SD_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 8000e16:	f000 ffc9 	bl	8001dac <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8000e1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e1e:	4805      	ldr	r0, [pc, #20]	; (8000e34 <MX_SDMMC1_SD_Init+0x58>)
 8000e20:	f007 fdc4 	bl	80089ac <HAL_SD_ConfigWideBusOperation>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 8000e2a:	f000 ffbf 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000970 	.word	0x20000970
 8000e38:	40012c00 	.word	0x40012c00

08000e3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08e      	sub	sp, #56	; 0x38
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e50:	f107 031c 	add.w	r3, r7, #28
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	611a      	str	r2, [r3, #16]
 8000e6a:	615a      	str	r2, [r3, #20]
 8000e6c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e6e:	4b2d      	ldr	r3, [pc, #180]	; (8000f24 <MX_TIM3_Init+0xe8>)
 8000e70:	4a2d      	ldr	r2, [pc, #180]	; (8000f28 <MX_TIM3_Init+0xec>)
 8000e72:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e74:	4b2b      	ldr	r3, [pc, #172]	; (8000f24 <MX_TIM3_Init+0xe8>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7a:	4b2a      	ldr	r3, [pc, #168]	; (8000f24 <MX_TIM3_Init+0xe8>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e80:	4b28      	ldr	r3, [pc, #160]	; (8000f24 <MX_TIM3_Init+0xe8>)
 8000e82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e88:	4b26      	ldr	r3, [pc, #152]	; (8000f24 <MX_TIM3_Init+0xe8>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8e:	4b25      	ldr	r3, [pc, #148]	; (8000f24 <MX_TIM3_Init+0xe8>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e94:	4823      	ldr	r0, [pc, #140]	; (8000f24 <MX_TIM3_Init+0xe8>)
 8000e96:	f008 fb61 	bl	800955c <HAL_TIM_Base_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000ea0:	f000 ff84 	bl	8001dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000eaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eae:	4619      	mov	r1, r3
 8000eb0:	481c      	ldr	r0, [pc, #112]	; (8000f24 <MX_TIM3_Init+0xe8>)
 8000eb2:	f008 fd11 	bl	80098d8 <HAL_TIM_ConfigClockSource>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000ebc:	f000 ff76 	bl	8001dac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ec0:	4818      	ldr	r0, [pc, #96]	; (8000f24 <MX_TIM3_Init+0xe8>)
 8000ec2:	f008 fba2 	bl	800960a <HAL_TIM_PWM_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000ecc:	f000 ff6e 	bl	8001dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ed8:	f107 031c 	add.w	r3, r7, #28
 8000edc:	4619      	mov	r1, r3
 8000ede:	4811      	ldr	r0, [pc, #68]	; (8000f24 <MX_TIM3_Init+0xe8>)
 8000ee0:	f009 f958 	bl	800a194 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000eea:	f000 ff5f 	bl	8001dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eee:	2360      	movs	r3, #96	; 0x60
 8000ef0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000efe:	463b      	mov	r3, r7
 8000f00:	2200      	movs	r2, #0
 8000f02:	4619      	mov	r1, r3
 8000f04:	4807      	ldr	r0, [pc, #28]	; (8000f24 <MX_TIM3_Init+0xe8>)
 8000f06:	f008 fbd7 	bl	80096b8 <HAL_TIM_PWM_ConfigChannel>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000f10:	f000 ff4c 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f14:	4803      	ldr	r0, [pc, #12]	; (8000f24 <MX_TIM3_Init+0xe8>)
 8000f16:	f001 fc45 	bl	80027a4 <HAL_TIM_MspPostInit>

}
 8000f1a:	bf00      	nop
 8000f1c:	3738      	adds	r7, #56	; 0x38
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000a40 	.word	0x20000a40
 8000f28:	40000400 	.word	0x40000400

08000f2c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08e      	sub	sp, #56	; 0x38
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f40:	f107 031c 	add.w	r3, r7, #28
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
 8000f58:	611a      	str	r2, [r3, #16]
 8000f5a:	615a      	str	r2, [r3, #20]
 8000f5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f5e:	4b2d      	ldr	r3, [pc, #180]	; (8001014 <MX_TIM5_Init+0xe8>)
 8000f60:	4a2d      	ldr	r2, [pc, #180]	; (8001018 <MX_TIM5_Init+0xec>)
 8000f62:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000f64:	4b2b      	ldr	r3, [pc, #172]	; (8001014 <MX_TIM5_Init+0xe8>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6a:	4b2a      	ldr	r3, [pc, #168]	; (8001014 <MX_TIM5_Init+0xe8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000f70:	4b28      	ldr	r3, [pc, #160]	; (8001014 <MX_TIM5_Init+0xe8>)
 8000f72:	f04f 32ff 	mov.w	r2, #4294967295
 8000f76:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f78:	4b26      	ldr	r3, [pc, #152]	; (8001014 <MX_TIM5_Init+0xe8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f7e:	4b25      	ldr	r3, [pc, #148]	; (8001014 <MX_TIM5_Init+0xe8>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000f84:	4823      	ldr	r0, [pc, #140]	; (8001014 <MX_TIM5_Init+0xe8>)
 8000f86:	f008 fae9 	bl	800955c <HAL_TIM_Base_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8000f90:	f000 ff0c 	bl	8001dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f98:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000f9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	481c      	ldr	r0, [pc, #112]	; (8001014 <MX_TIM5_Init+0xe8>)
 8000fa2:	f008 fc99 	bl	80098d8 <HAL_TIM_ConfigClockSource>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8000fac:	f000 fefe 	bl	8001dac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000fb0:	4818      	ldr	r0, [pc, #96]	; (8001014 <MX_TIM5_Init+0xe8>)
 8000fb2:	f008 fb2a 	bl	800960a <HAL_TIM_PWM_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8000fbc:	f000 fef6 	bl	8001dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000fc8:	f107 031c 	add.w	r3, r7, #28
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4811      	ldr	r0, [pc, #68]	; (8001014 <MX_TIM5_Init+0xe8>)
 8000fd0:	f009 f8e0 	bl	800a194 <HAL_TIMEx_MasterConfigSynchronization>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8000fda:	f000 fee7 	bl	8001dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fde:	2360      	movs	r3, #96	; 0x60
 8000fe0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fee:	463b      	mov	r3, r7
 8000ff0:	220c      	movs	r2, #12
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4807      	ldr	r0, [pc, #28]	; (8001014 <MX_TIM5_Init+0xe8>)
 8000ff6:	f008 fb5f 	bl	80096b8 <HAL_TIM_PWM_ConfigChannel>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001000:	f000 fed4 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001004:	4803      	ldr	r0, [pc, #12]	; (8001014 <MX_TIM5_Init+0xe8>)
 8001006:	f001 fbcd 	bl	80027a4 <HAL_TIM_MspPostInit>

}
 800100a:	bf00      	nop
 800100c:	3738      	adds	r7, #56	; 0x38
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200009f4 	.word	0x200009f4
 8001018:	40000c00 	.word	0x40000c00

0800101c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001022:	f107 0310 	add.w	r3, r7, #16
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800103a:	4b20      	ldr	r3, [pc, #128]	; (80010bc <MX_TIM8_Init+0xa0>)
 800103c:	4a20      	ldr	r2, [pc, #128]	; (80010c0 <MX_TIM8_Init+0xa4>)
 800103e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001040:	4b1e      	ldr	r3, [pc, #120]	; (80010bc <MX_TIM8_Init+0xa0>)
 8001042:	2200      	movs	r2, #0
 8001044:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001046:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <MX_TIM8_Init+0xa0>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800104c:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <MX_TIM8_Init+0xa0>)
 800104e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001052:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001054:	4b19      	ldr	r3, [pc, #100]	; (80010bc <MX_TIM8_Init+0xa0>)
 8001056:	2200      	movs	r2, #0
 8001058:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800105a:	4b18      	ldr	r3, [pc, #96]	; (80010bc <MX_TIM8_Init+0xa0>)
 800105c:	2200      	movs	r2, #0
 800105e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001060:	4b16      	ldr	r3, [pc, #88]	; (80010bc <MX_TIM8_Init+0xa0>)
 8001062:	2200      	movs	r2, #0
 8001064:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001066:	4815      	ldr	r0, [pc, #84]	; (80010bc <MX_TIM8_Init+0xa0>)
 8001068:	f008 fa78 	bl	800955c <HAL_TIM_Base_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001072:	f000 fe9b 	bl	8001dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001076:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800107c:	f107 0310 	add.w	r3, r7, #16
 8001080:	4619      	mov	r1, r3
 8001082:	480e      	ldr	r0, [pc, #56]	; (80010bc <MX_TIM8_Init+0xa0>)
 8001084:	f008 fc28 	bl	80098d8 <HAL_TIM_ConfigClockSource>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800108e:	f000 fe8d 	bl	8001dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001092:	2300      	movs	r3, #0
 8001094:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	4619      	mov	r1, r3
 80010a2:	4806      	ldr	r0, [pc, #24]	; (80010bc <MX_TIM8_Init+0xa0>)
 80010a4:	f009 f876 	bl	800a194 <HAL_TIMEx_MasterConfigSynchronization>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80010ae:	f000 fe7d 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	3720      	adds	r7, #32
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200008ec 	.word	0x200008ec
 80010c0:	40010400 	.word	0x40010400

080010c4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
 80010d8:	615a      	str	r2, [r3, #20]
 80010da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80010dc:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <MX_TIM12_Init+0x84>)
 80010de:	4a1b      	ldr	r2, [pc, #108]	; (800114c <MX_TIM12_Init+0x88>)
 80010e0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80010e2:	4b19      	ldr	r3, [pc, #100]	; (8001148 <MX_TIM12_Init+0x84>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e8:	4b17      	ldr	r3, [pc, #92]	; (8001148 <MX_TIM12_Init+0x84>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80010ee:	4b16      	ldr	r3, [pc, #88]	; (8001148 <MX_TIM12_Init+0x84>)
 80010f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010f4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f6:	4b14      	ldr	r3, [pc, #80]	; (8001148 <MX_TIM12_Init+0x84>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <MX_TIM12_Init+0x84>)
 80010fe:	2200      	movs	r2, #0
 8001100:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001102:	4811      	ldr	r0, [pc, #68]	; (8001148 <MX_TIM12_Init+0x84>)
 8001104:	f008 fa81 	bl	800960a <HAL_TIM_PWM_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800110e:	f000 fe4d 	bl	8001dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001112:	2360      	movs	r3, #96	; 0x60
 8001114:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	2200      	movs	r2, #0
 8001126:	4619      	mov	r1, r3
 8001128:	4807      	ldr	r0, [pc, #28]	; (8001148 <MX_TIM12_Init+0x84>)
 800112a:	f008 fac5 	bl	80096b8 <HAL_TIM_PWM_ConfigChannel>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001134:	f000 fe3a 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001138:	4803      	ldr	r0, [pc, #12]	; (8001148 <MX_TIM12_Init+0x84>)
 800113a:	f001 fb33 	bl	80027a4 <HAL_TIM_MspPostInit>

}
 800113e:	bf00      	nop
 8001140:	3720      	adds	r7, #32
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20001638 	.word	0x20001638
 800114c:	40001800 	.word	0x40001800

08001150 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001154:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <MX_USART1_UART_Init+0x58>)
 8001156:	4a15      	ldr	r2, [pc, #84]	; (80011ac <MX_USART1_UART_Init+0x5c>)
 8001158:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800115a:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <MX_USART1_UART_Init+0x58>)
 800115c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001160:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001162:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <MX_USART1_UART_Init+0x58>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <MX_USART1_UART_Init+0x58>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <MX_USART1_UART_Init+0x58>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <MX_USART1_UART_Init+0x58>)
 8001176:	220c      	movs	r2, #12
 8001178:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <MX_USART1_UART_Init+0x58>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001180:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <MX_USART1_UART_Init+0x58>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001186:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <MX_USART1_UART_Init+0x58>)
 8001188:	2200      	movs	r2, #0
 800118a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <MX_USART1_UART_Init+0x58>)
 800118e:	2200      	movs	r2, #0
 8001190:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001192:	4805      	ldr	r0, [pc, #20]	; (80011a8 <MX_USART1_UART_Init+0x58>)
 8001194:	f009 f88c 	bl	800a2b0 <HAL_UART_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800119e:	f000 fe05 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000f7c 	.word	0x20000f7c
 80011ac:	40011000 	.word	0x40011000

080011b0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80011b4:	4b14      	ldr	r3, [pc, #80]	; (8001208 <MX_USART6_UART_Init+0x58>)
 80011b6:	4a15      	ldr	r2, [pc, #84]	; (800120c <MX_USART6_UART_Init+0x5c>)
 80011b8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <MX_USART6_UART_Init+0x58>)
 80011bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011c0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <MX_USART6_UART_Init+0x58>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80011c8:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <MX_USART6_UART_Init+0x58>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <MX_USART6_UART_Init+0x58>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <MX_USART6_UART_Init+0x58>)
 80011d6:	220c      	movs	r2, #12
 80011d8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <MX_USART6_UART_Init+0x58>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e0:	4b09      	ldr	r3, [pc, #36]	; (8001208 <MX_USART6_UART_Init+0x58>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <MX_USART6_UART_Init+0x58>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <MX_USART6_UART_Init+0x58>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <MX_USART6_UART_Init+0x58>)
 80011f4:	f009 f85c 	bl	800a2b0 <HAL_UART_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80011fe:	f000 fdd5 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20001574 	.word	0x20001574
 800120c:	40011400 	.word	0x40011400

08001210 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <MX_DMA_Init+0x48>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a0f      	ldr	r2, [pc, #60]	; (8001258 <MX_DMA_Init+0x48>)
 800121c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <MX_DMA_Init+0x48>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 6, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2106      	movs	r1, #6
 8001232:	203b      	movs	r0, #59	; 0x3b
 8001234:	f003 fa3b 	bl	80046ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001238:	203b      	movs	r0, #59	; 0x3b
 800123a:	f003 fa54 	bl	80046e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 6, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2106      	movs	r1, #6
 8001242:	2045      	movs	r0, #69	; 0x45
 8001244:	f003 fa33 	bl	80046ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001248:	2045      	movs	r0, #69	; 0x45
 800124a:	f003 fa4c 	bl	80046e6 <HAL_NVIC_EnableIRQ>

}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800

0800125c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
 8001270:	615a      	str	r2, [r3, #20]
 8001272:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001274:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <MX_FMC_Init+0x98>)
 8001276:	4a20      	ldr	r2, [pc, #128]	; (80012f8 <MX_FMC_Init+0x9c>)
 8001278:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800127a:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <MX_FMC_Init+0x98>)
 800127c:	2200      	movs	r2, #0
 800127e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001280:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <MX_FMC_Init+0x98>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001286:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <MX_FMC_Init+0x98>)
 8001288:	2204      	movs	r2, #4
 800128a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800128c:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <MX_FMC_Init+0x98>)
 800128e:	2210      	movs	r2, #16
 8001290:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <MX_FMC_Init+0x98>)
 8001294:	2240      	movs	r2, #64	; 0x40
 8001296:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001298:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <MX_FMC_Init+0x98>)
 800129a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800129e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80012a0:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <MX_FMC_Init+0x98>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80012a6:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <MX_FMC_Init+0x98>)
 80012a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012ac:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <MX_FMC_Init+0x98>)
 80012b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012b4:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80012b6:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <MX_FMC_Init+0x98>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80012bc:	2302      	movs	r3, #2
 80012be:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80012c0:	2307      	movs	r3, #7
 80012c2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80012c4:	2304      	movs	r3, #4
 80012c6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80012c8:	2307      	movs	r3, #7
 80012ca:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80012cc:	2303      	movs	r3, #3
 80012ce:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80012d0:	2302      	movs	r3, #2
 80012d2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80012d4:	2302      	movs	r3, #2
 80012d6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	4619      	mov	r1, r3
 80012dc:	4805      	ldr	r0, [pc, #20]	; (80012f4 <MX_FMC_Init+0x98>)
 80012de:	f008 f8be 	bl	800945e <HAL_SDRAM_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80012e8:	f000 fd60 	bl	8001dac <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80012ec:	bf00      	nop
 80012ee:	3720      	adds	r7, #32
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20001684 	.word	0x20001684
 80012f8:	a0000140 	.word	0xa0000140

080012fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b090      	sub	sp, #64	; 0x40
 8001300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001302:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
 8001310:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001312:	4bae      	ldr	r3, [pc, #696]	; (80015cc <MX_GPIO_Init+0x2d0>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4aad      	ldr	r2, [pc, #692]	; (80015cc <MX_GPIO_Init+0x2d0>)
 8001318:	f043 0310 	orr.w	r3, r3, #16
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4bab      	ldr	r3, [pc, #684]	; (80015cc <MX_GPIO_Init+0x2d0>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0310 	and.w	r3, r3, #16
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
 8001328:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800132a:	4ba8      	ldr	r3, [pc, #672]	; (80015cc <MX_GPIO_Init+0x2d0>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4aa7      	ldr	r2, [pc, #668]	; (80015cc <MX_GPIO_Init+0x2d0>)
 8001330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4ba5      	ldr	r3, [pc, #660]	; (80015cc <MX_GPIO_Init+0x2d0>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
 8001340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	4ba2      	ldr	r3, [pc, #648]	; (80015cc <MX_GPIO_Init+0x2d0>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4aa1      	ldr	r2, [pc, #644]	; (80015cc <MX_GPIO_Init+0x2d0>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b9f      	ldr	r3, [pc, #636]	; (80015cc <MX_GPIO_Init+0x2d0>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	623b      	str	r3, [r7, #32]
 8001358:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800135a:	4b9c      	ldr	r3, [pc, #624]	; (80015cc <MX_GPIO_Init+0x2d0>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a9b      	ldr	r2, [pc, #620]	; (80015cc <MX_GPIO_Init+0x2d0>)
 8001360:	f043 0308 	orr.w	r3, r3, #8
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b99      	ldr	r3, [pc, #612]	; (80015cc <MX_GPIO_Init+0x2d0>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	61fb      	str	r3, [r7, #28]
 8001370:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001372:	4b96      	ldr	r3, [pc, #600]	; (80015cc <MX_GPIO_Init+0x2d0>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a95      	ldr	r2, [pc, #596]	; (80015cc <MX_GPIO_Init+0x2d0>)
 8001378:	f043 0304 	orr.w	r3, r3, #4
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b93      	ldr	r3, [pc, #588]	; (80015cc <MX_GPIO_Init+0x2d0>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	61bb      	str	r3, [r7, #24]
 8001388:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	4b90      	ldr	r3, [pc, #576]	; (80015cc <MX_GPIO_Init+0x2d0>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a8f      	ldr	r2, [pc, #572]	; (80015cc <MX_GPIO_Init+0x2d0>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b8d      	ldr	r3, [pc, #564]	; (80015cc <MX_GPIO_Init+0x2d0>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80013a2:	4b8a      	ldr	r3, [pc, #552]	; (80015cc <MX_GPIO_Init+0x2d0>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a89      	ldr	r2, [pc, #548]	; (80015cc <MX_GPIO_Init+0x2d0>)
 80013a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b87      	ldr	r3, [pc, #540]	; (80015cc <MX_GPIO_Init+0x2d0>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80013ba:	4b84      	ldr	r3, [pc, #528]	; (80015cc <MX_GPIO_Init+0x2d0>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a83      	ldr	r2, [pc, #524]	; (80015cc <MX_GPIO_Init+0x2d0>)
 80013c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b81      	ldr	r3, [pc, #516]	; (80015cc <MX_GPIO_Init+0x2d0>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80013d2:	4b7e      	ldr	r3, [pc, #504]	; (80015cc <MX_GPIO_Init+0x2d0>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a7d      	ldr	r2, [pc, #500]	; (80015cc <MX_GPIO_Init+0x2d0>)
 80013d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b7b      	ldr	r3, [pc, #492]	; (80015cc <MX_GPIO_Init+0x2d0>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013ea:	4b78      	ldr	r3, [pc, #480]	; (80015cc <MX_GPIO_Init+0x2d0>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a77      	ldr	r2, [pc, #476]	; (80015cc <MX_GPIO_Init+0x2d0>)
 80013f0:	f043 0320 	orr.w	r3, r3, #32
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b75      	ldr	r3, [pc, #468]	; (80015cc <MX_GPIO_Init+0x2d0>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0320 	and.w	r3, r3, #32
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001402:	4b72      	ldr	r3, [pc, #456]	; (80015cc <MX_GPIO_Init+0x2d0>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a71      	ldr	r2, [pc, #452]	; (80015cc <MX_GPIO_Init+0x2d0>)
 8001408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b6f      	ldr	r3, [pc, #444]	; (80015cc <MX_GPIO_Init+0x2d0>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001416:	603b      	str	r3, [r7, #0]
 8001418:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800141a:	2201      	movs	r2, #1
 800141c:	2120      	movs	r1, #32
 800141e:	486c      	ldr	r0, [pc, #432]	; (80015d0 <MX_GPIO_Init+0x2d4>)
 8001420:	f004 fbca 	bl	8005bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8001424:	2200      	movs	r2, #0
 8001426:	210c      	movs	r1, #12
 8001428:	486a      	ldr	r0, [pc, #424]	; (80015d4 <MX_GPIO_Init+0x2d8>)
 800142a:	f004 fbc5 	bl	8005bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800142e:	2201      	movs	r2, #1
 8001430:	2108      	movs	r1, #8
 8001432:	4869      	ldr	r0, [pc, #420]	; (80015d8 <MX_GPIO_Init+0x2dc>)
 8001434:	f004 fbc0 	bl	8005bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001438:	2201      	movs	r2, #1
 800143a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800143e:	4865      	ldr	r0, [pc, #404]	; (80015d4 <MX_GPIO_Init+0x2d8>)
 8001440:	f004 fbba 	bl	8005bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800144a:	4864      	ldr	r0, [pc, #400]	; (80015dc <MX_GPIO_Init+0x2e0>)
 800144c:	f004 fbb4 	bl	8005bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001450:	2200      	movs	r2, #0
 8001452:	21c8      	movs	r1, #200	; 0xc8
 8001454:	4862      	ldr	r0, [pc, #392]	; (80015e0 <MX_GPIO_Init+0x2e4>)
 8001456:	f004 fbaf 	bl	8005bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800145a:	2308      	movs	r3, #8
 800145c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800145e:	2300      	movs	r3, #0
 8001460:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001466:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800146a:	4619      	mov	r1, r3
 800146c:	485d      	ldr	r0, [pc, #372]	; (80015e4 <MX_GPIO_Init+0x2e8>)
 800146e:	f004 f9df 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001472:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001478:	2302      	movs	r3, #2
 800147a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001480:	2303      	movs	r3, #3
 8001482:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001484:	230b      	movs	r3, #11
 8001486:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001488:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800148c:	4619      	mov	r1, r3
 800148e:	4854      	ldr	r0, [pc, #336]	; (80015e0 <MX_GPIO_Init+0x2e4>)
 8001490:	f004 f9ce 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001494:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001498:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800149a:	2312      	movs	r3, #18
 800149c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800149e:	2301      	movs	r3, #1
 80014a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014a6:	2304      	movs	r3, #4
 80014a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014ae:	4619      	mov	r1, r3
 80014b0:	484d      	ldr	r0, [pc, #308]	; (80015e8 <MX_GPIO_Init+0x2ec>)
 80014b2:	f004 f9bd 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80014b6:	f643 4323 	movw	r3, #15395	; 0x3c23
 80014ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014bc:	2302      	movs	r3, #2
 80014be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c4:	2303      	movs	r3, #3
 80014c6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80014c8:	230a      	movs	r3, #10
 80014ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014d0:	4619      	mov	r1, r3
 80014d2:	4845      	ldr	r0, [pc, #276]	; (80015e8 <MX_GPIO_Init+0x2ec>)
 80014d4:	f004 f9ac 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80014d8:	2380      	movs	r3, #128	; 0x80
 80014da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e4:	2300      	movs	r3, #0
 80014e6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80014e8:	2308      	movs	r3, #8
 80014ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80014ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014f0:	4619      	mov	r1, r3
 80014f2:	4837      	ldr	r0, [pc, #220]	; (80015d0 <MX_GPIO_Init+0x2d4>)
 80014f4:	f004 f99c 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80014f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800150a:	2301      	movs	r3, #1
 800150c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800150e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001512:	4619      	mov	r1, r3
 8001514:	4835      	ldr	r0, [pc, #212]	; (80015ec <MX_GPIO_Init+0x2f0>)
 8001516:	f004 f98b 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800151a:	2360      	movs	r3, #96	; 0x60
 800151c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800152a:	230d      	movs	r3, #13
 800152c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800152e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001532:	4619      	mov	r1, r3
 8001534:	482b      	ldr	r0, [pc, #172]	; (80015e4 <MX_GPIO_Init+0x2e8>)
 8001536:	f004 f97b 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800153a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800153e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001540:	2300      	movs	r3, #0
 8001542:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001548:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800154c:	4619      	mov	r1, r3
 800154e:	4828      	ldr	r0, [pc, #160]	; (80015f0 <MX_GPIO_Init+0x2f4>)
 8001550:	f004 f96e 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001554:	2340      	movs	r3, #64	; 0x40
 8001556:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001558:	4b26      	ldr	r3, [pc, #152]	; (80015f4 <MX_GPIO_Init+0x2f8>)
 800155a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001560:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001564:	4619      	mov	r1, r3
 8001566:	481a      	ldr	r0, [pc, #104]	; (80015d0 <MX_GPIO_Init+0x2d4>)
 8001568:	f004 f962 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800156c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157a:	2303      	movs	r3, #3
 800157c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800157e:	230a      	movs	r3, #10
 8001580:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001582:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001586:	4619      	mov	r1, r3
 8001588:	4818      	ldr	r0, [pc, #96]	; (80015ec <MX_GPIO_Init+0x2f0>)
 800158a:	f004 f951 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800158e:	23f0      	movs	r3, #240	; 0xf0
 8001590:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800159e:	230a      	movs	r3, #10
 80015a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015a6:	4619      	mov	r1, r3
 80015a8:	480a      	ldr	r0, [pc, #40]	; (80015d4 <MX_GPIO_Init+0x2d8>)
 80015aa:	f004 f941 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80015ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80015c0:	230a      	movs	r3, #10
 80015c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80015c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015c8:	4619      	mov	r1, r3
 80015ca:	e015      	b.n	80015f8 <MX_GPIO_Init+0x2fc>
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020c00 	.word	0x40020c00
 80015d4:	40022000 	.word	0x40022000
 80015d8:	40022800 	.word	0x40022800
 80015dc:	40021c00 	.word	0x40021c00
 80015e0:	40021800 	.word	0x40021800
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40020400 	.word	0x40020400
 80015ec:	40020000 	.word	0x40020000
 80015f0:	40022400 	.word	0x40022400
 80015f4:	10120000 	.word	0x10120000
 80015f8:	48b1      	ldr	r0, [pc, #708]	; (80018c0 <MX_GPIO_Init+0x5c4>)
 80015fa:	f004 f919 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80015fe:	2320      	movs	r3, #32
 8001600:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001602:	2301      	movs	r3, #1
 8001604:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2300      	movs	r3, #0
 800160c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800160e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001612:	4619      	mov	r1, r3
 8001614:	48ab      	ldr	r0, [pc, #684]	; (80018c4 <MX_GPIO_Init+0x5c8>)
 8001616:	f004 f90b 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800161a:	2308      	movs	r3, #8
 800161c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161e:	2302      	movs	r3, #2
 8001620:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2300      	movs	r3, #0
 8001628:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800162a:	230d      	movs	r3, #13
 800162c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800162e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001632:	4619      	mov	r1, r3
 8001634:	48a3      	ldr	r0, [pc, #652]	; (80018c4 <MX_GPIO_Init+0x5c8>)
 8001636:	f004 f8fb 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800163a:	f241 030c 	movw	r3, #4108	; 0x100c
 800163e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001640:	2301      	movs	r3, #1
 8001642:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800164c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001650:	4619      	mov	r1, r3
 8001652:	489d      	ldr	r0, [pc, #628]	; (80018c8 <MX_GPIO_Init+0x5cc>)
 8001654:	f004 f8ec 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001658:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800165c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165e:	2300      	movs	r3, #0
 8001660:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001666:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800166a:	4619      	mov	r1, r3
 800166c:	4897      	ldr	r0, [pc, #604]	; (80018cc <MX_GPIO_Init+0x5d0>)
 800166e:	f004 f8df 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001672:	2308      	movs	r3, #8
 8001674:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001676:	2301      	movs	r3, #1
 8001678:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167e:	2300      	movs	r3, #0
 8001680:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001682:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001686:	4619      	mov	r1, r3
 8001688:	4891      	ldr	r0, [pc, #580]	; (80018d0 <MX_GPIO_Init+0x5d4>)
 800168a:	f004 f8d1 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800168e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001692:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169c:	2300      	movs	r3, #0
 800169e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80016a0:	230d      	movs	r3, #13
 80016a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80016a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016a8:	4619      	mov	r1, r3
 80016aa:	4885      	ldr	r0, [pc, #532]	; (80018c0 <MX_GPIO_Init+0x5c4>)
 80016ac:	f004 f8c0 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80016b0:	2310      	movs	r3, #16
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b4:	2300      	movs	r3, #0
 80016b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016c0:	4619      	mov	r1, r3
 80016c2:	4880      	ldr	r0, [pc, #512]	; (80018c4 <MX_GPIO_Init+0x5c8>)
 80016c4:	f004 f8b4 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80016c8:	f248 0304 	movw	r3, #32772	; 0x8004
 80016cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ce:	2300      	movs	r3, #0
 80016d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016da:	4619      	mov	r1, r3
 80016dc:	487d      	ldr	r0, [pc, #500]	; (80018d4 <MX_GPIO_Init+0x5d8>)
 80016de:	f004 f8a7 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80016e2:	2302      	movs	r3, #2
 80016e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e6:	2302      	movs	r3, #2
 80016e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2300      	movs	r3, #0
 80016f0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016f2:	2305      	movs	r3, #5
 80016f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80016f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016fa:	4619      	mov	r1, r3
 80016fc:	4872      	ldr	r0, [pc, #456]	; (80018c8 <MX_GPIO_Init+0x5cc>)
 80016fe:	f004 f897 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001702:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001706:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001708:	2301      	movs	r3, #1
 800170a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001714:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001718:	4619      	mov	r1, r3
 800171a:	486e      	ldr	r0, [pc, #440]	; (80018d4 <MX_GPIO_Init+0x5d8>)
 800171c:	f004 f888 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001720:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001724:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172e:	2300      	movs	r3, #0
 8001730:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001732:	230d      	movs	r3, #13
 8001734:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001736:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800173a:	4619      	mov	r1, r3
 800173c:	4865      	ldr	r0, [pc, #404]	; (80018d4 <MX_GPIO_Init+0x5d8>)
 800173e:	f004 f877 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001742:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001754:	2301      	movs	r3, #1
 8001756:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001758:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800175c:	4619      	mov	r1, r3
 800175e:	485e      	ldr	r0, [pc, #376]	; (80018d8 <MX_GPIO_Init+0x5dc>)
 8001760:	f004 f866 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001764:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001768:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800176a:	4b5c      	ldr	r3, [pc, #368]	; (80018dc <MX_GPIO_Init+0x5e0>)
 800176c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001772:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001776:	4619      	mov	r1, r3
 8001778:	4853      	ldr	r0, [pc, #332]	; (80018c8 <MX_GPIO_Init+0x5cc>)
 800177a:	f004 f859 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800177e:	2310      	movs	r3, #16
 8001780:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178a:	2303      	movs	r3, #3
 800178c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800178e:	230a      	movs	r3, #10
 8001790:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001792:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001796:	4619      	mov	r1, r3
 8001798:	484e      	ldr	r0, [pc, #312]	; (80018d4 <MX_GPIO_Init+0x5d8>)
 800179a:	f004 f849 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800179e:	23c8      	movs	r3, #200	; 0xc8
 80017a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a2:	2301      	movs	r3, #1
 80017a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017aa:	2300      	movs	r3, #0
 80017ac:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b2:	4619      	mov	r1, r3
 80017b4:	4842      	ldr	r0, [pc, #264]	; (80018c0 <MX_GPIO_Init+0x5c4>)
 80017b6:	f004 f83b 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80017ba:	2305      	movs	r3, #5
 80017bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c6:	2303      	movs	r3, #3
 80017c8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80017ca:	230a      	movs	r3, #10
 80017cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017d2:	4619      	mov	r1, r3
 80017d4:	483d      	ldr	r0, [pc, #244]	; (80018cc <MX_GPIO_Init+0x5d0>)
 80017d6:	f004 f82b 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80017da:	2332      	movs	r3, #50	; 0x32
 80017dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e6:	2303      	movs	r3, #3
 80017e8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017ea:	230b      	movs	r3, #11
 80017ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017f2:	4619      	mov	r1, r3
 80017f4:	4835      	ldr	r0, [pc, #212]	; (80018cc <MX_GPIO_Init+0x5d0>)
 80017f6:	f004 f81b 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80017fa:	2304      	movs	r3, #4
 80017fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017fe:	2300      	movs	r3, #0
 8001800:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001806:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800180a:	4619      	mov	r1, r3
 800180c:	482c      	ldr	r0, [pc, #176]	; (80018c0 <MX_GPIO_Init+0x5c4>)
 800180e:	f004 f80f 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001812:	2386      	movs	r3, #134	; 0x86
 8001814:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	2302      	movs	r3, #2
 8001818:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181e:	2303      	movs	r3, #3
 8001820:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001822:	230b      	movs	r3, #11
 8001824:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001826:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800182a:	4619      	mov	r1, r3
 800182c:	482a      	ldr	r0, [pc, #168]	; (80018d8 <MX_GPIO_Init+0x5dc>)
 800182e:	f003 ffff 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001832:	2350      	movs	r3, #80	; 0x50
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001836:	2302      	movs	r3, #2
 8001838:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183e:	2300      	movs	r3, #0
 8001840:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001842:	230d      	movs	r3, #13
 8001844:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001846:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800184a:	4619      	mov	r1, r3
 800184c:	4822      	ldr	r0, [pc, #136]	; (80018d8 <MX_GPIO_Init+0x5dc>)
 800184e:	f003 ffef 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001852:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001858:	2312      	movs	r3, #18
 800185a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800185c:	2301      	movs	r3, #1
 800185e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001860:	2303      	movs	r3, #3
 8001862:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001864:	2304      	movs	r3, #4
 8001866:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001868:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800186c:	4619      	mov	r1, r3
 800186e:	4819      	ldr	r0, [pc, #100]	; (80018d4 <MX_GPIO_Init+0x5d8>)
 8001870:	f003 ffde 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001874:	2328      	movs	r3, #40	; 0x28
 8001876:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001878:	2302      	movs	r3, #2
 800187a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001880:	2303      	movs	r3, #3
 8001882:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001884:	230a      	movs	r3, #10
 8001886:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001888:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800188c:	4619      	mov	r1, r3
 800188e:	4812      	ldr	r0, [pc, #72]	; (80018d8 <MX_GPIO_Init+0x5dc>)
 8001890:	f003 ffce 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001894:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001898:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189a:	2302      	movs	r3, #2
 800189c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	2300      	movs	r3, #0
 80018a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018a6:	2305      	movs	r3, #5
 80018a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ae:	4619      	mov	r1, r3
 80018b0:	480b      	ldr	r0, [pc, #44]	; (80018e0 <MX_GPIO_Init+0x5e4>)
 80018b2:	f003 ffbd 	bl	8005830 <HAL_GPIO_Init>

}
 80018b6:	bf00      	nop
 80018b8:	3740      	adds	r7, #64	; 0x40
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40021800 	.word	0x40021800
 80018c4:	40020c00 	.word	0x40020c00
 80018c8:	40022000 	.word	0x40022000
 80018cc:	40020800 	.word	0x40020800
 80018d0:	40022800 	.word	0x40022800
 80018d4:	40021c00 	.word	0x40021c00
 80018d8:	40020000 	.word	0x40020000
 80018dc:	10120000 	.word	0x10120000
 80018e0:	40020400 	.word	0x40020400

080018e4 <scan_files>:

/* USER CODE BEGIN 4 */
FRESULT scan_files (char* path, DIR* items, UINT *items_sz)        /* Start node to be scanned (***also used as work area***) */
{
 80018e4:	b5b0      	push	{r4, r5, r7, lr}
 80018e6:	b0b4      	sub	sp, #208	; 0xd0
 80018e8:	af02      	add	r7, sp, #8
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
	DIR dir;
	UINT i;
	static FILINFO fno;
	char buffer[128];

	res = f_opendir(&dir, path);                       /* Open the directory */
 80018f0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80018f4:	68f9      	ldr	r1, [r7, #12]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f00b ff16 	bl	800d728 <f_opendir>
 80018fc:	4603      	mov	r3, r0
 80018fe:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	if (res == FR_OK) {
 8001902:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8001906:	2b00      	cmp	r3, #0
 8001908:	d16e      	bne.n	80019e8 <scan_files+0x104>
		items[*items_sz]=dir;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2234      	movs	r2, #52	; 0x34
 8001910:	fb02 f303 	mul.w	r3, r2, r3
 8001914:	68ba      	ldr	r2, [r7, #8]
 8001916:	4413      	add	r3, r2
 8001918:	461d      	mov	r5, r3
 800191a:	f107 0490 	add.w	r4, r7, #144	; 0x90
 800191e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001920:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001924:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001926:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001928:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800192a:	6823      	ldr	r3, [r4, #0]
 800192c:	602b      	str	r3, [r5, #0]
		(*items_sz)++;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	1c5a      	adds	r2, r3, #1
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	601a      	str	r2, [r3, #0]
		for (;;) {
			res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8001938:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800193c:	492d      	ldr	r1, [pc, #180]	; (80019f4 <scan_files+0x110>)
 800193e:	4618      	mov	r0, r3
 8001940:	f00b ffab 	bl	800d89a <f_readdir>
 8001944:	4603      	mov	r3, r0
 8001946:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

			if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 800194a:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800194e:	2b00      	cmp	r3, #0
 8001950:	d145      	bne.n	80019de <scan_files+0xfa>
 8001952:	4b28      	ldr	r3, [pc, #160]	; (80019f4 <scan_files+0x110>)
 8001954:	7d9b      	ldrb	r3, [r3, #22]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d041      	beq.n	80019de <scan_files+0xfa>
//				res = scan_files(path, items, items_sz);     /* Enter the directory */
//				if (res != FR_OK) break;
//				path[i] = 0;
//			} else
			{                                       /* It is a file. */
				snprintf(buffer, sizeof(buffer), "%s/%s\n", path, fno.fname);
 800195a:	f107 0010 	add.w	r0, r7, #16
 800195e:	4b26      	ldr	r3, [pc, #152]	; (80019f8 <scan_files+0x114>)
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	4a25      	ldr	r2, [pc, #148]	; (80019fc <scan_files+0x118>)
 8001966:	2180      	movs	r1, #128	; 0x80
 8001968:	f00f f940 	bl	8010bec <sniprintf>
				printf("%s\n", buffer);
 800196c:	f107 0310 	add.w	r3, r7, #16
 8001970:	4618      	mov	r0, r3
 8001972:	f00f f933 	bl	8010bdc <puts>
				if (*items_sz>255) break;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2bff      	cmp	r3, #255	; 0xff
 800197c:	d82e      	bhi.n	80019dc <scan_files+0xf8>
				items[*items_sz]=dir;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2234      	movs	r2, #52	; 0x34
 8001984:	fb02 f303 	mul.w	r3, r2, r3
 8001988:	68ba      	ldr	r2, [r7, #8]
 800198a:	4413      	add	r3, r2
 800198c:	461d      	mov	r5, r3
 800198e:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001998:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800199a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800199c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800199e:	6823      	ldr	r3, [r4, #0]
 80019a0:	602b      	str	r3, [r5, #0]

				snprintf(buffer, sizeof(buffer), "DIR.dir pointer %x %x\n", dir.dir, items[*items_sz].dir);
 80019a2:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2234      	movs	r2, #52	; 0x34
 80019ac:	fb02 f303 	mul.w	r3, r2, r3
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	4413      	add	r3, r2
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	f107 0010 	add.w	r0, r7, #16
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	460b      	mov	r3, r1
 80019be:	4a10      	ldr	r2, [pc, #64]	; (8001a00 <scan_files+0x11c>)
 80019c0:	2180      	movs	r1, #128	; 0x80
 80019c2:	f00f f913 	bl	8010bec <sniprintf>
				printf("%s\n", buffer);
 80019c6:	f107 0310 	add.w	r3, r7, #16
 80019ca:	4618      	mov	r0, r3
 80019cc:	f00f f906 	bl	8010bdc <puts>
				(*items_sz)++;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	1c5a      	adds	r2, r3, #1
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	601a      	str	r2, [r3, #0]
			res = f_readdir(&dir, &fno);                   /* Read a directory item */
 80019da:	e7ad      	b.n	8001938 <scan_files+0x54>
				if (*items_sz>255) break;
 80019dc:	bf00      	nop
			}
		}
		f_closedir(&dir);
 80019de:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80019e2:	4618      	mov	r0, r3
 80019e4:	f00b ff2e 	bl	800d844 <f_closedir>
	}

	return res;
 80019e8:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	37c8      	adds	r7, #200	; 0xc8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bdb0      	pop	{r4, r5, r7, pc}
 80019f4:	20000308 	.word	0x20000308
 80019f8:	2000031e 	.word	0x2000031e
 80019fc:	08011a2c 	.word	0x08011a2c
 8001a00:	08011a34 	.word	0x08011a34

08001a04 <read_filename>:

FRESULT read_filename(char* path, DIR target_dir, char* fname)        /* Start node to be scanned (***also used as work area***) */
{
 8001a04:	b084      	sub	sp, #16
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b0b2      	sub	sp, #200	; 0xc8
 8001a0a:	af02      	add	r7, sp, #8
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
 8001a12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	DIR dir;
	UINT i;
	static FILINFO fno;
	char buffer[STRING_SZ];

	res = f_opendir(&dir, path);                       /* Open the directory */
 8001a16:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f00b fe83 	bl	800d728 <f_opendir>
 8001a22:	4603      	mov	r3, r0
 8001a24:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
	if (res == FR_OK) {
 8001a28:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d135      	bne.n	8001a9c <read_filename+0x98>
		res = f_readdir(&target_dir, &fno);                   /* Read a directory item */
 8001a30:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a34:	4920      	ldr	r1, [pc, #128]	; (8001ab8 <read_filename+0xb4>)
 8001a36:	4618      	mov	r0, r3
 8001a38:	f00b ff2f 	bl	800d89a <f_readdir>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

		if (res != FR_OK || fno.fname[0] == 0) {
 8001a42:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d103      	bne.n	8001a52 <read_filename+0x4e>
 8001a4a:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <read_filename+0xb4>)
 8001a4c:	7d9b      	ldrb	r3, [r3, #22]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10a      	bne.n	8001a68 <read_filename+0x64>
			fname[0]=0;
 8001a52:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001a56:	2200      	movs	r2, #0
 8001a58:	701a      	strb	r2, [r3, #0]
			f_closedir(&dir);
 8001a5a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f00b fef0 	bl	800d844 <f_closedir>
			return FR_INT_ERR;  /* Break on error or end of dir */
 8001a64:	2302      	movs	r3, #2
 8001a66:	e020      	b.n	8001aaa <read_filename+0xa6>
		}
		if (fno.fattrib & AM_DIR) {
 8001a68:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <read_filename+0xb4>)
 8001a6a:	7a1b      	ldrb	r3, [r3, #8]
 8001a6c:	f003 0310 	and.w	r3, r3, #16
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00a      	beq.n	8001a8a <read_filename+0x86>
			fname[0]=0;
 8001a74:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]
			f_closedir(&dir);
 8001a7c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001a80:	4618      	mov	r0, r3
 8001a82:	f00b fedf 	bl	800d844 <f_closedir>
			return FR_INT_ERR;
 8001a86:	2302      	movs	r3, #2
 8001a88:	e00f      	b.n	8001aaa <read_filename+0xa6>
		}

		snprintf(fname, STRING_SZ, "%s/%s", path, fno.fname);
 8001a8a:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <read_filename+0xb8>)
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a0b      	ldr	r2, [pc, #44]	; (8001ac0 <read_filename+0xbc>)
 8001a92:	2180      	movs	r1, #128	; 0x80
 8001a94:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8001a98:	f00f f8a8 	bl	8010bec <sniprintf>
	}
	f_closedir(&dir);
 8001a9c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f00b fecf 	bl	800d844 <f_closedir>

	return res;
 8001aa6:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	37c0      	adds	r7, #192	; 0xc0
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ab4:	b004      	add	sp, #16
 8001ab6:	4770      	bx	lr
 8001ab8:	20000420 	.word	0x20000420
 8001abc:	20000436 	.word	0x20000436
 8001ac0:	08011a4c 	.word	0x08011a4c

08001ac4 <StartuSDThread>:
 * @retval None
 */

/* USER CODE END Header_StartuSDThread */
void StartuSDThread(void const * argument)
{
 8001ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ac6:	b09b      	sub	sp, #108	; 0x6c
 8001ac8:	af0c      	add	r7, sp, #48	; 0x30
 8001aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	sFONT *font= (sFONT*) malloc(sizeof(sFONT));
 8001acc:	2008      	movs	r0, #8
 8001ace:	f00e ff47 	bl	8010960 <malloc>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
	if (!font) Error_Handler();
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <StartuSDThread+0x1c>
 8001adc:	f000 f966 	bl	8001dac <Error_Handler>
	BSP_LED_Off(LED1);
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	f001 f8f9 	bl	8002cd8 <BSP_LED_Off>

	Screen_Init(&screen);
 8001ae6:	48a5      	ldr	r0, [pc, #660]	; (8001d7c <StartuSDThread+0x2b8>)
 8001ae8:	f7fe fded 	bl	80006c6 <Screen_Init>
//
	Screen_Flip_Buffers(&screen);
 8001aec:	48a3      	ldr	r0, [pc, #652]	; (8001d7c <StartuSDThread+0x2b8>)
 8001aee:	f7fe fe27 	bl	8000740 <Screen_Flip_Buffers>
	BSP_LCD_Clear(LCD_COLOR_RED);//clear the LCD on blue color
 8001af2:	48a3      	ldr	r0, [pc, #652]	; (8001d80 <StartuSDThread+0x2bc>)
 8001af4:	f001 fac2 	bl	800307c <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);//set text background color
 8001af8:	48a2      	ldr	r0, [pc, #648]	; (8001d84 <StartuSDThread+0x2c0>)
 8001afa:	f001 fa75 	bl	8002fe8 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 8001afe:	f04f 30ff 	mov.w	r0, #4294967295
 8001b02:	f001 fa59 	bl	8002fb8 <BSP_LCD_SetTextColor>
//
	Screen_Flip_Buffers(&screen);
 8001b06:	489d      	ldr	r0, [pc, #628]	; (8001d7c <StartuSDThread+0x2b8>)
 8001b08:	f7fe fe1a 	bl	8000740 <Screen_Flip_Buffers>
	BSP_LCD_Clear(LCD_COLOR_RED);//clear the LCD on blue color
 8001b0c:	489c      	ldr	r0, [pc, #624]	; (8001d80 <StartuSDThread+0x2bc>)
 8001b0e:	f001 fab5 	bl	800307c <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);//set text background color
 8001b12:	489c      	ldr	r0, [pc, #624]	; (8001d84 <StartuSDThread+0x2c0>)
 8001b14:	f001 fa68 	bl	8002fe8 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 8001b18:	f04f 30ff 	mov.w	r0, #4294967295
 8001b1c:	f001 fa4c 	bl	8002fb8 <BSP_LCD_SetTextColor>

    uint32_t SX=BSP_LCD_GetXSize();
 8001b20:	f001 f962 	bl	8002de8 <BSP_LCD_GetXSize>
 8001b24:	6238      	str	r0, [r7, #32]
	uint32_t SY=BSP_LCD_GetYSize();
 8001b26:	f001 f973 	bl	8002e10 <BSP_LCD_GetYSize>
 8001b2a:	61f8      	str	r0, [r7, #28]

	/*##-1- Link the micro SD disk I/O driver ##################################*/
	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8001b2c:	4996      	ldr	r1, [pc, #600]	; (8001d88 <StartuSDThread+0x2c4>)
 8001b2e:	4897      	ldr	r0, [pc, #604]	; (8001d8c <StartuSDThread+0x2c8>)
 8001b30:	f00b ff58 	bl	800d9e4 <FATFS_LinkDriver>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f040 809b 	bne.w	8001c72 <StartuSDThread+0x1ae>
	{
		/*##-2- Register the file system object to the FatFs module ##############*/
		if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	4992      	ldr	r1, [pc, #584]	; (8001d88 <StartuSDThread+0x2c4>)
 8001b40:	4893      	ldr	r0, [pc, #588]	; (8001d90 <StartuSDThread+0x2cc>)
 8001b42:	f00b fd8d 	bl	800d660 <f_mount>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <StartuSDThread+0x8c>
		{
			/* FatFs Initialization Error */
			Error_Handler();
 8001b4c:	f000 f92e 	bl	8001dac <Error_Handler>
		}
		/*##-3- Create a FAT file system (format) on the logical drive #########*/
		char path[2]="/";
 8001b50:	232f      	movs	r3, #47	; 0x2f
 8001b52:	823b      	strh	r3, [r7, #16]
		FRESULT res = scan_files(path, items, &items_sz);
 8001b54:	f107 0310 	add.w	r3, r7, #16
 8001b58:	4a8e      	ldr	r2, [pc, #568]	; (8001d94 <StartuSDThread+0x2d0>)
 8001b5a:	498f      	ldr	r1, [pc, #572]	; (8001d98 <StartuSDThread+0x2d4>)
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fec1 	bl	80018e4 <scan_files>
 8001b62:	4603      	mov	r3, r0
 8001b64:	76fb      	strb	r3, [r7, #27]
		snprintf(buffer, sizeof(buffer), "==============================================");
 8001b66:	4a8d      	ldr	r2, [pc, #564]	; (8001d9c <StartuSDThread+0x2d8>)
 8001b68:	2180      	movs	r1, #128	; 0x80
 8001b6a:	488d      	ldr	r0, [pc, #564]	; (8001da0 <StartuSDThread+0x2dc>)
 8001b6c:	f00f f83e 	bl	8010bec <sniprintf>
		printf("%s\n", buffer);
 8001b70:	488b      	ldr	r0, [pc, #556]	; (8001da0 <StartuSDThread+0x2dc>)
 8001b72:	f00f f833 	bl	8010bdc <puts>

		for (UINT it=0; it<items_sz; it++){
 8001b76:	2300      	movs	r3, #0
 8001b78:	637b      	str	r3, [r7, #52]	; 0x34
 8001b7a:	e036      	b.n	8001bea <StartuSDThread+0x126>
			snprintf(buffer, sizeof(buffer), "dir %x", items[it].dir);
 8001b7c:	4a86      	ldr	r2, [pc, #536]	; (8001d98 <StartuSDThread+0x2d4>)
 8001b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b80:	2134      	movs	r1, #52	; 0x34
 8001b82:	fb01 f303 	mul.w	r3, r1, r3
 8001b86:	4413      	add	r3, r2
 8001b88:	3320      	adds	r3, #32
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a85      	ldr	r2, [pc, #532]	; (8001da4 <StartuSDThread+0x2e0>)
 8001b8e:	2180      	movs	r1, #128	; 0x80
 8001b90:	4883      	ldr	r0, [pc, #524]	; (8001da0 <StartuSDThread+0x2dc>)
 8001b92:	f00f f82b 	bl	8010bec <sniprintf>
			printf("%s\n", buffer);
 8001b96:	4882      	ldr	r0, [pc, #520]	; (8001da0 <StartuSDThread+0x2dc>)
 8001b98:	f00f f820 	bl	8010bdc <puts>
			FRESULT res = read_filename(path, items[it], buffer);
 8001b9c:	4a7e      	ldr	r2, [pc, #504]	; (8001d98 <StartuSDThread+0x2d4>)
 8001b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba0:	2134      	movs	r1, #52	; 0x34
 8001ba2:	fb01 f303 	mul.w	r3, r1, r3
 8001ba6:	18d6      	adds	r6, r2, r3
 8001ba8:	f107 0c10 	add.w	ip, r7, #16
 8001bac:	4b7c      	ldr	r3, [pc, #496]	; (8001da0 <StartuSDThread+0x2dc>)
 8001bae:	930a      	str	r3, [sp, #40]	; 0x28
 8001bb0:	466d      	mov	r5, sp
 8001bb2:	f106 040c 	add.w	r4, r6, #12
 8001bb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bbe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bc2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bc6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001bca:	4660      	mov	r0, ip
 8001bcc:	f7ff ff1a 	bl	8001a04 <read_filename>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	767b      	strb	r3, [r7, #25]
			if (res != FR_OK) continue;
 8001bd4:	7e7b      	ldrb	r3, [r7, #25]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d103      	bne.n	8001be2 <StartuSDThread+0x11e>
			printf("%s\n", buffer);
 8001bda:	4871      	ldr	r0, [pc, #452]	; (8001da0 <StartuSDThread+0x2dc>)
 8001bdc:	f00e fffe 	bl	8010bdc <puts>
 8001be0:	e000      	b.n	8001be4 <StartuSDThread+0x120>
			if (res != FR_OK) continue;
 8001be2:	bf00      	nop
		for (UINT it=0; it<items_sz; it++){
 8001be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001be6:	3301      	adds	r3, #1
 8001be8:	637b      	str	r3, [r7, #52]	; 0x34
 8001bea:	4b6a      	ldr	r3, [pc, #424]	; (8001d94 <StartuSDThread+0x2d0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d3c3      	bcc.n	8001b7c <StartuSDThread+0xb8>
		}

		snprintf(buffer, sizeof(buffer), "==============================================");
 8001bf4:	4a69      	ldr	r2, [pc, #420]	; (8001d9c <StartuSDThread+0x2d8>)
 8001bf6:	2180      	movs	r1, #128	; 0x80
 8001bf8:	4869      	ldr	r0, [pc, #420]	; (8001da0 <StartuSDThread+0x2dc>)
 8001bfa:	f00e fff7 	bl	8010bec <sniprintf>
		printf("%s\n", buffer);
 8001bfe:	4868      	ldr	r0, [pc, #416]	; (8001da0 <StartuSDThread+0x2dc>)
 8001c00:	f00e ffec 	bl	8010bdc <puts>

		for (UINT it=0; it<items_sz; it++){
 8001c04:	2300      	movs	r3, #0
 8001c06:	633b      	str	r3, [r7, #48]	; 0x30
 8001c08:	e026      	b.n	8001c58 <StartuSDThread+0x194>
			FRESULT res = read_filename(path, items[it], buffer);
 8001c0a:	4a63      	ldr	r2, [pc, #396]	; (8001d98 <StartuSDThread+0x2d4>)
 8001c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c0e:	2134      	movs	r1, #52	; 0x34
 8001c10:	fb01 f303 	mul.w	r3, r1, r3
 8001c14:	18d6      	adds	r6, r2, r3
 8001c16:	f107 0c10 	add.w	ip, r7, #16
 8001c1a:	4b61      	ldr	r3, [pc, #388]	; (8001da0 <StartuSDThread+0x2dc>)
 8001c1c:	930a      	str	r3, [sp, #40]	; 0x28
 8001c1e:	466d      	mov	r5, sp
 8001c20:	f106 040c 	add.w	r4, r6, #12
 8001c24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c2c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c30:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c34:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001c38:	4660      	mov	r0, ip
 8001c3a:	f7ff fee3 	bl	8001a04 <read_filename>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	76bb      	strb	r3, [r7, #26]
			if (res != FR_OK) continue;
 8001c42:	7ebb      	ldrb	r3, [r7, #26]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d103      	bne.n	8001c50 <StartuSDThread+0x18c>
			printf("%s\n", buffer);
 8001c48:	4855      	ldr	r0, [pc, #340]	; (8001da0 <StartuSDThread+0x2dc>)
 8001c4a:	f00e ffc7 	bl	8010bdc <puts>
 8001c4e:	e000      	b.n	8001c52 <StartuSDThread+0x18e>
			if (res != FR_OK) continue;
 8001c50:	bf00      	nop
		for (UINT it=0; it<items_sz; it++){
 8001c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c54:	3301      	adds	r3, #1
 8001c56:	633b      	str	r3, [r7, #48]	; 0x30
 8001c58:	4b4e      	ldr	r3, [pc, #312]	; (8001d94 <StartuSDThread+0x2d0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d3d3      	bcc.n	8001c0a <StartuSDThread+0x146>
		}

		snprintf(buffer, sizeof(buffer), "==============================================");
 8001c62:	4a4e      	ldr	r2, [pc, #312]	; (8001d9c <StartuSDThread+0x2d8>)
 8001c64:	2180      	movs	r1, #128	; 0x80
 8001c66:	484e      	ldr	r0, [pc, #312]	; (8001da0 <StartuSDThread+0x2dc>)
 8001c68:	f00e ffc0 	bl	8010bec <sniprintf>
		printf("%s\n", buffer);
 8001c6c:	484c      	ldr	r0, [pc, #304]	; (8001da0 <StartuSDThread+0x2dc>)
 8001c6e:	f00e ffb5 	bl	8010bdc <puts>
	}

	BSP_LCD_SetFont(&Font12);
 8001c72:	484d      	ldr	r0, [pc, #308]	; (8001da8 <StartuSDThread+0x2e4>)
 8001c74:	f001 f9d2 	bl	800301c <BSP_LCD_SetFont>
	font = BSP_LCD_GetFont();
 8001c78:	f001 f9ea 	bl	8003050 <BSP_LCD_GetFont>
 8001c7c:	6278      	str	r0, [r7, #36]	; 0x24
	uint16_t Height = font->Height;
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	88db      	ldrh	r3, [r3, #6]
 8001c82:	82fb      	strh	r3, [r7, #22]

	/* Infinite Loop */
	for( ;; )
	{
		osDelay(1);
 8001c84:	2001      	movs	r0, #1
 8001c86:	f00c f87e 	bl	800dd86 <osDelay>

		BSP_LCD_Clear(LCD_COLOR_RED);//clear the LCD on blue color
 8001c8a:	483d      	ldr	r0, [pc, #244]	; (8001d80 <StartuSDThread+0x2bc>)
 8001c8c:	f001 f9f6 	bl	800307c <BSP_LCD_Clear>
		BSP_LCD_SetBackColor(LCD_COLOR_BLUE);//set text background color
 8001c90:	483c      	ldr	r0, [pc, #240]	; (8001d84 <StartuSDThread+0x2c0>)
 8001c92:	f001 f9a9 	bl	8002fe8 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 8001c96:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9a:	f001 f98d 	bl	8002fb8 <BSP_LCD_SetTextColor>

		for (UINT it=0, offset=0; it<items_sz; it++){
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ca6:	e05c      	b.n	8001d62 <StartuSDThread+0x29e>
			char path[2]="/";
 8001ca8:	232f      	movs	r3, #47	; 0x2f
 8001caa:	81bb      	strh	r3, [r7, #12]
			FRESULT res = read_filename(path, items[it], buffer);
 8001cac:	4a3a      	ldr	r2, [pc, #232]	; (8001d98 <StartuSDThread+0x2d4>)
 8001cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb0:	2134      	movs	r1, #52	; 0x34
 8001cb2:	fb01 f303 	mul.w	r3, r1, r3
 8001cb6:	18d6      	adds	r6, r2, r3
 8001cb8:	f107 0c0c 	add.w	ip, r7, #12
 8001cbc:	4b38      	ldr	r3, [pc, #224]	; (8001da0 <StartuSDThread+0x2dc>)
 8001cbe:	930a      	str	r3, [sp, #40]	; 0x28
 8001cc0:	466d      	mov	r5, sp
 8001cc2:	f106 040c 	add.w	r4, r6, #12
 8001cc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ccc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cd6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001cda:	4660      	mov	r0, ip
 8001cdc:	f7ff fe92 	bl	8001a04 <read_filename>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	757b      	strb	r3, [r7, #21]
			if (res != FR_OK) continue;
 8001ce4:	7d7b      	ldrb	r3, [r7, #21]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d137      	bne.n	8001d5a <StartuSDThread+0x296>

			BSP_LCD_SetFont(&Font12);
 8001cea:	482f      	ldr	r0, [pc, #188]	; (8001da8 <StartuSDThread+0x2e4>)
 8001cec:	f001 f996 	bl	800301c <BSP_LCD_SetFont>
			BSP_LCD_DisplayStringAt(0, Height*(offset%(SY/Height))+5, (uint8_t*)buffer, LEFT_MODE);
 8001cf0:	8afb      	ldrh	r3, [r7, #22]
 8001cf2:	69fa      	ldr	r2, [r7, #28]
 8001cf4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cfa:	fbb3 f1f2 	udiv	r1, r3, r2
 8001cfe:	fb02 f201 	mul.w	r2, r2, r1
 8001d02:	1a9b      	subs	r3, r3, r2
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	8afa      	ldrh	r2, [r7, #22]
 8001d08:	fb12 f303 	smulbb	r3, r2, r3
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	3305      	adds	r3, #5
 8001d10:	b299      	uxth	r1, r3
 8001d12:	2303      	movs	r3, #3
 8001d14:	4a22      	ldr	r2, [pc, #136]	; (8001da0 <StartuSDThread+0x2dc>)
 8001d16:	2000      	movs	r0, #0
 8001d18:	f001 fa1c 	bl	8003154 <BSP_LCD_DisplayStringAt>
			if ((offset%(SY/Height))==SY/Height-1){
 8001d1c:	8afb      	ldrh	r3, [r7, #22]
 8001d1e:	69fa      	ldr	r2, [r7, #28]
 8001d20:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d26:	fbb3 f1f2 	udiv	r1, r3, r2
 8001d2a:	fb02 f201 	mul.w	r2, r2, r1
 8001d2e:	1a9a      	subs	r2, r3, r2
 8001d30:	8afb      	ldrh	r3, [r7, #22]
 8001d32:	69f9      	ldr	r1, [r7, #28]
 8001d34:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d109      	bne.n	8001d52 <StartuSDThread+0x28e>
			   Screen_Flip_Buffers(&screen);
 8001d3e:	480f      	ldr	r0, [pc, #60]	; (8001d7c <StartuSDThread+0x2b8>)
 8001d40:	f7fe fcfe 	bl	8000740 <Screen_Flip_Buffers>
			   BSP_LCD_Clear(LCD_COLOR_RED);//clear the LCD on blue color
 8001d44:	480e      	ldr	r0, [pc, #56]	; (8001d80 <StartuSDThread+0x2bc>)
 8001d46:	f001 f999 	bl	800307c <BSP_LCD_Clear>
			   osDelay(1000);
 8001d4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d4e:	f00c f81a 	bl	800dd86 <osDelay>
			}
			offset++;
 8001d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d54:	3301      	adds	r3, #1
 8001d56:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d58:	e000      	b.n	8001d5c <StartuSDThread+0x298>
			if (res != FR_OK) continue;
 8001d5a:	bf00      	nop
		for (UINT it=0, offset=0; it<items_sz; it++){
 8001d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d5e:	3301      	adds	r3, #1
 8001d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d62:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <StartuSDThread+0x2d0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d39d      	bcc.n	8001ca8 <StartuSDThread+0x1e4>
		}
		Screen_Flip_Buffers(&screen);
 8001d6c:	4803      	ldr	r0, [pc, #12]	; (8001d7c <StartuSDThread+0x2b8>)
 8001d6e:	f7fe fce7 	bl	8000740 <Screen_Flip_Buffers>
		osDelay(1000);
 8001d72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d76:	f00c f806 	bl	800dd86 <osDelay>
		osDelay(1);
 8001d7a:	e783      	b.n	8001c84 <StartuSDThread+0x1c0>
 8001d7c:	2000095c 	.word	0x2000095c
 8001d80:	ffff0000 	.word	0xffff0000
 8001d84:	ff0000ff 	.word	0xff0000ff
 8001d88:	20001080 	.word	0x20001080
 8001d8c:	08011af8 	.word	0x08011af8
 8001d90:	200010a8 	.word	0x200010a8
 8001d94:	20000304 	.word	0x20000304
 8001d98:	20001718 	.word	0x20001718
 8001d9c:	08011a54 	.word	0x08011a54
 8001da0:	20001000 	.word	0x20001000
 8001da4:	08011a84 	.word	0x08011a84
 8001da8:	20000010 	.word	0x20000010

08001dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001db0:	b672      	cpsid	i
}
 8001db2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001db4:	e7fe      	b.n	8001db4 <Error_Handler+0x8>
	...

08001db8 <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <SD_CheckStatus+0x38>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8001dc8:	f001 fe92 	bl	8003af0 <BSP_SD_GetCardState>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d107      	bne.n	8001de2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8001dd2:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <SD_CheckStatus+0x38>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	f023 0301 	bic.w	r3, r3, #1
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <SD_CheckStatus+0x38>)
 8001de0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8001de2:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <SD_CheckStatus+0x38>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	b2db      	uxtb	r3, r3
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20000000 	.word	0x20000000

08001df4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8001df4:	b590      	push	{r4, r7, lr}
 8001df6:	b087      	sub	sp, #28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8001dfe:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <SD_initialize+0x6c>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 8001e04:	f00b ff57 	bl	800dcb6 <osKernelRunning>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d020      	beq.n	8001e50 <SD_initialize+0x5c>
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8001e0e:	f001 fcc9 	bl	80037a4 <BSP_SD_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d107      	bne.n	8001e28 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff ffcc 	bl	8001db8 <SD_CheckStatus>
 8001e20:	4603      	mov	r3, r0
 8001e22:	461a      	mov	r2, r3
 8001e24:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <SD_initialize+0x6c>)
 8001e26:	701a      	strb	r2, [r3, #0]

    /*
     * if the SD is correctly initialized, create the operation queue
     */

    if (Stat != STA_NOINIT)
 8001e28:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <SD_initialize+0x6c>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d00e      	beq.n	8001e50 <SD_initialize+0x5c>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8001e32:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <SD_initialize+0x70>)
 8001e34:	f107 0408 	add.w	r4, r7, #8
 8001e38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8001e3e:	f107 0308 	add.w	r3, r7, #8
 8001e42:	2100      	movs	r1, #0
 8001e44:	4618      	mov	r0, r3
 8001e46:	f00c f888 	bl	800df5a <osMessageCreate>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	4a06      	ldr	r2, [pc, #24]	; (8001e68 <SD_initialize+0x74>)
 8001e4e:	6013      	str	r3, [r2, #0]
    }
  }

  return Stat;
 8001e50:	4b03      	ldr	r3, [pc, #12]	; (8001e60 <SD_initialize+0x6c>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	b2db      	uxtb	r3, r3
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	371c      	adds	r7, #28
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd90      	pop	{r4, r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000000 	.word	0x20000000
 8001e64:	08011a98 	.word	0x08011a98
 8001e68:	20000538 	.word	0x20000538

08001e6c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff9d 	bl	8001db8 <SD_CheckStatus>
 8001e7e:	4603      	mov	r3, r0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08a      	sub	sp, #40	; 0x28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	603b      	str	r3, [r7, #0]
 8001e94:	4603      	mov	r3, r0
 8001e96:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t timer;
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	68b8      	ldr	r0, [r7, #8]
 8001ea4:	f001 fce0 	bl	8003868 <BSP_SD_ReadBlocks_DMA>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d125      	bne.n	8001efa <SD_read+0x72>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8001eae:	4b16      	ldr	r3, [pc, #88]	; (8001f08 <SD_read+0x80>)
 8001eb0:	6819      	ldr	r1, [r3, #0]
 8001eb2:	f107 0314 	add.w	r3, r7, #20
 8001eb6:	f247 5230 	movw	r2, #30000	; 0x7530
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f00c f8b6 	bl	800e02c <osMessageGet>

    if (event.status == osEventMessage)
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	2b10      	cmp	r3, #16
 8001ec4:	d119      	bne.n	8001efa <SD_read+0x72>
    {
      if (event.value.v == READ_CPLT_MSG)
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d116      	bne.n	8001efa <SD_read+0x72>
      {
        timer = osKernelSysTick() + SD_TIMEOUT;
 8001ecc:	f00b feff 	bl	800dcce <osKernelSysTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	f247 5330 	movw	r3, #30000	; 0x7530
 8001ed6:	4413      	add	r3, r2
 8001ed8:	623b      	str	r3, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(timer > osKernelSysTick())
 8001eda:	e008      	b.n	8001eee <SD_read+0x66>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8001edc:	f001 fe08 	bl	8003af0 <BSP_SD_GetCardState>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d103      	bne.n	8001eee <SD_read+0x66>
          {
            res = RES_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
               adjust the address and the D-Cache size to invalidate accordingly.
             */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8001eec:	e005      	b.n	8001efa <SD_read+0x72>
        while(timer > osKernelSysTick())
 8001eee:	f00b feee 	bl	800dcce <osKernelSysTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d8f0      	bhi.n	8001edc <SD_read+0x54>
        }
      }
    }
  }

  return res;
 8001efa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3728      	adds	r7, #40	; 0x28
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000538 	.word	0x20000538

08001f0c <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08a      	sub	sp, #40	; 0x28
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	607a      	str	r2, [r7, #4]
 8001f16:	603b      	str	r3, [r7, #0]
 8001f18:	4603      	mov	r3, r0
 8001f1a:	73fb      	strb	r3, [r7, #15]
  osEvent event;
  DRESULT res = RES_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif


  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	6879      	ldr	r1, [r7, #4]
 8001f26:	68b8      	ldr	r0, [r7, #8]
 8001f28:	f001 fcb6 	bl	8003898 <BSP_SD_WriteBlocks_DMA>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d125      	bne.n	8001f7e <SD_write+0x72>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8001f32:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <SD_write+0x80>)
 8001f34:	6819      	ldr	r1, [r3, #0]
 8001f36:	f107 0314 	add.w	r3, r7, #20
 8001f3a:	f247 5230 	movw	r2, #30000	; 0x7530
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f00c f874 	bl	800e02c <osMessageGet>

    if (event.status == osEventMessage)
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	2b10      	cmp	r3, #16
 8001f48:	d119      	bne.n	8001f7e <SD_write+0x72>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d116      	bne.n	8001f7e <SD_write+0x72>
      {
        timer = osKernelSysTick() + SD_TIMEOUT;
 8001f50:	f00b febd 	bl	800dcce <osKernelSysTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	f247 5330 	movw	r3, #30000	; 0x7530
 8001f5a:	4413      	add	r3, r2
 8001f5c:	623b      	str	r3, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(timer > osKernelSysTick())
 8001f5e:	e008      	b.n	8001f72 <SD_write+0x66>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8001f60:	f001 fdc6 	bl	8003af0 <BSP_SD_GetCardState>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d103      	bne.n	8001f72 <SD_write+0x66>
          {
            res = RES_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8001f70:	e005      	b.n	8001f7e <SD_write+0x72>
        while(timer > osKernelSysTick())
 8001f72:	f00b feac 	bl	800dcce <osKernelSysTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	6a3b      	ldr	r3, [r7, #32]
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d8f0      	bhi.n	8001f60 <SD_write+0x54>
        }
      }
    }
  }

  return res;
 8001f7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3728      	adds	r7, #40	; 0x28
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000538 	.word	0x20000538

08001f90 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08c      	sub	sp, #48	; 0x30
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	603a      	str	r2, [r7, #0]
 8001f9a:	71fb      	strb	r3, [r7, #7]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001fa6:	4b25      	ldr	r3, [pc, #148]	; (800203c <SD_ioctl+0xac>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <SD_ioctl+0x28>
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e03c      	b.n	8002032 <SD_ioctl+0xa2>

  switch (cmd)
 8001fb8:	79bb      	ldrb	r3, [r7, #6]
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	d834      	bhi.n	8002028 <SD_ioctl+0x98>
 8001fbe:	a201      	add	r2, pc, #4	; (adr r2, 8001fc4 <SD_ioctl+0x34>)
 8001fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc4:	08001fd5 	.word	0x08001fd5
 8001fc8:	08001fdd 	.word	0x08001fdd
 8001fcc:	08001ff5 	.word	0x08001ff5
 8001fd0:	0800200f 	.word	0x0800200f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001fda:	e028      	b.n	800202e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8001fdc:	f107 030c 	add.w	r3, r7, #12
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f001 fd95 	bl	8003b10 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8001fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001ff2:	e01c      	b.n	800202e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8001ff4:	f107 030c 	add.w	r3, r7, #12
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f001 fd89 	bl	8003b10 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8001ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002000:	b29a      	uxth	r2, r3
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8002006:	2300      	movs	r3, #0
 8002008:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800200c:	e00f      	b.n	800202e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800200e:	f107 030c 	add.w	r3, r7, #12
 8002012:	4618      	mov	r0, r3
 8002014:	f001 fd7c 	bl	8003b10 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8002018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800201a:	0a5a      	lsrs	r2, r3, #9
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	601a      	str	r2, [r3, #0]
	res = RES_OK;
 8002020:	2300      	movs	r3, #0
 8002022:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8002026:	e002      	b.n	800202e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8002028:	2304      	movs	r3, #4
 800202a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800202e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002032:	4618      	mov	r0, r3
 8002034:	3730      	adds	r7, #48	; 0x30
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000000 	.word	0x20000000

08002040 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, osWaitForever);
 8002044:	4b04      	ldr	r3, [pc, #16]	; (8002058 <BSP_SD_WriteCpltCallback+0x18>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f04f 32ff 	mov.w	r2, #4294967295
 800204c:	2102      	movs	r1, #2
 800204e:	4618      	mov	r0, r3
 8002050:	f00b ffac 	bl	800dfac <osMessagePut>
}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20000538 	.word	0x20000538

0800205c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
   osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 8002060:	4b04      	ldr	r3, [pc, #16]	; (8002074 <BSP_SD_ReadCpltCallback+0x18>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f04f 32ff 	mov.w	r2, #4294967295
 8002068:	2101      	movs	r1, #1
 800206a:	4618      	mov	r0, r3
 800206c:	f00b ff9e 	bl	800dfac <osMessagePut>
}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000538 	.word	0x20000538

08002078 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800207e:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <HAL_MspInit+0x4c>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	4a10      	ldr	r2, [pc, #64]	; (80020c4 <HAL_MspInit+0x4c>)
 8002084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002088:	6413      	str	r3, [r2, #64]	; 0x40
 800208a:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <HAL_MspInit+0x4c>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002092:	607b      	str	r3, [r7, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002096:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_MspInit+0x4c>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	4a0a      	ldr	r2, [pc, #40]	; (80020c4 <HAL_MspInit+0x4c>)
 800209c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020a0:	6453      	str	r3, [r2, #68]	; 0x44
 80020a2:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <HAL_MspInit+0x4c>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020aa:	603b      	str	r3, [r7, #0]
 80020ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020ae:	2200      	movs	r2, #0
 80020b0:	210f      	movs	r1, #15
 80020b2:	f06f 0001 	mvn.w	r0, #1
 80020b6:	f002 fafa 	bl	80046ae <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40023800 	.word	0x40023800

080020c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08a      	sub	sp, #40	; 0x28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d0:	f107 0314 	add.w	r3, r7, #20
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a21      	ldr	r2, [pc, #132]	; (800216c <HAL_ADC_MspInit+0xa4>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d13c      	bne.n	8002164 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80020ea:	4b21      	ldr	r3, [pc, #132]	; (8002170 <HAL_ADC_MspInit+0xa8>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	4a20      	ldr	r2, [pc, #128]	; (8002170 <HAL_ADC_MspInit+0xa8>)
 80020f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020f4:	6453      	str	r3, [r2, #68]	; 0x44
 80020f6:	4b1e      	ldr	r3, [pc, #120]	; (8002170 <HAL_ADC_MspInit+0xa8>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020fe:	613b      	str	r3, [r7, #16]
 8002100:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002102:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <HAL_ADC_MspInit+0xa8>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	4a1a      	ldr	r2, [pc, #104]	; (8002170 <HAL_ADC_MspInit+0xa8>)
 8002108:	f043 0320 	orr.w	r3, r3, #32
 800210c:	6313      	str	r3, [r2, #48]	; 0x30
 800210e:	4b18      	ldr	r3, [pc, #96]	; (8002170 <HAL_ADC_MspInit+0xa8>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f003 0320 	and.w	r3, r3, #32
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211a:	4b15      	ldr	r3, [pc, #84]	; (8002170 <HAL_ADC_MspInit+0xa8>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	4a14      	ldr	r2, [pc, #80]	; (8002170 <HAL_ADC_MspInit+0xa8>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	6313      	str	r3, [r2, #48]	; 0x30
 8002126:	4b12      	ldr	r3, [pc, #72]	; (8002170 <HAL_ADC_MspInit+0xa8>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8002132:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002136:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002138:	2303      	movs	r3, #3
 800213a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	4619      	mov	r1, r3
 8002146:	480b      	ldr	r0, [pc, #44]	; (8002174 <HAL_ADC_MspInit+0xac>)
 8002148:	f003 fb72 	bl	8005830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800214c:	2301      	movs	r3, #1
 800214e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002150:	2303      	movs	r3, #3
 8002152:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002154:	2300      	movs	r3, #0
 8002156:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002158:	f107 0314 	add.w	r3, r7, #20
 800215c:	4619      	mov	r1, r3
 800215e:	4806      	ldr	r0, [pc, #24]	; (8002178 <HAL_ADC_MspInit+0xb0>)
 8002160:	f003 fb66 	bl	8005830 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002164:	bf00      	nop
 8002166:	3728      	adds	r7, #40	; 0x28
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40012200 	.word	0x40012200
 8002170:	40023800 	.word	0x40023800
 8002174:	40021400 	.word	0x40021400
 8002178:	40020000 	.word	0x40020000

0800217c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a0a      	ldr	r2, [pc, #40]	; (80021b4 <HAL_CRC_MspInit+0x38>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d10b      	bne.n	80021a6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800218e:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <HAL_CRC_MspInit+0x3c>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	4a09      	ldr	r2, [pc, #36]	; (80021b8 <HAL_CRC_MspInit+0x3c>)
 8002194:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002198:	6313      	str	r3, [r2, #48]	; 0x30
 800219a:	4b07      	ldr	r3, [pc, #28]	; (80021b8 <HAL_CRC_MspInit+0x3c>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80021a6:	bf00      	nop
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40023000 	.word	0x40023000
 80021b8:	40023800 	.word	0x40023800

080021bc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a0d      	ldr	r2, [pc, #52]	; (8002200 <HAL_DMA2D_MspInit+0x44>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d113      	bne.n	80021f6 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80021ce:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <HAL_DMA2D_MspInit+0x48>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	4a0c      	ldr	r2, [pc, #48]	; (8002204 <HAL_DMA2D_MspInit+0x48>)
 80021d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021d8:	6313      	str	r3, [r2, #48]	; 0x30
 80021da:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <HAL_DMA2D_MspInit+0x48>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80021e6:	2200      	movs	r2, #0
 80021e8:	2105      	movs	r1, #5
 80021ea:	205a      	movs	r0, #90	; 0x5a
 80021ec:	f002 fa5f 	bl	80046ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80021f0:	205a      	movs	r0, #90	; 0x5a
 80021f2:	f002 fa78 	bl	80046e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80021f6:	bf00      	nop
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	4002b000 	.word	0x4002b000
 8002204:	40023800 	.word	0x40023800

08002208 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b08e      	sub	sp, #56	; 0x38
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a55      	ldr	r2, [pc, #340]	; (800237c <HAL_LTDC_MspInit+0x174>)
 8002226:	4293      	cmp	r3, r2
 8002228:	f040 80a3 	bne.w	8002372 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800222c:	4b54      	ldr	r3, [pc, #336]	; (8002380 <HAL_LTDC_MspInit+0x178>)
 800222e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002230:	4a53      	ldr	r2, [pc, #332]	; (8002380 <HAL_LTDC_MspInit+0x178>)
 8002232:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002236:	6453      	str	r3, [r2, #68]	; 0x44
 8002238:	4b51      	ldr	r3, [pc, #324]	; (8002380 <HAL_LTDC_MspInit+0x178>)
 800223a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002240:	623b      	str	r3, [r7, #32]
 8002242:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002244:	4b4e      	ldr	r3, [pc, #312]	; (8002380 <HAL_LTDC_MspInit+0x178>)
 8002246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002248:	4a4d      	ldr	r2, [pc, #308]	; (8002380 <HAL_LTDC_MspInit+0x178>)
 800224a:	f043 0310 	orr.w	r3, r3, #16
 800224e:	6313      	str	r3, [r2, #48]	; 0x30
 8002250:	4b4b      	ldr	r3, [pc, #300]	; (8002380 <HAL_LTDC_MspInit+0x178>)
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	f003 0310 	and.w	r3, r3, #16
 8002258:	61fb      	str	r3, [r7, #28]
 800225a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800225c:	4b48      	ldr	r3, [pc, #288]	; (8002380 <HAL_LTDC_MspInit+0x178>)
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	4a47      	ldr	r2, [pc, #284]	; (8002380 <HAL_LTDC_MspInit+0x178>)
 8002262:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002266:	6313      	str	r3, [r2, #48]	; 0x30
 8002268:	4b45      	ldr	r3, [pc, #276]	; (8002380 <HAL_LTDC_MspInit+0x178>)
 800226a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002270:	61bb      	str	r3, [r7, #24]
 8002272:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002274:	4b42      	ldr	r3, [pc, #264]	; (8002380 <HAL_LTDC_MspInit+0x178>)
 8002276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002278:	4a41      	ldr	r2, [pc, #260]	; (8002380 <HAL_LTDC_MspInit+0x178>)
 800227a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800227e:	6313      	str	r3, [r2, #48]	; 0x30
 8002280:	4b3f      	ldr	r3, [pc, #252]	; (8002380 <HAL_LTDC_MspInit+0x178>)
 8002282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800228c:	4b3c      	ldr	r3, [pc, #240]	; (8002380 <HAL_LTDC_MspInit+0x178>)
 800228e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002290:	4a3b      	ldr	r2, [pc, #236]	; (8002380 <HAL_LTDC_MspInit+0x178>)
 8002292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002296:	6313      	str	r3, [r2, #48]	; 0x30
 8002298:	4b39      	ldr	r3, [pc, #228]	; (8002380 <HAL_LTDC_MspInit+0x178>)
 800229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80022a4:	4b36      	ldr	r3, [pc, #216]	; (8002380 <HAL_LTDC_MspInit+0x178>)
 80022a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a8:	4a35      	ldr	r2, [pc, #212]	; (8002380 <HAL_LTDC_MspInit+0x178>)
 80022aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ae:	6313      	str	r3, [r2, #48]	; 0x30
 80022b0:	4b33      	ldr	r3, [pc, #204]	; (8002380 <HAL_LTDC_MspInit+0x178>)
 80022b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80022bc:	2310      	movs	r3, #16
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c0:	2302      	movs	r3, #2
 80022c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c8:	2300      	movs	r3, #0
 80022ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022cc:	230e      	movs	r3, #14
 80022ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80022d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d4:	4619      	mov	r1, r3
 80022d6:	482b      	ldr	r0, [pc, #172]	; (8002384 <HAL_LTDC_MspInit+0x17c>)
 80022d8:	f003 faaa 	bl	8005830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80022dc:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e2:	2302      	movs	r3, #2
 80022e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ea:	2300      	movs	r3, #0
 80022ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022ee:	230e      	movs	r3, #14
 80022f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80022f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f6:	4619      	mov	r1, r3
 80022f8:	4823      	ldr	r0, [pc, #140]	; (8002388 <HAL_LTDC_MspInit+0x180>)
 80022fa:	f003 fa99 	bl	8005830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80022fe:	23f7      	movs	r3, #247	; 0xf7
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2300      	movs	r3, #0
 800230c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800230e:	230e      	movs	r3, #14
 8002310:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002316:	4619      	mov	r1, r3
 8002318:	481c      	ldr	r0, [pc, #112]	; (800238c <HAL_LTDC_MspInit+0x184>)
 800231a:	f003 fa89 	bl	8005830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800231e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002324:	2302      	movs	r3, #2
 8002326:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232c:	2300      	movs	r3, #0
 800232e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002330:	2309      	movs	r3, #9
 8002332:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002338:	4619      	mov	r1, r3
 800233a:	4815      	ldr	r0, [pc, #84]	; (8002390 <HAL_LTDC_MspInit+0x188>)
 800233c:	f003 fa78 	bl	8005830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002340:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002346:	2302      	movs	r3, #2
 8002348:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234e:	2300      	movs	r3, #0
 8002350:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002352:	230e      	movs	r3, #14
 8002354:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800235a:	4619      	mov	r1, r3
 800235c:	480d      	ldr	r0, [pc, #52]	; (8002394 <HAL_LTDC_MspInit+0x18c>)
 800235e:	f003 fa67 	bl	8005830 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002362:	2200      	movs	r2, #0
 8002364:	2105      	movs	r1, #5
 8002366:	2058      	movs	r0, #88	; 0x58
 8002368:	f002 f9a1 	bl	80046ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800236c:	2058      	movs	r0, #88	; 0x58
 800236e:	f002 f9ba 	bl	80046e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002372:	bf00      	nop
 8002374:	3738      	adds	r7, #56	; 0x38
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40016800 	.word	0x40016800
 8002380:	40023800 	.word	0x40023800
 8002384:	40021000 	.word	0x40021000
 8002388:	40022400 	.word	0x40022400
 800238c:	40022800 	.word	0x40022800
 8002390:	40021800 	.word	0x40021800
 8002394:	40022000 	.word	0x40022000

08002398 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08c      	sub	sp, #48	; 0x30
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a0:	f107 031c 	add.w	r3, r7, #28
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a3b      	ldr	r2, [pc, #236]	; (80024a4 <HAL_QSPI_MspInit+0x10c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d170      	bne.n	800249c <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80023ba:	4b3b      	ldr	r3, [pc, #236]	; (80024a8 <HAL_QSPI_MspInit+0x110>)
 80023bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023be:	4a3a      	ldr	r2, [pc, #232]	; (80024a8 <HAL_QSPI_MspInit+0x110>)
 80023c0:	f043 0302 	orr.w	r3, r3, #2
 80023c4:	6393      	str	r3, [r2, #56]	; 0x38
 80023c6:	4b38      	ldr	r3, [pc, #224]	; (80024a8 <HAL_QSPI_MspInit+0x110>)
 80023c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	61bb      	str	r3, [r7, #24]
 80023d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80023d2:	4b35      	ldr	r3, [pc, #212]	; (80024a8 <HAL_QSPI_MspInit+0x110>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	4a34      	ldr	r2, [pc, #208]	; (80024a8 <HAL_QSPI_MspInit+0x110>)
 80023d8:	f043 0310 	orr.w	r3, r3, #16
 80023dc:	6313      	str	r3, [r2, #48]	; 0x30
 80023de:	4b32      	ldr	r3, [pc, #200]	; (80024a8 <HAL_QSPI_MspInit+0x110>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	617b      	str	r3, [r7, #20]
 80023e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ea:	4b2f      	ldr	r3, [pc, #188]	; (80024a8 <HAL_QSPI_MspInit+0x110>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	4a2e      	ldr	r2, [pc, #184]	; (80024a8 <HAL_QSPI_MspInit+0x110>)
 80023f0:	f043 0302 	orr.w	r3, r3, #2
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
 80023f6:	4b2c      	ldr	r3, [pc, #176]	; (80024a8 <HAL_QSPI_MspInit+0x110>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002402:	4b29      	ldr	r3, [pc, #164]	; (80024a8 <HAL_QSPI_MspInit+0x110>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	4a28      	ldr	r2, [pc, #160]	; (80024a8 <HAL_QSPI_MspInit+0x110>)
 8002408:	f043 0308 	orr.w	r3, r3, #8
 800240c:	6313      	str	r3, [r2, #48]	; 0x30
 800240e:	4b26      	ldr	r3, [pc, #152]	; (80024a8 <HAL_QSPI_MspInit+0x110>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800241a:	2304      	movs	r3, #4
 800241c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241e:	2302      	movs	r3, #2
 8002420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002426:	2303      	movs	r3, #3
 8002428:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800242a:	2309      	movs	r3, #9
 800242c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800242e:	f107 031c 	add.w	r3, r7, #28
 8002432:	4619      	mov	r1, r3
 8002434:	481d      	ldr	r0, [pc, #116]	; (80024ac <HAL_QSPI_MspInit+0x114>)
 8002436:	f003 f9fb 	bl	8005830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800243a:	2340      	movs	r3, #64	; 0x40
 800243c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243e:	2302      	movs	r3, #2
 8002440:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002446:	2303      	movs	r3, #3
 8002448:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800244a:	230a      	movs	r3, #10
 800244c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800244e:	f107 031c 	add.w	r3, r7, #28
 8002452:	4619      	mov	r1, r3
 8002454:	4816      	ldr	r0, [pc, #88]	; (80024b0 <HAL_QSPI_MspInit+0x118>)
 8002456:	f003 f9eb 	bl	8005830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800245a:	2304      	movs	r3, #4
 800245c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245e:	2302      	movs	r3, #2
 8002460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002466:	2303      	movs	r3, #3
 8002468:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800246a:	2309      	movs	r3, #9
 800246c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800246e:	f107 031c 	add.w	r3, r7, #28
 8002472:	4619      	mov	r1, r3
 8002474:	480e      	ldr	r0, [pc, #56]	; (80024b0 <HAL_QSPI_MspInit+0x118>)
 8002476:	f003 f9db 	bl	8005830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800247a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800247e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002480:	2302      	movs	r3, #2
 8002482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002488:	2303      	movs	r3, #3
 800248a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800248c:	2309      	movs	r3, #9
 800248e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002490:	f107 031c 	add.w	r3, r7, #28
 8002494:	4619      	mov	r1, r3
 8002496:	4807      	ldr	r0, [pc, #28]	; (80024b4 <HAL_QSPI_MspInit+0x11c>)
 8002498:	f003 f9ca 	bl	8005830 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800249c:	bf00      	nop
 800249e:	3730      	adds	r7, #48	; 0x30
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	a0001000 	.word	0xa0001000
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40021000 	.word	0x40021000
 80024b0:	40020400 	.word	0x40020400
 80024b4:	40020c00 	.word	0x40020c00

080024b8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a07      	ldr	r2, [pc, #28]	; (80024e4 <HAL_RTC_MspInit+0x2c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d105      	bne.n	80024d6 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80024ca:	4b07      	ldr	r3, [pc, #28]	; (80024e8 <HAL_RTC_MspInit+0x30>)
 80024cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ce:	4a06      	ldr	r2, [pc, #24]	; (80024e8 <HAL_RTC_MspInit+0x30>)
 80024d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024d4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	40002800 	.word	0x40002800
 80024e8:	40023800 	.word	0x40023800

080024ec <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08a      	sub	sp, #40	; 0x28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f4:	f107 0314 	add.w	r3, r7, #20
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	609a      	str	r2, [r3, #8]
 8002500:	60da      	str	r2, [r3, #12]
 8002502:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a6a      	ldr	r2, [pc, #424]	; (80026b4 <HAL_SD_MspInit+0x1c8>)
 800250a:	4293      	cmp	r3, r2
 800250c:	f040 80ce 	bne.w	80026ac <HAL_SD_MspInit+0x1c0>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002510:	4b69      	ldr	r3, [pc, #420]	; (80026b8 <HAL_SD_MspInit+0x1cc>)
 8002512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002514:	4a68      	ldr	r2, [pc, #416]	; (80026b8 <HAL_SD_MspInit+0x1cc>)
 8002516:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800251a:	6453      	str	r3, [r2, #68]	; 0x44
 800251c:	4b66      	ldr	r3, [pc, #408]	; (80026b8 <HAL_SD_MspInit+0x1cc>)
 800251e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002528:	4b63      	ldr	r3, [pc, #396]	; (80026b8 <HAL_SD_MspInit+0x1cc>)
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	4a62      	ldr	r2, [pc, #392]	; (80026b8 <HAL_SD_MspInit+0x1cc>)
 800252e:	f043 0304 	orr.w	r3, r3, #4
 8002532:	6313      	str	r3, [r2, #48]	; 0x30
 8002534:	4b60      	ldr	r3, [pc, #384]	; (80026b8 <HAL_SD_MspInit+0x1cc>)
 8002536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002540:	4b5d      	ldr	r3, [pc, #372]	; (80026b8 <HAL_SD_MspInit+0x1cc>)
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	4a5c      	ldr	r2, [pc, #368]	; (80026b8 <HAL_SD_MspInit+0x1cc>)
 8002546:	f043 0308 	orr.w	r3, r3, #8
 800254a:	6313      	str	r3, [r2, #48]	; 0x30
 800254c:	4b5a      	ldr	r3, [pc, #360]	; (80026b8 <HAL_SD_MspInit+0x1cc>)
 800254e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin;
 8002558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800255c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255e:	2302      	movs	r3, #2
 8002560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002566:	2303      	movs	r3, #3
 8002568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800256a:	230c      	movs	r3, #12
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CK_GPIO_Port, &GPIO_InitStruct);
 800256e:	f107 0314 	add.w	r3, r7, #20
 8002572:	4619      	mov	r1, r3
 8002574:	4851      	ldr	r0, [pc, #324]	; (80026bc <HAL_SD_MspInit+0x1d0>)
 8002576:	f003 f95b 	bl	8005830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9|GPIO_PIN_8;
 800257a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800257e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002580:	2302      	movs	r3, #2
 8002582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002584:	2301      	movs	r3, #1
 8002586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002588:	2303      	movs	r3, #3
 800258a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800258c:	230c      	movs	r3, #12
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002590:	f107 0314 	add.w	r3, r7, #20
 8002594:	4619      	mov	r1, r3
 8002596:	4849      	ldr	r0, [pc, #292]	; (80026bc <HAL_SD_MspInit+0x1d0>)
 8002598:	f003 f94a 	bl	8005830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800259c:	2304      	movs	r3, #4
 800259e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a0:	2302      	movs	r3, #2
 80025a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a8:	2303      	movs	r3, #3
 80025aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80025ac:	230c      	movs	r3, #12
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80025b0:	f107 0314 	add.w	r3, r7, #20
 80025b4:	4619      	mov	r1, r3
 80025b6:	4842      	ldr	r0, [pc, #264]	; (80026c0 <HAL_SD_MspInit+0x1d4>)
 80025b8:	f003 f93a 	bl	8005830 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 80025bc:	4b41      	ldr	r3, [pc, #260]	; (80026c4 <HAL_SD_MspInit+0x1d8>)
 80025be:	4a42      	ldr	r2, [pc, #264]	; (80026c8 <HAL_SD_MspInit+0x1dc>)
 80025c0:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80025c2:	4b40      	ldr	r3, [pc, #256]	; (80026c4 <HAL_SD_MspInit+0x1d8>)
 80025c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025c8:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025ca:	4b3e      	ldr	r3, [pc, #248]	; (80026c4 <HAL_SD_MspInit+0x1d8>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025d0:	4b3c      	ldr	r3, [pc, #240]	; (80026c4 <HAL_SD_MspInit+0x1d8>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025d6:	4b3b      	ldr	r3, [pc, #236]	; (80026c4 <HAL_SD_MspInit+0x1d8>)
 80025d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025dc:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80025de:	4b39      	ldr	r3, [pc, #228]	; (80026c4 <HAL_SD_MspInit+0x1d8>)
 80025e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025e4:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80025e6:	4b37      	ldr	r3, [pc, #220]	; (80026c4 <HAL_SD_MspInit+0x1d8>)
 80025e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025ec:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80025ee:	4b35      	ldr	r3, [pc, #212]	; (80026c4 <HAL_SD_MspInit+0x1d8>)
 80025f0:	2220      	movs	r2, #32
 80025f2:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80025f4:	4b33      	ldr	r3, [pc, #204]	; (80026c4 <HAL_SD_MspInit+0x1d8>)
 80025f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025fa:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80025fc:	4b31      	ldr	r3, [pc, #196]	; (80026c4 <HAL_SD_MspInit+0x1d8>)
 80025fe:	2204      	movs	r2, #4
 8002600:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002602:	4b30      	ldr	r3, [pc, #192]	; (80026c4 <HAL_SD_MspInit+0x1d8>)
 8002604:	2203      	movs	r2, #3
 8002606:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002608:	4b2e      	ldr	r3, [pc, #184]	; (80026c4 <HAL_SD_MspInit+0x1d8>)
 800260a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800260e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002610:	4b2c      	ldr	r3, [pc, #176]	; (80026c4 <HAL_SD_MspInit+0x1d8>)
 8002612:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002616:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8002618:	482a      	ldr	r0, [pc, #168]	; (80026c4 <HAL_SD_MspInit+0x1d8>)
 800261a:	f002 f969 	bl	80048f0 <HAL_DMA_Init>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <HAL_SD_MspInit+0x13c>
    {
      Error_Handler();
 8002624:	f7ff fbc2 	bl	8001dac <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a26      	ldr	r2, [pc, #152]	; (80026c4 <HAL_SD_MspInit+0x1d8>)
 800262c:	641a      	str	r2, [r3, #64]	; 0x40
 800262e:	4a25      	ldr	r2, [pc, #148]	; (80026c4 <HAL_SD_MspInit+0x1d8>)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8002634:	4b25      	ldr	r3, [pc, #148]	; (80026cc <HAL_SD_MspInit+0x1e0>)
 8002636:	4a26      	ldr	r2, [pc, #152]	; (80026d0 <HAL_SD_MspInit+0x1e4>)
 8002638:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800263a:	4b24      	ldr	r3, [pc, #144]	; (80026cc <HAL_SD_MspInit+0x1e0>)
 800263c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002640:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002642:	4b22      	ldr	r3, [pc, #136]	; (80026cc <HAL_SD_MspInit+0x1e0>)
 8002644:	2240      	movs	r2, #64	; 0x40
 8002646:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002648:	4b20      	ldr	r3, [pc, #128]	; (80026cc <HAL_SD_MspInit+0x1e0>)
 800264a:	2200      	movs	r2, #0
 800264c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800264e:	4b1f      	ldr	r3, [pc, #124]	; (80026cc <HAL_SD_MspInit+0x1e0>)
 8002650:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002654:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002656:	4b1d      	ldr	r3, [pc, #116]	; (80026cc <HAL_SD_MspInit+0x1e0>)
 8002658:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800265c:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800265e:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <HAL_SD_MspInit+0x1e0>)
 8002660:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002664:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8002666:	4b19      	ldr	r3, [pc, #100]	; (80026cc <HAL_SD_MspInit+0x1e0>)
 8002668:	2220      	movs	r2, #32
 800266a:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800266c:	4b17      	ldr	r3, [pc, #92]	; (80026cc <HAL_SD_MspInit+0x1e0>)
 800266e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002672:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002674:	4b15      	ldr	r3, [pc, #84]	; (80026cc <HAL_SD_MspInit+0x1e0>)
 8002676:	2204      	movs	r2, #4
 8002678:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800267a:	4b14      	ldr	r3, [pc, #80]	; (80026cc <HAL_SD_MspInit+0x1e0>)
 800267c:	2203      	movs	r2, #3
 800267e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002680:	4b12      	ldr	r3, [pc, #72]	; (80026cc <HAL_SD_MspInit+0x1e0>)
 8002682:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002686:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002688:	4b10      	ldr	r3, [pc, #64]	; (80026cc <HAL_SD_MspInit+0x1e0>)
 800268a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800268e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8002690:	480e      	ldr	r0, [pc, #56]	; (80026cc <HAL_SD_MspInit+0x1e0>)
 8002692:	f002 f92d 	bl	80048f0 <HAL_DMA_Init>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <HAL_SD_MspInit+0x1b4>
    {
      Error_Handler();
 800269c:	f7ff fb86 	bl	8001dac <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a0a      	ldr	r2, [pc, #40]	; (80026cc <HAL_SD_MspInit+0x1e0>)
 80026a4:	63da      	str	r2, [r3, #60]	; 0x3c
 80026a6:	4a09      	ldr	r2, [pc, #36]	; (80026cc <HAL_SD_MspInit+0x1e0>)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80026ac:	bf00      	nop
 80026ae:	3728      	adds	r7, #40	; 0x28
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40012c00 	.word	0x40012c00
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40020800 	.word	0x40020800
 80026c0:	40020c00 	.word	0x40020c00
 80026c4:	20001514 	.word	0x20001514
 80026c8:	40026458 	.word	0x40026458
 80026cc:	200016b8 	.word	0x200016b8
 80026d0:	400264a0 	.word	0x400264a0

080026d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b087      	sub	sp, #28
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a1c      	ldr	r2, [pc, #112]	; (8002754 <HAL_TIM_Base_MspInit+0x80>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d10c      	bne.n	8002700 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026e6:	4b1c      	ldr	r3, [pc, #112]	; (8002758 <HAL_TIM_Base_MspInit+0x84>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	4a1b      	ldr	r2, [pc, #108]	; (8002758 <HAL_TIM_Base_MspInit+0x84>)
 80026ec:	f043 0302 	orr.w	r3, r3, #2
 80026f0:	6413      	str	r3, [r2, #64]	; 0x40
 80026f2:	4b19      	ldr	r3, [pc, #100]	; (8002758 <HAL_TIM_Base_MspInit+0x84>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80026fe:	e022      	b.n	8002746 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM5)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a15      	ldr	r2, [pc, #84]	; (800275c <HAL_TIM_Base_MspInit+0x88>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d10c      	bne.n	8002724 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800270a:	4b13      	ldr	r3, [pc, #76]	; (8002758 <HAL_TIM_Base_MspInit+0x84>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	4a12      	ldr	r2, [pc, #72]	; (8002758 <HAL_TIM_Base_MspInit+0x84>)
 8002710:	f043 0308 	orr.w	r3, r3, #8
 8002714:	6413      	str	r3, [r2, #64]	; 0x40
 8002716:	4b10      	ldr	r3, [pc, #64]	; (8002758 <HAL_TIM_Base_MspInit+0x84>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f003 0308 	and.w	r3, r3, #8
 800271e:	613b      	str	r3, [r7, #16]
 8002720:	693b      	ldr	r3, [r7, #16]
}
 8002722:	e010      	b.n	8002746 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM8)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a0d      	ldr	r2, [pc, #52]	; (8002760 <HAL_TIM_Base_MspInit+0x8c>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d10b      	bne.n	8002746 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800272e:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <HAL_TIM_Base_MspInit+0x84>)
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	4a09      	ldr	r2, [pc, #36]	; (8002758 <HAL_TIM_Base_MspInit+0x84>)
 8002734:	f043 0302 	orr.w	r3, r3, #2
 8002738:	6453      	str	r3, [r2, #68]	; 0x44
 800273a:	4b07      	ldr	r3, [pc, #28]	; (8002758 <HAL_TIM_Base_MspInit+0x84>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]
}
 8002746:	bf00      	nop
 8002748:	371c      	adds	r7, #28
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40000400 	.word	0x40000400
 8002758:	40023800 	.word	0x40023800
 800275c:	40000c00 	.word	0x40000c00
 8002760:	40010400 	.word	0x40010400

08002764 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a0a      	ldr	r2, [pc, #40]	; (800279c <HAL_TIM_PWM_MspInit+0x38>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d10b      	bne.n	800278e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002776:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	4a09      	ldr	r2, [pc, #36]	; (80027a0 <HAL_TIM_PWM_MspInit+0x3c>)
 800277c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002780:	6413      	str	r3, [r2, #64]	; 0x40
 8002782:	4b07      	ldr	r3, [pc, #28]	; (80027a0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800278e:	bf00      	nop
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40001800 	.word	0x40001800
 80027a0:	40023800 	.word	0x40023800

080027a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08a      	sub	sp, #40	; 0x28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ac:	f107 0314 	add.w	r3, r7, #20
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a33      	ldr	r2, [pc, #204]	; (8002890 <HAL_TIM_MspPostInit+0xec>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d11c      	bne.n	8002800 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c6:	4b33      	ldr	r3, [pc, #204]	; (8002894 <HAL_TIM_MspPostInit+0xf0>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	4a32      	ldr	r2, [pc, #200]	; (8002894 <HAL_TIM_MspPostInit+0xf0>)
 80027cc:	f043 0302 	orr.w	r3, r3, #2
 80027d0:	6313      	str	r3, [r2, #48]	; 0x30
 80027d2:	4b30      	ldr	r3, [pc, #192]	; (8002894 <HAL_TIM_MspPostInit+0xf0>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80027de:	2310      	movs	r3, #16
 80027e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e2:	2302      	movs	r3, #2
 80027e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ea:	2300      	movs	r3, #0
 80027ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027ee:	2302      	movs	r3, #2
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80027f2:	f107 0314 	add.w	r3, r7, #20
 80027f6:	4619      	mov	r1, r3
 80027f8:	4827      	ldr	r0, [pc, #156]	; (8002898 <HAL_TIM_MspPostInit+0xf4>)
 80027fa:	f003 f819 	bl	8005830 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80027fe:	e042      	b.n	8002886 <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM5)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a25      	ldr	r2, [pc, #148]	; (800289c <HAL_TIM_MspPostInit+0xf8>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d11c      	bne.n	8002844 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800280a:	4b22      	ldr	r3, [pc, #136]	; (8002894 <HAL_TIM_MspPostInit+0xf0>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	4a21      	ldr	r2, [pc, #132]	; (8002894 <HAL_TIM_MspPostInit+0xf0>)
 8002810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002814:	6313      	str	r3, [r2, #48]	; 0x30
 8002816:	4b1f      	ldr	r3, [pc, #124]	; (8002894 <HAL_TIM_MspPostInit+0xf0>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002822:	2301      	movs	r3, #1
 8002824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002826:	2302      	movs	r3, #2
 8002828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	2300      	movs	r3, #0
 800282c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282e:	2300      	movs	r3, #0
 8002830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002832:	2302      	movs	r3, #2
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002836:	f107 0314 	add.w	r3, r7, #20
 800283a:	4619      	mov	r1, r3
 800283c:	4818      	ldr	r0, [pc, #96]	; (80028a0 <HAL_TIM_MspPostInit+0xfc>)
 800283e:	f002 fff7 	bl	8005830 <HAL_GPIO_Init>
}
 8002842:	e020      	b.n	8002886 <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM12)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a16      	ldr	r2, [pc, #88]	; (80028a4 <HAL_TIM_MspPostInit+0x100>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d11b      	bne.n	8002886 <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800284e:	4b11      	ldr	r3, [pc, #68]	; (8002894 <HAL_TIM_MspPostInit+0xf0>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	4a10      	ldr	r2, [pc, #64]	; (8002894 <HAL_TIM_MspPostInit+0xf0>)
 8002854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002858:	6313      	str	r3, [r2, #48]	; 0x30
 800285a:	4b0e      	ldr	r3, [pc, #56]	; (8002894 <HAL_TIM_MspPostInit+0xf0>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002862:	60bb      	str	r3, [r7, #8]
 8002864:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002866:	2340      	movs	r3, #64	; 0x40
 8002868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286a:	2302      	movs	r3, #2
 800286c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002872:	2300      	movs	r3, #0
 8002874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002876:	2309      	movs	r3, #9
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800287a:	f107 0314 	add.w	r3, r7, #20
 800287e:	4619      	mov	r1, r3
 8002880:	4809      	ldr	r0, [pc, #36]	; (80028a8 <HAL_TIM_MspPostInit+0x104>)
 8002882:	f002 ffd5 	bl	8005830 <HAL_GPIO_Init>
}
 8002886:	bf00      	nop
 8002888:	3728      	adds	r7, #40	; 0x28
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40000400 	.word	0x40000400
 8002894:	40023800 	.word	0x40023800
 8002898:	40020400 	.word	0x40020400
 800289c:	40000c00 	.word	0x40000c00
 80028a0:	40022000 	.word	0x40022000
 80028a4:	40001800 	.word	0x40001800
 80028a8:	40021c00 	.word	0x40021c00

080028ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08c      	sub	sp, #48	; 0x30
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b4:	f107 031c 	add.w	r3, r7, #28
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
 80028c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a3c      	ldr	r2, [pc, #240]	; (80029bc <HAL_UART_MspInit+0x110>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d145      	bne.n	800295a <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028ce:	4b3c      	ldr	r3, [pc, #240]	; (80029c0 <HAL_UART_MspInit+0x114>)
 80028d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d2:	4a3b      	ldr	r2, [pc, #236]	; (80029c0 <HAL_UART_MspInit+0x114>)
 80028d4:	f043 0310 	orr.w	r3, r3, #16
 80028d8:	6453      	str	r3, [r2, #68]	; 0x44
 80028da:	4b39      	ldr	r3, [pc, #228]	; (80029c0 <HAL_UART_MspInit+0x114>)
 80028dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028de:	f003 0310 	and.w	r3, r3, #16
 80028e2:	61bb      	str	r3, [r7, #24]
 80028e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e6:	4b36      	ldr	r3, [pc, #216]	; (80029c0 <HAL_UART_MspInit+0x114>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	4a35      	ldr	r2, [pc, #212]	; (80029c0 <HAL_UART_MspInit+0x114>)
 80028ec:	f043 0302 	orr.w	r3, r3, #2
 80028f0:	6313      	str	r3, [r2, #48]	; 0x30
 80028f2:	4b33      	ldr	r3, [pc, #204]	; (80029c0 <HAL_UART_MspInit+0x114>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fe:	4b30      	ldr	r3, [pc, #192]	; (80029c0 <HAL_UART_MspInit+0x114>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	4a2f      	ldr	r2, [pc, #188]	; (80029c0 <HAL_UART_MspInit+0x114>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	6313      	str	r3, [r2, #48]	; 0x30
 800290a:	4b2d      	ldr	r3, [pc, #180]	; (80029c0 <HAL_UART_MspInit+0x114>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	613b      	str	r3, [r7, #16]
 8002914:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002916:	2380      	movs	r3, #128	; 0x80
 8002918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291a:	2302      	movs	r3, #2
 800291c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291e:	2300      	movs	r3, #0
 8002920:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002922:	2300      	movs	r3, #0
 8002924:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002926:	2307      	movs	r3, #7
 8002928:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800292a:	f107 031c 	add.w	r3, r7, #28
 800292e:	4619      	mov	r1, r3
 8002930:	4824      	ldr	r0, [pc, #144]	; (80029c4 <HAL_UART_MspInit+0x118>)
 8002932:	f002 ff7d 	bl	8005830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002936:	f44f 7300 	mov.w	r3, #512	; 0x200
 800293a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293c:	2302      	movs	r3, #2
 800293e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002944:	2300      	movs	r3, #0
 8002946:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002948:	2307      	movs	r3, #7
 800294a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800294c:	f107 031c 	add.w	r3, r7, #28
 8002950:	4619      	mov	r1, r3
 8002952:	481d      	ldr	r0, [pc, #116]	; (80029c8 <HAL_UART_MspInit+0x11c>)
 8002954:	f002 ff6c 	bl	8005830 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002958:	e02c      	b.n	80029b4 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a1b      	ldr	r2, [pc, #108]	; (80029cc <HAL_UART_MspInit+0x120>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d127      	bne.n	80029b4 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002964:	4b16      	ldr	r3, [pc, #88]	; (80029c0 <HAL_UART_MspInit+0x114>)
 8002966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002968:	4a15      	ldr	r2, [pc, #84]	; (80029c0 <HAL_UART_MspInit+0x114>)
 800296a:	f043 0320 	orr.w	r3, r3, #32
 800296e:	6453      	str	r3, [r2, #68]	; 0x44
 8002970:	4b13      	ldr	r3, [pc, #76]	; (80029c0 <HAL_UART_MspInit+0x114>)
 8002972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002974:	f003 0320 	and.w	r3, r3, #32
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800297c:	4b10      	ldr	r3, [pc, #64]	; (80029c0 <HAL_UART_MspInit+0x114>)
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	4a0f      	ldr	r2, [pc, #60]	; (80029c0 <HAL_UART_MspInit+0x114>)
 8002982:	f043 0304 	orr.w	r3, r3, #4
 8002986:	6313      	str	r3, [r2, #48]	; 0x30
 8002988:	4b0d      	ldr	r3, [pc, #52]	; (80029c0 <HAL_UART_MspInit+0x114>)
 800298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	60bb      	str	r3, [r7, #8]
 8002992:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002994:	23c0      	movs	r3, #192	; 0xc0
 8002996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002998:	2302      	movs	r3, #2
 800299a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299c:	2300      	movs	r3, #0
 800299e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a0:	2303      	movs	r3, #3
 80029a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80029a4:	2308      	movs	r3, #8
 80029a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029a8:	f107 031c 	add.w	r3, r7, #28
 80029ac:	4619      	mov	r1, r3
 80029ae:	4808      	ldr	r0, [pc, #32]	; (80029d0 <HAL_UART_MspInit+0x124>)
 80029b0:	f002 ff3e 	bl	8005830 <HAL_GPIO_Init>
}
 80029b4:	bf00      	nop
 80029b6:	3730      	adds	r7, #48	; 0x30
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40011000 	.word	0x40011000
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40020400 	.word	0x40020400
 80029c8:	40020000 	.word	0x40020000
 80029cc:	40011400 	.word	0x40011400
 80029d0:	40020800 	.word	0x40020800

080029d4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80029da:	1d3b      	adds	r3, r7, #4
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80029e8:	4b3a      	ldr	r3, [pc, #232]	; (8002ad4 <HAL_FMC_MspInit+0x100>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d16d      	bne.n	8002acc <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80029f0:	4b38      	ldr	r3, [pc, #224]	; (8002ad4 <HAL_FMC_MspInit+0x100>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80029f6:	4b38      	ldr	r3, [pc, #224]	; (8002ad8 <HAL_FMC_MspInit+0x104>)
 80029f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fa:	4a37      	ldr	r2, [pc, #220]	; (8002ad8 <HAL_FMC_MspInit+0x104>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	6393      	str	r3, [r2, #56]	; 0x38
 8002a02:	4b35      	ldr	r3, [pc, #212]	; (8002ad8 <HAL_FMC_MspInit+0x104>)
 8002a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	603b      	str	r3, [r7, #0]
 8002a0c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002a0e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002a12:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a14:	2302      	movs	r3, #2
 8002a16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a20:	230c      	movs	r3, #12
 8002a22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a24:	1d3b      	adds	r3, r7, #4
 8002a26:	4619      	mov	r1, r3
 8002a28:	482c      	ldr	r0, [pc, #176]	; (8002adc <HAL_FMC_MspInit+0x108>)
 8002a2a:	f002 ff01 	bl	8005830 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002a2e:	f248 1333 	movw	r3, #33075	; 0x8133
 8002a32:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a34:	2302      	movs	r3, #2
 8002a36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a40:	230c      	movs	r3, #12
 8002a42:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a44:	1d3b      	adds	r3, r7, #4
 8002a46:	4619      	mov	r1, r3
 8002a48:	4825      	ldr	r0, [pc, #148]	; (8002ae0 <HAL_FMC_MspInit+0x10c>)
 8002a4a:	f002 fef1 	bl	8005830 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002a4e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002a52:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a54:	2302      	movs	r3, #2
 8002a56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a60:	230c      	movs	r3, #12
 8002a62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a64:	1d3b      	adds	r3, r7, #4
 8002a66:	4619      	mov	r1, r3
 8002a68:	481e      	ldr	r0, [pc, #120]	; (8002ae4 <HAL_FMC_MspInit+0x110>)
 8002a6a:	f002 fee1 	bl	8005830 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002a6e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002a72:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a74:	2302      	movs	r3, #2
 8002a76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a80:	230c      	movs	r3, #12
 8002a82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a84:	1d3b      	adds	r3, r7, #4
 8002a86:	4619      	mov	r1, r3
 8002a88:	4817      	ldr	r0, [pc, #92]	; (8002ae8 <HAL_FMC_MspInit+0x114>)
 8002a8a:	f002 fed1 	bl	8005830 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002a8e:	2328      	movs	r3, #40	; 0x28
 8002a90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a92:	2302      	movs	r3, #2
 8002a94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a9e:	230c      	movs	r3, #12
 8002aa0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002aa2:	1d3b      	adds	r3, r7, #4
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4811      	ldr	r0, [pc, #68]	; (8002aec <HAL_FMC_MspInit+0x118>)
 8002aa8:	f002 fec2 	bl	8005830 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002aac:	2308      	movs	r3, #8
 8002aae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002abc:	230c      	movs	r3, #12
 8002abe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002ac0:	1d3b      	adds	r3, r7, #4
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	480a      	ldr	r0, [pc, #40]	; (8002af0 <HAL_FMC_MspInit+0x11c>)
 8002ac6:	f002 feb3 	bl	8005830 <HAL_GPIO_Init>
 8002aca:	e000      	b.n	8002ace <HAL_FMC_MspInit+0xfa>
    return;
 8002acc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	2000053c 	.word	0x2000053c
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	40021800 	.word	0x40021800
 8002ae4:	40020c00 	.word	0x40020c00
 8002ae8:	40021400 	.word	0x40021400
 8002aec:	40021c00 	.word	0x40021c00
 8002af0:	40020800 	.word	0x40020800

08002af4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002afc:	f7ff ff6a 	bl	80029d4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002b00:	bf00      	nop
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b0c:	e7fe      	b.n	8002b0c <NMI_Handler+0x4>

08002b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b12:	e7fe      	b.n	8002b12 <HardFault_Handler+0x4>

08002b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b18:	e7fe      	b.n	8002b18 <MemManage_Handler+0x4>

08002b1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b1e:	e7fe      	b.n	8002b1e <BusFault_Handler+0x4>

08002b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b24:	e7fe      	b.n	8002b24 <UsageFault_Handler+0x4>

08002b26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b26:	b480      	push	{r7}
 8002b28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b38:	f001 fa12 	bl	8003f60 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002b3c:	f00d f9c8 	bl	800fed0 <xTaskGetSchedulerState>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d001      	beq.n	8002b4a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002b46:	f00d fda7 	bl	8010698 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}
	...

08002b50 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002b54:	4802      	ldr	r0, [pc, #8]	; (8002b60 <LTDC_IRQHandler+0x10>)
 8002b56:	f003 f919 	bl	8005d8c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000a8c 	.word	0x20000a8c

08002b64 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002b68:	4802      	ldr	r0, [pc, #8]	; (8002b74 <DMA2D_IRQHandler+0x10>)
 8002b6a:	f002 fc23 	bl	80053b4 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	200015f8 	.word	0x200015f8

08002b78 <SDMMC1_IRQHandler>:
  * @brief  This function handles SDMMC1 global interrupt request.
  * @param  None
  * @retval None
  */
void BSP_SDMMC_IRQHandler(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  HAL_SD_IRQHandler(&uSdHandle);
 8002b7c:	4802      	ldr	r0, [pc, #8]	; (8002b88 <SDMMC1_IRQHandler+0x10>)
 8002b7e:	f005 fbc5 	bl	800830c <HAL_SD_IRQHandler>
}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20004c0c 	.word	0x20004c0c

08002b8c <DMA2_Stream6_IRQHandler>:
* @brief  This function handles DMA2 Stream 6 interrupt request.
* @param  None
* @retval None
*/
void BSP_SDMMC_DMA_Tx_IRQHandler(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(uSdHandle.hdmatx);
 8002b90:	4b03      	ldr	r3, [pc, #12]	; (8002ba0 <DMA2_Stream6_IRQHandler+0x14>)
 8002b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b94:	4618      	mov	r0, r3
 8002b96:	f002 f839 	bl	8004c0c <HAL_DMA_IRQHandler>
}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20004c0c 	.word	0x20004c0c

08002ba4 <DMA2_Stream3_IRQHandler>:
* @brief  This function handles DMA2 Stream 3 interrupt request.
* @param  None
* @retval None
*/
void BSP_SDMMC_DMA_Rx_IRQHandler(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(uSdHandle.hdmarx);
 8002ba8:	4b03      	ldr	r3, [pc, #12]	; (8002bb8 <DMA2_Stream3_IRQHandler+0x14>)
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	4618      	mov	r0, r3
 8002bae:	f002 f82d 	bl	8004c0c <HAL_DMA_IRQHandler>
}
 8002bb2:	bf00      	nop
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20004c0c 	.word	0x20004c0c

08002bbc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]
 8002bcc:	e00a      	b.n	8002be4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002bce:	f3af 8000 	nop.w
 8002bd2:	4601      	mov	r1, r0
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	60ba      	str	r2, [r7, #8]
 8002bda:	b2ca      	uxtb	r2, r1
 8002bdc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	3301      	adds	r3, #1
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	dbf0      	blt.n	8002bce <_read+0x12>
	}

return len;
 8002bec:	687b      	ldr	r3, [r7, #4]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3718      	adds	r7, #24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
	return -1;
 8002bfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c1e:	605a      	str	r2, [r3, #4]
	return 0;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <_isatty>:

int _isatty(int file)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
	return 1;
 8002c36:	2301      	movs	r3, #1
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
	return 0;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
	...

08002c60 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c64:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <SystemInit+0x20>)
 8002c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6a:	4a05      	ldr	r2, [pc, #20]	; (8002c80 <SystemInit+0x20>)
 8002c6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cbc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c88:	480d      	ldr	r0, [pc, #52]	; (8002cc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c8a:	490e      	ldr	r1, [pc, #56]	; (8002cc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c8c:	4a0e      	ldr	r2, [pc, #56]	; (8002cc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c90:	e002      	b.n	8002c98 <LoopCopyDataInit>

08002c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c96:	3304      	adds	r3, #4

08002c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c9c:	d3f9      	bcc.n	8002c92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c9e:	4a0b      	ldr	r2, [pc, #44]	; (8002ccc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ca0:	4c0b      	ldr	r4, [pc, #44]	; (8002cd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ca4:	e001      	b.n	8002caa <LoopFillZerobss>

08002ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ca8:	3204      	adds	r2, #4

08002caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cac:	d3fb      	bcc.n	8002ca6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002cae:	f7ff ffd7 	bl	8002c60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cb2:	f00d fe31 	bl	8010918 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cb6:	f7fd fd6d 	bl	8000794 <main>
  bx  lr    
 8002cba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002cbc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002cc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cc4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002cc8:	08013f40 	.word	0x08013f40
  ldr r2, =_sbss
 8002ccc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002cd0:	20004d24 	.word	0x20004d24

08002cd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cd4:	e7fe      	b.n	8002cd4 <ADC_IRQHandler>
	...

08002cd8 <BSP_LED_Off>:
  *          This parameter can be one of the following values:
  *            @arg  LED1
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	71fb      	strb	r3, [r7, #7]
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1) /* Switch Off LED connected to GPIO */
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d108      	bne.n	8002cfa <BSP_LED_Off+0x22>
  {
    gpio_led = LED1_GPIO_PORT;
 8002ce8:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <BSP_LED_Off+0x2c>)
 8002cea:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
 8002cec:	2302      	movs	r3, #2
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f002 ff5f 	bl	8005bb8 <HAL_GPIO_WritePin>
  }
}
 8002cfa:	bf00      	nop
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40022000 	.word	0x40022000

08002d08 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002d0c:	4b31      	ldr	r3, [pc, #196]	; (8002dd4 <BSP_LCD_Init+0xcc>)
 8002d0e:	2228      	movs	r2, #40	; 0x28
 8002d10:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002d12:	4b30      	ldr	r3, [pc, #192]	; (8002dd4 <BSP_LCD_Init+0xcc>)
 8002d14:	2209      	movs	r2, #9
 8002d16:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002d18:	4b2e      	ldr	r3, [pc, #184]	; (8002dd4 <BSP_LCD_Init+0xcc>)
 8002d1a:	2235      	movs	r2, #53	; 0x35
 8002d1c:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002d1e:	4b2d      	ldr	r3, [pc, #180]	; (8002dd4 <BSP_LCD_Init+0xcc>)
 8002d20:	220b      	movs	r2, #11
 8002d22:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002d24:	4b2b      	ldr	r3, [pc, #172]	; (8002dd4 <BSP_LCD_Init+0xcc>)
 8002d26:	f240 121b 	movw	r2, #283	; 0x11b
 8002d2a:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002d2c:	4b29      	ldr	r3, [pc, #164]	; (8002dd4 <BSP_LCD_Init+0xcc>)
 8002d2e:	f240 2215 	movw	r2, #533	; 0x215
 8002d32:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002d34:	4b27      	ldr	r3, [pc, #156]	; (8002dd4 <BSP_LCD_Init+0xcc>)
 8002d36:	f240 121d 	movw	r2, #285	; 0x11d
 8002d3a:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002d3c:	4b25      	ldr	r3, [pc, #148]	; (8002dd4 <BSP_LCD_Init+0xcc>)
 8002d3e:	f240 2235 	movw	r2, #565	; 0x235
 8002d42:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002d44:	2100      	movs	r1, #0
 8002d46:	4823      	ldr	r0, [pc, #140]	; (8002dd4 <BSP_LCD_Init+0xcc>)
 8002d48:	f000 fc0c 	bl	8003564 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002d4c:	4b21      	ldr	r3, [pc, #132]	; (8002dd4 <BSP_LCD_Init+0xcc>)
 8002d4e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002d52:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002d54:	4b1f      	ldr	r3, [pc, #124]	; (8002dd4 <BSP_LCD_Init+0xcc>)
 8002d56:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002d5a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002d5c:	4b1d      	ldr	r3, [pc, #116]	; (8002dd4 <BSP_LCD_Init+0xcc>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002d64:	4b1b      	ldr	r3, [pc, #108]	; (8002dd4 <BSP_LCD_Init+0xcc>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002d6c:	4b19      	ldr	r3, [pc, #100]	; (8002dd4 <BSP_LCD_Init+0xcc>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002d74:	4b17      	ldr	r3, [pc, #92]	; (8002dd4 <BSP_LCD_Init+0xcc>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002d7a:	4b16      	ldr	r3, [pc, #88]	; (8002dd4 <BSP_LCD_Init+0xcc>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002d80:	4b14      	ldr	r3, [pc, #80]	; (8002dd4 <BSP_LCD_Init+0xcc>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002d86:	4b13      	ldr	r3, [pc, #76]	; (8002dd4 <BSP_LCD_Init+0xcc>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002d8c:	4b11      	ldr	r3, [pc, #68]	; (8002dd4 <BSP_LCD_Init+0xcc>)
 8002d8e:	4a12      	ldr	r2, [pc, #72]	; (8002dd8 <BSP_LCD_Init+0xd0>)
 8002d90:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002d92:	4810      	ldr	r0, [pc, #64]	; (8002dd4 <BSP_LCD_Init+0xcc>)
 8002d94:	f003 f930 	bl	8005ff8 <HAL_LTDC_GetState>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d103      	bne.n	8002da6 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002d9e:	2100      	movs	r1, #0
 8002da0:	480c      	ldr	r0, [pc, #48]	; (8002dd4 <BSP_LCD_Init+0xcc>)
 8002da2:	f000 fb05 	bl	80033b0 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8002da6:	480b      	ldr	r0, [pc, #44]	; (8002dd4 <BSP_LCD_Init+0xcc>)
 8002da8:	f002 ff20 	bl	8005bec <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002dac:	2201      	movs	r2, #1
 8002dae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002db2:	480a      	ldr	r0, [pc, #40]	; (8002ddc <BSP_LCD_Init+0xd4>)
 8002db4:	f002 ff00 	bl	8005bb8 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002db8:	2201      	movs	r2, #1
 8002dba:	2108      	movs	r1, #8
 8002dbc:	4808      	ldr	r0, [pc, #32]	; (8002de0 <BSP_LCD_Init+0xd8>)
 8002dbe:	f002 fefb 	bl	8005bb8 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002dc2:	f000 fed9 	bl	8003b78 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002dc6:	4807      	ldr	r0, [pc, #28]	; (8002de4 <BSP_LCD_Init+0xdc>)
 8002dc8:	f000 f928 	bl	800301c <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20004b64 	.word	0x20004b64
 8002dd8:	40016800 	.word	0x40016800
 8002ddc:	40022000 	.word	0x40022000
 8002de0:	40022800 	.word	0x40022800
 8002de4:	20000008 	.word	0x20000008

08002de8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002dec:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <BSP_LCD_GetXSize+0x20>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a06      	ldr	r2, [pc, #24]	; (8002e0c <BSP_LCD_GetXSize+0x24>)
 8002df2:	2134      	movs	r1, #52	; 0x34
 8002df4:	fb01 f303 	mul.w	r3, r1, r3
 8002df8:	4413      	add	r3, r2
 8002dfa:	3360      	adds	r3, #96	; 0x60
 8002dfc:	681b      	ldr	r3, [r3, #0]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	20000580 	.word	0x20000580
 8002e0c:	20004b64 	.word	0x20004b64

08002e10 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002e14:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <BSP_LCD_GetYSize+0x20>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a06      	ldr	r2, [pc, #24]	; (8002e34 <BSP_LCD_GetYSize+0x24>)
 8002e1a:	2134      	movs	r1, #52	; 0x34
 8002e1c:	fb01 f303 	mul.w	r3, r1, r3
 8002e20:	4413      	add	r3, r2
 8002e22:	3364      	adds	r3, #100	; 0x64
 8002e24:	681b      	ldr	r3, [r3, #0]
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	20000580 	.word	0x20000580
 8002e34:	20004b64 	.word	0x20004b64

08002e38 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b090      	sub	sp, #64	; 0x40
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	6039      	str	r1, [r7, #0]
 8002e42:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002e44:	2300      	movs	r3, #0
 8002e46:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002e48:	f7ff ffce 	bl	8002de8 <BSP_LCD_GetXSize>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002e54:	f7ff ffdc 	bl	8002e10 <BSP_LCD_GetYSize>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002e64:	23ff      	movs	r3, #255	; 0xff
 8002e66:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8002e72:	2300      	movs	r3, #0
 8002e74:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002e7e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002e82:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002e84:	2307      	movs	r3, #7
 8002e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002e88:	f7ff ffae 	bl	8002de8 <BSP_LCD_GetXSize>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002e90:	f7ff ffbe 	bl	8002e10 <BSP_LCD_GetYSize>
 8002e94:	4603      	mov	r3, r0
 8002e96:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002e98:	88fa      	ldrh	r2, [r7, #6]
 8002e9a:	f107 030c 	add.w	r3, r7, #12
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4812      	ldr	r0, [pc, #72]	; (8002eec <BSP_LCD_LayerDefaultInit+0xb4>)
 8002ea2:	f003 f835 	bl	8005f10 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002ea6:	88fa      	ldrh	r2, [r7, #6]
 8002ea8:	4911      	ldr	r1, [pc, #68]	; (8002ef0 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002eaa:	4613      	mov	r3, r2
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8002eba:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002ebc:	88fa      	ldrh	r2, [r7, #6]
 8002ebe:	490c      	ldr	r1, [pc, #48]	; (8002ef0 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	4413      	add	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	3308      	adds	r3, #8
 8002ecc:	4a09      	ldr	r2, [pc, #36]	; (8002ef4 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002ece:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002ed0:	88fa      	ldrh	r2, [r7, #6]
 8002ed2:	4907      	ldr	r1, [pc, #28]	; (8002ef0 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	4413      	add	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002ee2:	601a      	str	r2, [r3, #0]
}
 8002ee4:	bf00      	nop
 8002ee6:	3740      	adds	r7, #64	; 0x40
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20004b64 	.word	0x20004b64
 8002ef0:	20000584 	.word	0x20000584
 8002ef4:	20000008 	.word	0x20000008

08002ef8 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002f00:	4a04      	ldr	r2, [pc, #16]	; (8002f14 <BSP_LCD_SelectLayer+0x1c>)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6013      	str	r3, [r2, #0]
} 
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	20000580 	.word	0x20000580

08002f18 <BSP_LCD_SetLayerVisible>:
  *            @arg  ENABLE
  *            @arg  DISABLE 
  * @retval None
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState State)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	70fb      	strb	r3, [r7, #3]
  if(State == ENABLE)
 8002f24:	78fb      	ldrb	r3, [r7, #3]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d112      	bne.n	8002f50 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&hLtdcHandler, LayerIndex);
 8002f2a:	4b19      	ldr	r3, [pc, #100]	; (8002f90 <BSP_LCD_SetLayerVisible+0x78>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	01db      	lsls	r3, r3, #7
 8002f34:	4413      	add	r3, r2
 8002f36:	3384      	adds	r3, #132	; 0x84
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a15      	ldr	r2, [pc, #84]	; (8002f90 <BSP_LCD_SetLayerVisible+0x78>)
 8002f3c:	6812      	ldr	r2, [r2, #0]
 8002f3e:	4611      	mov	r1, r2
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	01d2      	lsls	r2, r2, #7
 8002f44:	440a      	add	r2, r1
 8002f46:	3284      	adds	r2, #132	; 0x84
 8002f48:	f043 0301 	orr.w	r3, r3, #1
 8002f4c:	6013      	str	r3, [r2, #0]
 8002f4e:	e011      	b.n	8002f74 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&hLtdcHandler, LayerIndex);
 8002f50:	4b0f      	ldr	r3, [pc, #60]	; (8002f90 <BSP_LCD_SetLayerVisible+0x78>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	461a      	mov	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	01db      	lsls	r3, r3, #7
 8002f5a:	4413      	add	r3, r2
 8002f5c:	3384      	adds	r3, #132	; 0x84
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a0b      	ldr	r2, [pc, #44]	; (8002f90 <BSP_LCD_SetLayerVisible+0x78>)
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	4611      	mov	r1, r2
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	01d2      	lsls	r2, r2, #7
 8002f6a:	440a      	add	r2, r1
 8002f6c:	3284      	adds	r2, #132	; 0x84
 8002f6e:	f023 0301 	bic.w	r3, r3, #1
 8002f72:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&hLtdcHandler);
 8002f74:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <BSP_LCD_SetLayerVisible+0x78>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f7a:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <BSP_LCD_SetLayerVisible+0x78>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0201 	orr.w	r2, r2, #1
 8002f82:	625a      	str	r2, [r3, #36]	; 0x24
} 
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	20004b64 	.word	0x20004b64

08002f94 <BSP_LCD_SetTransparency>:
  * @param  Transparency: Transparency
  *           This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFF 
  * @retval None
  */
void BSP_LCD_SetTransparency(uint32_t LayerIndex, uint8_t Transparency)
{    
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	70fb      	strb	r3, [r7, #3]
  HAL_LTDC_SetAlpha(&hLtdcHandler, Transparency, LayerIndex);
 8002fa0:	78fb      	ldrb	r3, [r7, #3]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4803      	ldr	r0, [pc, #12]	; (8002fb4 <BSP_LCD_SetTransparency+0x20>)
 8002fa8:	f002 fff0 	bl	8005f8c <HAL_LTDC_SetAlpha>
}
 8002fac:	bf00      	nop
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	20004b64 	.word	0x20004b64

08002fb8 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002fc0:	4b07      	ldr	r3, [pc, #28]	; (8002fe0 <BSP_LCD_SetTextColor+0x28>)
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	4907      	ldr	r1, [pc, #28]	; (8002fe4 <BSP_LCD_SetTextColor+0x2c>)
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	4413      	add	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	601a      	str	r2, [r3, #0]
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	20000580 	.word	0x20000580
 8002fe4:	20000584 	.word	0x20000584

08002fe8 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002ff0:	4b08      	ldr	r3, [pc, #32]	; (8003014 <BSP_LCD_SetBackColor+0x2c>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	4908      	ldr	r1, [pc, #32]	; (8003018 <BSP_LCD_SetBackColor+0x30>)
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	4413      	add	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	3304      	adds	r3, #4
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	601a      	str	r2, [r3, #0]
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	20000580 	.word	0x20000580
 8003018:	20000584 	.word	0x20000584

0800301c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8003024:	4b08      	ldr	r3, [pc, #32]	; (8003048 <BSP_LCD_SetFont+0x2c>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	4908      	ldr	r1, [pc, #32]	; (800304c <BSP_LCD_SetFont+0x30>)
 800302a:	4613      	mov	r3, r2
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	4413      	add	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	440b      	add	r3, r1
 8003034:	3308      	adds	r3, #8
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	601a      	str	r2, [r3, #0]
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	20000580 	.word	0x20000580
 800304c:	20000584 	.word	0x20000584

08003050 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8003054:	4b07      	ldr	r3, [pc, #28]	; (8003074 <BSP_LCD_GetFont+0x24>)
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	4907      	ldr	r1, [pc, #28]	; (8003078 <BSP_LCD_GetFont+0x28>)
 800305a:	4613      	mov	r3, r2
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	4413      	add	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	440b      	add	r3, r1
 8003064:	3308      	adds	r3, #8
 8003066:	681b      	ldr	r3, [r3, #0]
}
 8003068:	4618      	mov	r0, r3
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	20000580 	.word	0x20000580
 8003078:	20000584 	.word	0x20000584

0800307c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800307c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800307e:	b085      	sub	sp, #20
 8003080:	af02      	add	r7, sp, #8
 8003082:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003084:	4b0f      	ldr	r3, [pc, #60]	; (80030c4 <BSP_LCD_Clear+0x48>)
 8003086:	681c      	ldr	r4, [r3, #0]
 8003088:	4b0e      	ldr	r3, [pc, #56]	; (80030c4 <BSP_LCD_Clear+0x48>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a0e      	ldr	r2, [pc, #56]	; (80030c8 <BSP_LCD_Clear+0x4c>)
 800308e:	2134      	movs	r1, #52	; 0x34
 8003090:	fb01 f303 	mul.w	r3, r1, r3
 8003094:	4413      	add	r3, r2
 8003096:	335c      	adds	r3, #92	; 0x5c
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	461e      	mov	r6, r3
 800309c:	f7ff fea4 	bl	8002de8 <BSP_LCD_GetXSize>
 80030a0:	4605      	mov	r5, r0
 80030a2:	f7ff feb5 	bl	8002e10 <BSP_LCD_GetYSize>
 80030a6:	4602      	mov	r2, r0
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	9301      	str	r3, [sp, #4]
 80030ac:	2300      	movs	r3, #0
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	4613      	mov	r3, r2
 80030b2:	462a      	mov	r2, r5
 80030b4:	4631      	mov	r1, r6
 80030b6:	4620      	mov	r0, r4
 80030b8:	f000 fb28 	bl	800370c <LL_FillBuffer>
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030c4:	20000580 	.word	0x20000580
 80030c8:	20004b64 	.word	0x20004b64

080030cc <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80030cc:	b590      	push	{r4, r7, lr}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	80fb      	strh	r3, [r7, #6]
 80030d6:	460b      	mov	r3, r1
 80030d8:	80bb      	strh	r3, [r7, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80030de:	4b1b      	ldr	r3, [pc, #108]	; (800314c <BSP_LCD_DisplayChar+0x80>)
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	491b      	ldr	r1, [pc, #108]	; (8003150 <BSP_LCD_DisplayChar+0x84>)
 80030e4:	4613      	mov	r3, r2
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	4413      	add	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	3308      	adds	r3, #8
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6819      	ldr	r1, [r3, #0]
 80030f4:	78fb      	ldrb	r3, [r7, #3]
 80030f6:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80030fa:	4b14      	ldr	r3, [pc, #80]	; (800314c <BSP_LCD_DisplayChar+0x80>)
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	4c14      	ldr	r4, [pc, #80]	; (8003150 <BSP_LCD_DisplayChar+0x84>)
 8003100:	4613      	mov	r3, r2
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4423      	add	r3, r4
 800310a:	3308      	adds	r3, #8
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003110:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003114:	4b0d      	ldr	r3, [pc, #52]	; (800314c <BSP_LCD_DisplayChar+0x80>)
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	4c0d      	ldr	r4, [pc, #52]	; (8003150 <BSP_LCD_DisplayChar+0x84>)
 800311a:	4613      	mov	r3, r2
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4423      	add	r3, r4
 8003124:	3308      	adds	r3, #8
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	889b      	ldrh	r3, [r3, #4]
 800312a:	3307      	adds	r3, #7
 800312c:	2b00      	cmp	r3, #0
 800312e:	da00      	bge.n	8003132 <BSP_LCD_DisplayChar+0x66>
 8003130:	3307      	adds	r3, #7
 8003132:	10db      	asrs	r3, r3, #3
 8003134:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003138:	18ca      	adds	r2, r1, r3
 800313a:	88b9      	ldrh	r1, [r7, #4]
 800313c:	88fb      	ldrh	r3, [r7, #6]
 800313e:	4618      	mov	r0, r3
 8003140:	f000 fa2c 	bl	800359c <DrawChar>
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	bd90      	pop	{r4, r7, pc}
 800314c:	20000580 	.word	0x20000580
 8003150:	20000584 	.word	0x20000584

08003154 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8003154:	b5b0      	push	{r4, r5, r7, lr}
 8003156:	b088      	sub	sp, #32
 8003158:	af00      	add	r7, sp, #0
 800315a:	60ba      	str	r2, [r7, #8]
 800315c:	461a      	mov	r2, r3
 800315e:	4603      	mov	r3, r0
 8003160:	81fb      	strh	r3, [r7, #14]
 8003162:	460b      	mov	r3, r1
 8003164:	81bb      	strh	r3, [r7, #12]
 8003166:	4613      	mov	r3, r2
 8003168:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800316a:	2301      	movs	r3, #1
 800316c:	83fb      	strh	r3, [r7, #30]
 800316e:	2300      	movs	r3, #0
 8003170:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003172:	2300      	movs	r3, #0
 8003174:	61bb      	str	r3, [r7, #24]
 8003176:	2300      	movs	r3, #0
 8003178:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800317e:	e002      	b.n	8003186 <BSP_LCD_DisplayStringAt+0x32>
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	3301      	adds	r3, #1
 8003184:	61bb      	str	r3, [r7, #24]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	617a      	str	r2, [r7, #20]
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1f6      	bne.n	8003180 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003192:	f7ff fe29 	bl	8002de8 <BSP_LCD_GetXSize>
 8003196:	4601      	mov	r1, r0
 8003198:	4b50      	ldr	r3, [pc, #320]	; (80032dc <BSP_LCD_DisplayStringAt+0x188>)
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	4850      	ldr	r0, [pc, #320]	; (80032e0 <BSP_LCD_DisplayStringAt+0x18c>)
 800319e:	4613      	mov	r3, r2
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	4413      	add	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4403      	add	r3, r0
 80031a8:	3308      	adds	r3, #8
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	889b      	ldrh	r3, [r3, #4]
 80031ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80031b2:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	2b03      	cmp	r3, #3
 80031b8:	d01c      	beq.n	80031f4 <BSP_LCD_DisplayStringAt+0xa0>
 80031ba:	2b03      	cmp	r3, #3
 80031bc:	dc33      	bgt.n	8003226 <BSP_LCD_DisplayStringAt+0xd2>
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d002      	beq.n	80031c8 <BSP_LCD_DisplayStringAt+0x74>
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d019      	beq.n	80031fa <BSP_LCD_DisplayStringAt+0xa6>
 80031c6:	e02e      	b.n	8003226 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	1ad1      	subs	r1, r2, r3
 80031ce:	4b43      	ldr	r3, [pc, #268]	; (80032dc <BSP_LCD_DisplayStringAt+0x188>)
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	4843      	ldr	r0, [pc, #268]	; (80032e0 <BSP_LCD_DisplayStringAt+0x18c>)
 80031d4:	4613      	mov	r3, r2
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	4413      	add	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4403      	add	r3, r0
 80031de:	3308      	adds	r3, #8
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	889b      	ldrh	r3, [r3, #4]
 80031e4:	fb03 f301 	mul.w	r3, r3, r1
 80031e8:	085b      	lsrs	r3, r3, #1
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	89fb      	ldrh	r3, [r7, #14]
 80031ee:	4413      	add	r3, r2
 80031f0:	83fb      	strh	r3, [r7, #30]
      break;
 80031f2:	e01b      	b.n	800322c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80031f4:	89fb      	ldrh	r3, [r7, #14]
 80031f6:	83fb      	strh	r3, [r7, #30]
      break;
 80031f8:	e018      	b.n	800322c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	b299      	uxth	r1, r3
 8003202:	4b36      	ldr	r3, [pc, #216]	; (80032dc <BSP_LCD_DisplayStringAt+0x188>)
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	4836      	ldr	r0, [pc, #216]	; (80032e0 <BSP_LCD_DisplayStringAt+0x18c>)
 8003208:	4613      	mov	r3, r2
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	4413      	add	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4403      	add	r3, r0
 8003212:	3308      	adds	r3, #8
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	889b      	ldrh	r3, [r3, #4]
 8003218:	fb11 f303 	smulbb	r3, r1, r3
 800321c:	b29a      	uxth	r2, r3
 800321e:	89fb      	ldrh	r3, [r7, #14]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	83fb      	strh	r3, [r7, #30]
      break;
 8003224:	e002      	b.n	800322c <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8003226:	89fb      	ldrh	r3, [r7, #14]
 8003228:	83fb      	strh	r3, [r7, #30]
      break;
 800322a:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 800322c:	8bfb      	ldrh	r3, [r7, #30]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <BSP_LCD_DisplayStringAt+0xe6>
 8003232:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003236:	2b00      	cmp	r3, #0
 8003238:	da1d      	bge.n	8003276 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 800323a:	2301      	movs	r3, #1
 800323c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800323e:	e01a      	b.n	8003276 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	781a      	ldrb	r2, [r3, #0]
 8003244:	89b9      	ldrh	r1, [r7, #12]
 8003246:	8bfb      	ldrh	r3, [r7, #30]
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff ff3f 	bl	80030cc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800324e:	4b23      	ldr	r3, [pc, #140]	; (80032dc <BSP_LCD_DisplayStringAt+0x188>)
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	4923      	ldr	r1, [pc, #140]	; (80032e0 <BSP_LCD_DisplayStringAt+0x18c>)
 8003254:	4613      	mov	r3, r2
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	4413      	add	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	3308      	adds	r3, #8
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	889a      	ldrh	r2, [r3, #4]
 8003264:	8bfb      	ldrh	r3, [r7, #30]
 8003266:	4413      	add	r3, r2
 8003268:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	3301      	adds	r3, #1
 800326e:	60bb      	str	r3, [r7, #8]
    i++;
 8003270:	8bbb      	ldrh	r3, [r7, #28]
 8003272:	3301      	adds	r3, #1
 8003274:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	bf14      	ite	ne
 800327e:	2301      	movne	r3, #1
 8003280:	2300      	moveq	r3, #0
 8003282:	b2dc      	uxtb	r4, r3
 8003284:	f7ff fdb0 	bl	8002de8 <BSP_LCD_GetXSize>
 8003288:	8bb9      	ldrh	r1, [r7, #28]
 800328a:	4b14      	ldr	r3, [pc, #80]	; (80032dc <BSP_LCD_DisplayStringAt+0x188>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	4d14      	ldr	r5, [pc, #80]	; (80032e0 <BSP_LCD_DisplayStringAt+0x18c>)
 8003290:	4613      	mov	r3, r2
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	4413      	add	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	442b      	add	r3, r5
 800329a:	3308      	adds	r3, #8
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	889b      	ldrh	r3, [r3, #4]
 80032a0:	fb03 f301 	mul.w	r3, r3, r1
 80032a4:	1ac3      	subs	r3, r0, r3
 80032a6:	b299      	uxth	r1, r3
 80032a8:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <BSP_LCD_DisplayStringAt+0x188>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	480c      	ldr	r0, [pc, #48]	; (80032e0 <BSP_LCD_DisplayStringAt+0x18c>)
 80032ae:	4613      	mov	r3, r2
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	4413      	add	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4403      	add	r3, r0
 80032b8:	3308      	adds	r3, #8
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	889b      	ldrh	r3, [r3, #4]
 80032be:	4299      	cmp	r1, r3
 80032c0:	bf2c      	ite	cs
 80032c2:	2301      	movcs	r3, #1
 80032c4:	2300      	movcc	r3, #0
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	4023      	ands	r3, r4
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1b7      	bne.n	8003240 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 80032d0:	bf00      	nop
 80032d2:	bf00      	nop
 80032d4:	3720      	adds	r7, #32
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bdb0      	pop	{r4, r5, r7, pc}
 80032da:	bf00      	nop
 80032dc:	20000580 	.word	0x20000580
 80032e0:	20000584 	.word	0x20000584

080032e4 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80032e4:	b5b0      	push	{r4, r5, r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	603a      	str	r2, [r7, #0]
 80032ee:	80fb      	strh	r3, [r7, #6]
 80032f0:	460b      	mov	r3, r1
 80032f2:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80032f4:	4b1d      	ldr	r3, [pc, #116]	; (800336c <BSP_LCD_DrawPixel+0x88>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a1d      	ldr	r2, [pc, #116]	; (8003370 <BSP_LCD_DrawPixel+0x8c>)
 80032fa:	2134      	movs	r1, #52	; 0x34
 80032fc:	fb01 f303 	mul.w	r3, r1, r3
 8003300:	4413      	add	r3, r2
 8003302:	3348      	adds	r3, #72	; 0x48
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2b02      	cmp	r3, #2
 8003308:	d116      	bne.n	8003338 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800330a:	4b18      	ldr	r3, [pc, #96]	; (800336c <BSP_LCD_DrawPixel+0x88>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a18      	ldr	r2, [pc, #96]	; (8003370 <BSP_LCD_DrawPixel+0x8c>)
 8003310:	2134      	movs	r1, #52	; 0x34
 8003312:	fb01 f303 	mul.w	r3, r1, r3
 8003316:	4413      	add	r3, r2
 8003318:	335c      	adds	r3, #92	; 0x5c
 800331a:	681c      	ldr	r4, [r3, #0]
 800331c:	88bd      	ldrh	r5, [r7, #4]
 800331e:	f7ff fd63 	bl	8002de8 <BSP_LCD_GetXSize>
 8003322:	4603      	mov	r3, r0
 8003324:	fb03 f205 	mul.w	r2, r3, r5
 8003328:	88fb      	ldrh	r3, [r7, #6]
 800332a:	4413      	add	r3, r2
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	4423      	add	r3, r4
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	b292      	uxth	r2, r2
 8003334:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8003336:	e015      	b.n	8003364 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003338:	4b0c      	ldr	r3, [pc, #48]	; (800336c <BSP_LCD_DrawPixel+0x88>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a0c      	ldr	r2, [pc, #48]	; (8003370 <BSP_LCD_DrawPixel+0x8c>)
 800333e:	2134      	movs	r1, #52	; 0x34
 8003340:	fb01 f303 	mul.w	r3, r1, r3
 8003344:	4413      	add	r3, r2
 8003346:	335c      	adds	r3, #92	; 0x5c
 8003348:	681c      	ldr	r4, [r3, #0]
 800334a:	88bd      	ldrh	r5, [r7, #4]
 800334c:	f7ff fd4c 	bl	8002de8 <BSP_LCD_GetXSize>
 8003350:	4603      	mov	r3, r0
 8003352:	fb03 f205 	mul.w	r2, r3, r5
 8003356:	88fb      	ldrh	r3, [r7, #6]
 8003358:	4413      	add	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4423      	add	r3, r4
 800335e:	461a      	mov	r2, r3
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	6013      	str	r3, [r2, #0]
}
 8003364:	bf00      	nop
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bdb0      	pop	{r4, r5, r7, pc}
 800336c:	20000580 	.word	0x20000580
 8003370:	20004b64 	.word	0x20004b64

08003374 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8003378:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <BSP_LCD_DisplayOn+0x30>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	699a      	ldr	r2, [r3, #24]
 800337e:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <BSP_LCD_DisplayOn+0x30>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0201 	orr.w	r2, r2, #1
 8003386:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003388:	2201      	movs	r2, #1
 800338a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800338e:	4806      	ldr	r0, [pc, #24]	; (80033a8 <BSP_LCD_DisplayOn+0x34>)
 8003390:	f002 fc12 	bl	8005bb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003394:	2201      	movs	r2, #1
 8003396:	2108      	movs	r1, #8
 8003398:	4804      	ldr	r0, [pc, #16]	; (80033ac <BSP_LCD_DisplayOn+0x38>)
 800339a:	f002 fc0d 	bl	8005bb8 <HAL_GPIO_WritePin>
}
 800339e:	bf00      	nop
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	20004b64 	.word	0x20004b64
 80033a8:	40022000 	.word	0x40022000
 80033ac:	40022800 	.word	0x40022800

080033b0 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b090      	sub	sp, #64	; 0x40
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80033ba:	4b64      	ldr	r3, [pc, #400]	; (800354c <BSP_LCD_MspInit+0x19c>)
 80033bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033be:	4a63      	ldr	r2, [pc, #396]	; (800354c <BSP_LCD_MspInit+0x19c>)
 80033c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033c4:	6453      	str	r3, [r2, #68]	; 0x44
 80033c6:	4b61      	ldr	r3, [pc, #388]	; (800354c <BSP_LCD_MspInit+0x19c>)
 80033c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80033d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80033d2:	4b5e      	ldr	r3, [pc, #376]	; (800354c <BSP_LCD_MspInit+0x19c>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	4a5d      	ldr	r2, [pc, #372]	; (800354c <BSP_LCD_MspInit+0x19c>)
 80033d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033dc:	6313      	str	r3, [r2, #48]	; 0x30
 80033de:	4b5b      	ldr	r3, [pc, #364]	; (800354c <BSP_LCD_MspInit+0x19c>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033e6:	627b      	str	r3, [r7, #36]	; 0x24
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80033ea:	4b58      	ldr	r3, [pc, #352]	; (800354c <BSP_LCD_MspInit+0x19c>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	4a57      	ldr	r2, [pc, #348]	; (800354c <BSP_LCD_MspInit+0x19c>)
 80033f0:	f043 0310 	orr.w	r3, r3, #16
 80033f4:	6313      	str	r3, [r2, #48]	; 0x30
 80033f6:	4b55      	ldr	r3, [pc, #340]	; (800354c <BSP_LCD_MspInit+0x19c>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	f003 0310 	and.w	r3, r3, #16
 80033fe:	623b      	str	r3, [r7, #32]
 8003400:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003402:	4b52      	ldr	r3, [pc, #328]	; (800354c <BSP_LCD_MspInit+0x19c>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	4a51      	ldr	r2, [pc, #324]	; (800354c <BSP_LCD_MspInit+0x19c>)
 8003408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800340c:	6313      	str	r3, [r2, #48]	; 0x30
 800340e:	4b4f      	ldr	r3, [pc, #316]	; (800354c <BSP_LCD_MspInit+0x19c>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003416:	61fb      	str	r3, [r7, #28]
 8003418:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800341a:	4b4c      	ldr	r3, [pc, #304]	; (800354c <BSP_LCD_MspInit+0x19c>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	4a4b      	ldr	r2, [pc, #300]	; (800354c <BSP_LCD_MspInit+0x19c>)
 8003420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003424:	6313      	str	r3, [r2, #48]	; 0x30
 8003426:	4b49      	ldr	r3, [pc, #292]	; (800354c <BSP_LCD_MspInit+0x19c>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342e:	61bb      	str	r3, [r7, #24]
 8003430:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003432:	4b46      	ldr	r3, [pc, #280]	; (800354c <BSP_LCD_MspInit+0x19c>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	4a45      	ldr	r2, [pc, #276]	; (800354c <BSP_LCD_MspInit+0x19c>)
 8003438:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800343c:	6313      	str	r3, [r2, #48]	; 0x30
 800343e:	4b43      	ldr	r3, [pc, #268]	; (800354c <BSP_LCD_MspInit+0x19c>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800344a:	4b40      	ldr	r3, [pc, #256]	; (800354c <BSP_LCD_MspInit+0x19c>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	4a3f      	ldr	r2, [pc, #252]	; (800354c <BSP_LCD_MspInit+0x19c>)
 8003450:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003454:	6313      	str	r3, [r2, #48]	; 0x30
 8003456:	4b3d      	ldr	r3, [pc, #244]	; (800354c <BSP_LCD_MspInit+0x19c>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8003462:	4b3a      	ldr	r3, [pc, #232]	; (800354c <BSP_LCD_MspInit+0x19c>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	4a39      	ldr	r2, [pc, #228]	; (800354c <BSP_LCD_MspInit+0x19c>)
 8003468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800346c:	6313      	str	r3, [r2, #48]	; 0x30
 800346e:	4b37      	ldr	r3, [pc, #220]	; (800354c <BSP_LCD_MspInit+0x19c>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800347a:	4b34      	ldr	r3, [pc, #208]	; (800354c <BSP_LCD_MspInit+0x19c>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	4a33      	ldr	r2, [pc, #204]	; (800354c <BSP_LCD_MspInit+0x19c>)
 8003480:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003484:	6313      	str	r3, [r2, #48]	; 0x30
 8003486:	4b31      	ldr	r3, [pc, #196]	; (800354c <BSP_LCD_MspInit+0x19c>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348e:	60bb      	str	r3, [r7, #8]
 8003490:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8003492:	2310      	movs	r3, #16
 8003494:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003496:	2302      	movs	r3, #2
 8003498:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800349a:	2300      	movs	r3, #0
 800349c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800349e:	2302      	movs	r3, #2
 80034a0:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80034a2:	230e      	movs	r3, #14
 80034a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80034a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034aa:	4619      	mov	r1, r3
 80034ac:	4828      	ldr	r0, [pc, #160]	; (8003550 <BSP_LCD_MspInit+0x1a0>)
 80034ae:	f002 f9bf 	bl	8005830 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80034b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80034b8:	2302      	movs	r3, #2
 80034ba:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80034bc:	2309      	movs	r3, #9
 80034be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80034c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034c4:	4619      	mov	r1, r3
 80034c6:	4823      	ldr	r0, [pc, #140]	; (8003554 <BSP_LCD_MspInit+0x1a4>)
 80034c8:	f002 f9b2 	bl	8005830 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80034cc:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 80034d0:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80034d2:	2302      	movs	r3, #2
 80034d4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80034d6:	230e      	movs	r3, #14
 80034d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80034da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034de:	4619      	mov	r1, r3
 80034e0:	481d      	ldr	r0, [pc, #116]	; (8003558 <BSP_LCD_MspInit+0x1a8>)
 80034e2:	f002 f9a5 	bl	8005830 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80034e6:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80034ea:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80034ec:	2302      	movs	r3, #2
 80034ee:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80034f0:	230e      	movs	r3, #14
 80034f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80034f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034f8:	4619      	mov	r1, r3
 80034fa:	4818      	ldr	r0, [pc, #96]	; (800355c <BSP_LCD_MspInit+0x1ac>)
 80034fc:	f002 f998 	bl	8005830 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8003500:	23f7      	movs	r3, #247	; 0xf7
 8003502:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003504:	2302      	movs	r3, #2
 8003506:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003508:	230e      	movs	r3, #14
 800350a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800350c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003510:	4619      	mov	r1, r3
 8003512:	4813      	ldr	r0, [pc, #76]	; (8003560 <BSP_LCD_MspInit+0x1b0>)
 8003514:	f002 f98c 	bl	8005830 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800351c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800351e:	2301      	movs	r3, #1
 8003520:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8003522:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003526:	4619      	mov	r1, r3
 8003528:	480b      	ldr	r0, [pc, #44]	; (8003558 <BSP_LCD_MspInit+0x1a8>)
 800352a:	f002 f981 	bl	8005830 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800352e:	2308      	movs	r3, #8
 8003530:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003532:	2301      	movs	r3, #1
 8003534:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003536:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800353a:	4619      	mov	r1, r3
 800353c:	4808      	ldr	r0, [pc, #32]	; (8003560 <BSP_LCD_MspInit+0x1b0>)
 800353e:	f002 f977 	bl	8005830 <HAL_GPIO_Init>
}
 8003542:	bf00      	nop
 8003544:	3740      	adds	r7, #64	; 0x40
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40023800 	.word	0x40023800
 8003550:	40021000 	.word	0x40021000
 8003554:	40021800 	.word	0x40021800
 8003558:	40022000 	.word	0x40022000
 800355c:	40022400 	.word	0x40022400
 8003560:	40022800 	.word	0x40022800

08003564 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800356e:	4b0a      	ldr	r3, [pc, #40]	; (8003598 <BSP_LCD_ClockConfig+0x34>)
 8003570:	2208      	movs	r2, #8
 8003572:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003574:	4b08      	ldr	r3, [pc, #32]	; (8003598 <BSP_LCD_ClockConfig+0x34>)
 8003576:	22c0      	movs	r2, #192	; 0xc0
 8003578:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800357a:	4b07      	ldr	r3, [pc, #28]	; (8003598 <BSP_LCD_ClockConfig+0x34>)
 800357c:	2205      	movs	r2, #5
 800357e:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003580:	4b05      	ldr	r3, [pc, #20]	; (8003598 <BSP_LCD_ClockConfig+0x34>)
 8003582:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003586:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003588:	4803      	ldr	r0, [pc, #12]	; (8003598 <BSP_LCD_ClockConfig+0x34>)
 800358a:	f003 fc79 	bl	8006e80 <HAL_RCCEx_PeriphCLKConfig>
}
 800358e:	bf00      	nop
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	2000059c 	.word	0x2000059c

0800359c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b088      	sub	sp, #32
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	4603      	mov	r3, r0
 80035a4:	603a      	str	r2, [r7, #0]
 80035a6:	80fb      	strh	r3, [r7, #6]
 80035a8:	460b      	mov	r3, r1
 80035aa:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	61fb      	str	r3, [r7, #28]
 80035b0:	2300      	movs	r3, #0
 80035b2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80035b4:	4b53      	ldr	r3, [pc, #332]	; (8003704 <DrawChar+0x168>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	4953      	ldr	r1, [pc, #332]	; (8003708 <DrawChar+0x16c>)
 80035ba:	4613      	mov	r3, r2
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	4413      	add	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	3308      	adds	r3, #8
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	88db      	ldrh	r3, [r3, #6]
 80035ca:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80035cc:	4b4d      	ldr	r3, [pc, #308]	; (8003704 <DrawChar+0x168>)
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	494d      	ldr	r1, [pc, #308]	; (8003708 <DrawChar+0x16c>)
 80035d2:	4613      	mov	r3, r2
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	4413      	add	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	3308      	adds	r3, #8
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	889b      	ldrh	r3, [r3, #4]
 80035e2:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80035e4:	8a3b      	ldrh	r3, [r7, #16]
 80035e6:	3307      	adds	r3, #7
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	da00      	bge.n	80035ee <DrawChar+0x52>
 80035ec:	3307      	adds	r3, #7
 80035ee:	10db      	asrs	r3, r3, #3
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	8a3b      	ldrh	r3, [r7, #16]
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80035fe:	2300      	movs	r3, #0
 8003600:	61fb      	str	r3, [r7, #28]
 8003602:	e076      	b.n	80036f2 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003604:	8a3b      	ldrh	r3, [r7, #16]
 8003606:	3307      	adds	r3, #7
 8003608:	2b00      	cmp	r3, #0
 800360a:	da00      	bge.n	800360e <DrawChar+0x72>
 800360c:	3307      	adds	r3, #7
 800360e:	10db      	asrs	r3, r3, #3
 8003610:	461a      	mov	r2, r3
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	fb03 f302 	mul.w	r3, r3, r2
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	4413      	add	r3, r2
 800361c:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800361e:	8a3b      	ldrh	r3, [r7, #16]
 8003620:	3307      	adds	r3, #7
 8003622:	2b00      	cmp	r3, #0
 8003624:	da00      	bge.n	8003628 <DrawChar+0x8c>
 8003626:	3307      	adds	r3, #7
 8003628:	10db      	asrs	r3, r3, #3
 800362a:	2b01      	cmp	r3, #1
 800362c:	d002      	beq.n	8003634 <DrawChar+0x98>
 800362e:	2b02      	cmp	r3, #2
 8003630:	d004      	beq.n	800363c <DrawChar+0xa0>
 8003632:	e00c      	b.n	800364e <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	617b      	str	r3, [r7, #20]
      break;
 800363a:	e016      	b.n	800366a <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	021b      	lsls	r3, r3, #8
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	3201      	adds	r2, #1
 8003646:	7812      	ldrb	r2, [r2, #0]
 8003648:	4313      	orrs	r3, r2
 800364a:	617b      	str	r3, [r7, #20]
      break;
 800364c:	e00d      	b.n	800366a <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	041a      	lsls	r2, r3, #16
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	3301      	adds	r3, #1
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	021b      	lsls	r3, r3, #8
 800365c:	4313      	orrs	r3, r2
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	3202      	adds	r2, #2
 8003662:	7812      	ldrb	r2, [r2, #0]
 8003664:	4313      	orrs	r3, r2
 8003666:	617b      	str	r3, [r7, #20]
      break;
 8003668:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800366a:	2300      	movs	r3, #0
 800366c:	61bb      	str	r3, [r7, #24]
 800366e:	e036      	b.n	80036de <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003670:	8a3a      	ldrh	r2, [r7, #16]
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	1ad2      	subs	r2, r2, r3
 8003676:	7bfb      	ldrb	r3, [r7, #15]
 8003678:	4413      	add	r3, r2
 800367a:	3b01      	subs	r3, #1
 800367c:	2201      	movs	r2, #1
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	461a      	mov	r2, r3
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	4013      	ands	r3, r2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d012      	beq.n	80036b2 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	b29a      	uxth	r2, r3
 8003690:	88fb      	ldrh	r3, [r7, #6]
 8003692:	4413      	add	r3, r2
 8003694:	b298      	uxth	r0, r3
 8003696:	4b1b      	ldr	r3, [pc, #108]	; (8003704 <DrawChar+0x168>)
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	491b      	ldr	r1, [pc, #108]	; (8003708 <DrawChar+0x16c>)
 800369c:	4613      	mov	r3, r2
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	4413      	add	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	440b      	add	r3, r1
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	88bb      	ldrh	r3, [r7, #4]
 80036aa:	4619      	mov	r1, r3
 80036ac:	f7ff fe1a 	bl	80032e4 <BSP_LCD_DrawPixel>
 80036b0:	e012      	b.n	80036d8 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	88fb      	ldrh	r3, [r7, #6]
 80036b8:	4413      	add	r3, r2
 80036ba:	b298      	uxth	r0, r3
 80036bc:	4b11      	ldr	r3, [pc, #68]	; (8003704 <DrawChar+0x168>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	4911      	ldr	r1, [pc, #68]	; (8003708 <DrawChar+0x16c>)
 80036c2:	4613      	mov	r3, r2
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	4413      	add	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	440b      	add	r3, r1
 80036cc:	3304      	adds	r3, #4
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	88bb      	ldrh	r3, [r7, #4]
 80036d2:	4619      	mov	r1, r3
 80036d4:	f7ff fe06 	bl	80032e4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	3301      	adds	r3, #1
 80036dc:	61bb      	str	r3, [r7, #24]
 80036de:	8a3b      	ldrh	r3, [r7, #16]
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d3c4      	bcc.n	8003670 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80036e6:	88bb      	ldrh	r3, [r7, #4]
 80036e8:	3301      	adds	r3, #1
 80036ea:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	3301      	adds	r3, #1
 80036f0:	61fb      	str	r3, [r7, #28]
 80036f2:	8a7b      	ldrh	r3, [r7, #18]
 80036f4:	69fa      	ldr	r2, [r7, #28]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d384      	bcc.n	8003604 <DrawChar+0x68>
  }
}
 80036fa:	bf00      	nop
 80036fc:	bf00      	nop
 80036fe:	3720      	adds	r7, #32
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	20000580 	.word	0x20000580
 8003708:	20000584 	.word	0x20000584

0800370c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af02      	add	r7, sp, #8
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800371a:	4b1e      	ldr	r3, [pc, #120]	; (8003794 <LL_FillBuffer+0x88>)
 800371c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003720:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003722:	4b1d      	ldr	r3, [pc, #116]	; (8003798 <LL_FillBuffer+0x8c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a1d      	ldr	r2, [pc, #116]	; (800379c <LL_FillBuffer+0x90>)
 8003728:	2134      	movs	r1, #52	; 0x34
 800372a:	fb01 f303 	mul.w	r3, r1, r3
 800372e:	4413      	add	r3, r2
 8003730:	3348      	adds	r3, #72	; 0x48
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b02      	cmp	r3, #2
 8003736:	d103      	bne.n	8003740 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003738:	4b16      	ldr	r3, [pc, #88]	; (8003794 <LL_FillBuffer+0x88>)
 800373a:	2202      	movs	r2, #2
 800373c:	609a      	str	r2, [r3, #8]
 800373e:	e002      	b.n	8003746 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003740:	4b14      	ldr	r3, [pc, #80]	; (8003794 <LL_FillBuffer+0x88>)
 8003742:	2200      	movs	r2, #0
 8003744:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8003746:	4a13      	ldr	r2, [pc, #76]	; (8003794 <LL_FillBuffer+0x88>)
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 800374c:	4b11      	ldr	r3, [pc, #68]	; (8003794 <LL_FillBuffer+0x88>)
 800374e:	4a14      	ldr	r2, [pc, #80]	; (80037a0 <LL_FillBuffer+0x94>)
 8003750:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003752:	4810      	ldr	r0, [pc, #64]	; (8003794 <LL_FillBuffer+0x88>)
 8003754:	f001 fcd0 	bl	80050f8 <HAL_DMA2D_Init>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d115      	bne.n	800378a <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800375e:	68f9      	ldr	r1, [r7, #12]
 8003760:	480c      	ldr	r0, [pc, #48]	; (8003794 <LL_FillBuffer+0x88>)
 8003762:	f001 ff37 	bl	80055d4 <HAL_DMA2D_ConfigLayer>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10e      	bne.n	800378a <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69f9      	ldr	r1, [r7, #28]
 8003776:	4807      	ldr	r0, [pc, #28]	; (8003794 <LL_FillBuffer+0x88>)
 8003778:	f001 fd08 	bl	800518c <HAL_DMA2D_Start>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d103      	bne.n	800378a <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003782:	210a      	movs	r1, #10
 8003784:	4803      	ldr	r0, [pc, #12]	; (8003794 <LL_FillBuffer+0x88>)
 8003786:	f001 fd2c 	bl	80051e2 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800378a:	bf00      	nop
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	20000540 	.word	0x20000540
 8003798:	20000580 	.word	0x20000580
 800379c:	20004b64 	.word	0x20004b64
 80037a0:	4002b000 	.word	0x4002b000

080037a4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{ 
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	71fb      	strb	r3, [r7, #7]
  
  /* uSD device interface configuration */
  uSdHandle.Instance = SDMMC1;
 80037ae:	4b20      	ldr	r3, [pc, #128]	; (8003830 <BSP_SD_Init+0x8c>)
 80037b0:	4a20      	ldr	r2, [pc, #128]	; (8003834 <BSP_SD_Init+0x90>)
 80037b2:	601a      	str	r2, [r3, #0]

  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80037b4:	4b1e      	ldr	r3, [pc, #120]	; (8003830 <BSP_SD_Init+0x8c>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	605a      	str	r2, [r3, #4]
  uSdHandle.Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80037ba:	4b1d      	ldr	r3, [pc, #116]	; (8003830 <BSP_SD_Init+0x8c>)
 80037bc:	2200      	movs	r2, #0
 80037be:	609a      	str	r2, [r3, #8]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80037c0:	4b1b      	ldr	r3, [pc, #108]	; (8003830 <BSP_SD_Init+0x8c>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	60da      	str	r2, [r3, #12]
  uSdHandle.Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80037c6:	4b1a      	ldr	r3, [pc, #104]	; (8003830 <BSP_SD_Init+0x8c>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	611a      	str	r2, [r3, #16]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80037cc:	4b18      	ldr	r3, [pc, #96]	; (8003830 <BSP_SD_Init+0x8c>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	615a      	str	r2, [r3, #20]
  uSdHandle.Init.ClockDiv            = SDMMC_TRANSFER_CLK_DIV;
 80037d2:	4b17      	ldr	r3, [pc, #92]	; (8003830 <BSP_SD_Init+0x8c>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	619a      	str	r2, [r3, #24]
  
  /* Msp SD Detect pin initialization */
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 80037d8:	2100      	movs	r1, #0
 80037da:	4815      	ldr	r0, [pc, #84]	; (8003830 <BSP_SD_Init+0x8c>)
 80037dc:	f000 f960 	bl	8003aa0 <BSP_SD_Detect_MspInit>
  if(BSP_SD_IsDetected() != SD_PRESENT)   /* Check if SD card is present */
 80037e0:	f000 f82a 	bl	8003838 <BSP_SD_IsDetected>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d001      	beq.n	80037ee <BSP_SD_Init+0x4a>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80037ea:	2302      	movs	r3, #2
 80037ec:	e01c      	b.n	8003828 <BSP_SD_Init+0x84>
  }
  
  /* Msp SD initialization */
  BSP_SD_MspInit(&uSdHandle, NULL);
 80037ee:	2100      	movs	r1, #0
 80037f0:	480f      	ldr	r0, [pc, #60]	; (8003830 <BSP_SD_Init+0x8c>)
 80037f2:	f000 f869 	bl	80038c8 <BSP_SD_MspInit>

  /* HAL SD initialization */
  if(HAL_SD_Init(&uSdHandle) != HAL_OK)
 80037f6:	480e      	ldr	r0, [pc, #56]	; (8003830 <BSP_SD_Init+0x8c>)
 80037f8:	f004 fb0a 	bl	8007e10 <HAL_SD_Init>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <BSP_SD_Init+0x62>
  {
    sd_state = MSD_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	71fb      	strb	r3, [r7, #7]
  }
  
  /* Configure SD Bus width */
  if(sd_state == MSD_OK)
 8003806:	79fb      	ldrb	r3, [r7, #7]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10c      	bne.n	8003826 <BSP_SD_Init+0x82>
  {
    /* Enable wide operation */ 
    if(HAL_SD_ConfigWideBusOperation(&uSdHandle, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800380c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003810:	4807      	ldr	r0, [pc, #28]	; (8003830 <BSP_SD_Init+0x8c>)
 8003812:	f005 f8cb 	bl	80089ac <HAL_SD_ConfigWideBusOperation>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d002      	beq.n	8003822 <BSP_SD_Init+0x7e>
    {
      sd_state = MSD_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	71fb      	strb	r3, [r7, #7]
 8003820:	e001      	b.n	8003826 <BSP_SD_Init+0x82>
    }
    else
    {
      sd_state = MSD_OK;
 8003822:	2300      	movs	r3, #0
 8003824:	71fb      	strb	r3, [r7, #7]
    }
  }
  
  return  sd_state;
 8003826:	79fb      	ldrb	r3, [r7, #7]
}
 8003828:	4618      	mov	r0, r3
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	20004c0c 	.word	0x20004c0c
 8003834:	40012c00 	.word	0x40012c00

08003838 <BSP_SD_IsDetected>:
/**
  * @brief  Detects if SD card is correctly plugged in the memory slot or not.
  * @retval Returns if SD is detected or not
  */
uint8_t BSP_SD_IsDetected(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
  __IO uint8_t      status = SD_PRESENT;
 800383e:	2301      	movs	r3, #1
 8003840:	71fb      	strb	r3, [r7, #7]
  
  /* Check SD card detect pin */
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 8003842:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003846:	4807      	ldr	r0, [pc, #28]	; (8003864 <BSP_SD_IsDetected+0x2c>)
 8003848:	f002 f99e 	bl	8005b88 <HAL_GPIO_ReadPin>
 800384c:	4603      	mov	r3, r0
 800384e:	2b01      	cmp	r3, #1
 8003850:	d101      	bne.n	8003856 <BSP_SD_IsDetected+0x1e>
  {
    status = SD_NOT_PRESENT;
 8003852:	2300      	movs	r3, #0
 8003854:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8003856:	79fb      	ldrb	r3, [r7, #7]
 8003858:	b2db      	uxtb	r3, r3
}
 800385a:	4618      	mov	r0, r3
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	40020800 	.word	0x40020800

08003868 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{  
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
  /* Read block(s) in DMA transfer mode */
  if(HAL_SD_ReadBlocks_DMA(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	68f9      	ldr	r1, [r7, #12]
 800387a:	4806      	ldr	r0, [pc, #24]	; (8003894 <BSP_SD_ReadBlocks_DMA+0x2c>)
 800387c:	f004 fb7e 	bl	8007f7c <HAL_SD_ReadBlocks_DMA>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <BSP_SD_ReadBlocks_DMA+0x22>
  {
    return MSD_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e000      	b.n	800388c <BSP_SD_ReadBlocks_DMA+0x24>
  }
  else
  {
    return MSD_OK;
 800388a:	2300      	movs	r3, #0
  }
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	20004c0c 	.word	0x20004c0c

08003898 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{ 
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  /* Write block(s) in DMA transfer mode */
  if(HAL_SD_WriteBlocks_DMA(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	68f9      	ldr	r1, [r7, #12]
 80038aa:	4806      	ldr	r0, [pc, #24]	; (80038c4 <BSP_SD_WriteBlocks_DMA+0x2c>)
 80038ac:	f004 fc48 	bl	8008140 <HAL_SD_WriteBlocks_DMA>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <BSP_SD_WriteBlocks_DMA+0x22>
  {
    return MSD_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e000      	b.n	80038bc <BSP_SD_WriteBlocks_DMA+0x24>
  }
  else
  {
    return MSD_OK;
 80038ba:	2300      	movs	r3, #0
  }
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	20004c0c 	.word	0x20004c0c

080038c8 <BSP_SD_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SD_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b08c      	sub	sp, #48	; 0x30
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_rx_handle;
  static DMA_HandleTypeDef dma_tx_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable SDIO clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 80038d2:	4b6c      	ldr	r3, [pc, #432]	; (8003a84 <BSP_SD_MspInit+0x1bc>)
 80038d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d6:	4a6b      	ldr	r2, [pc, #428]	; (8003a84 <BSP_SD_MspInit+0x1bc>)
 80038d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038dc:	6453      	str	r3, [r2, #68]	; 0x44
 80038de:	4b69      	ldr	r3, [pc, #420]	; (8003a84 <BSP_SD_MspInit+0x1bc>)
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038e6:	61bb      	str	r3, [r7, #24]
 80038e8:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable DMA2 clocks */
  __DMAx_TxRx_CLK_ENABLE();
 80038ea:	4b66      	ldr	r3, [pc, #408]	; (8003a84 <BSP_SD_MspInit+0x1bc>)
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	4a65      	ldr	r2, [pc, #404]	; (8003a84 <BSP_SD_MspInit+0x1bc>)
 80038f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038f4:	6313      	str	r3, [r2, #48]	; 0x30
 80038f6:	4b63      	ldr	r3, [pc, #396]	; (8003a84 <BSP_SD_MspInit+0x1bc>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	697b      	ldr	r3, [r7, #20]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003902:	4b60      	ldr	r3, [pc, #384]	; (8003a84 <BSP_SD_MspInit+0x1bc>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	4a5f      	ldr	r2, [pc, #380]	; (8003a84 <BSP_SD_MspInit+0x1bc>)
 8003908:	f043 0304 	orr.w	r3, r3, #4
 800390c:	6313      	str	r3, [r2, #48]	; 0x30
 800390e:	4b5d      	ldr	r3, [pc, #372]	; (8003a84 <BSP_SD_MspInit+0x1bc>)
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	f003 0304 	and.w	r3, r3, #4
 8003916:	613b      	str	r3, [r7, #16]
 8003918:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800391a:	4b5a      	ldr	r3, [pc, #360]	; (8003a84 <BSP_SD_MspInit+0x1bc>)
 800391c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391e:	4a59      	ldr	r2, [pc, #356]	; (8003a84 <BSP_SD_MspInit+0x1bc>)
 8003920:	f043 0308 	orr.w	r3, r3, #8
 8003924:	6313      	str	r3, [r2, #48]	; 0x30
 8003926:	4b57      	ldr	r3, [pc, #348]	; (8003a84 <BSP_SD_MspInit+0x1bc>)
 8003928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392a:	f003 0308 	and.w	r3, r3, #8
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003932:	2302      	movs	r3, #2
 8003934:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003936:	2301      	movs	r3, #1
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800393a:	2303      	movs	r3, #3
 800393c:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF12_SDMMC1;
 800393e:	230c      	movs	r3, #12
 8003940:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8003942:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003946:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003948:	f107 031c 	add.w	r3, r7, #28
 800394c:	4619      	mov	r1, r3
 800394e:	484e      	ldr	r0, [pc, #312]	; (8003a88 <BSP_SD_MspInit+0x1c0>)
 8003950:	f001 ff6e 	bl	8005830 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin = GPIO_PIN_2;
 8003954:	2304      	movs	r3, #4
 8003956:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003958:	f107 031c 	add.w	r3, r7, #28
 800395c:	4619      	mov	r1, r3
 800395e:	484b      	ldr	r0, [pc, #300]	; (8003a8c <BSP_SD_MspInit+0x1c4>)
 8003960:	f001 ff66 	bl	8005830 <HAL_GPIO_Init>

  /* NVIC configuration for SDIO interrupts */
  HAL_NVIC_SetPriority(SDMMC1_IRQn, 0x0E, 0);
 8003964:	2200      	movs	r2, #0
 8003966:	210e      	movs	r1, #14
 8003968:	2031      	movs	r0, #49	; 0x31
 800396a:	f000 fea0 	bl	80046ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800396e:	2031      	movs	r0, #49	; 0x31
 8003970:	f000 feb9 	bl	80046e6 <HAL_NVIC_EnableIRQ>
    
  /* Configure DMA Rx parameters */
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 8003974:	4b46      	ldr	r3, [pc, #280]	; (8003a90 <BSP_SD_MspInit+0x1c8>)
 8003976:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800397a:	605a      	str	r2, [r3, #4]
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800397c:	4b44      	ldr	r3, [pc, #272]	; (8003a90 <BSP_SD_MspInit+0x1c8>)
 800397e:	2200      	movs	r2, #0
 8003980:	609a      	str	r2, [r3, #8]
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003982:	4b43      	ldr	r3, [pc, #268]	; (8003a90 <BSP_SD_MspInit+0x1c8>)
 8003984:	2200      	movs	r2, #0
 8003986:	60da      	str	r2, [r3, #12]
  dma_rx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003988:	4b41      	ldr	r3, [pc, #260]	; (8003a90 <BSP_SD_MspInit+0x1c8>)
 800398a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800398e:	611a      	str	r2, [r3, #16]
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003990:	4b3f      	ldr	r3, [pc, #252]	; (8003a90 <BSP_SD_MspInit+0x1c8>)
 8003992:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003996:	615a      	str	r2, [r3, #20]
  dma_rx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003998:	4b3d      	ldr	r3, [pc, #244]	; (8003a90 <BSP_SD_MspInit+0x1c8>)
 800399a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800399e:	619a      	str	r2, [r3, #24]
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 80039a0:	4b3b      	ldr	r3, [pc, #236]	; (8003a90 <BSP_SD_MspInit+0x1c8>)
 80039a2:	2220      	movs	r2, #32
 80039a4:	61da      	str	r2, [r3, #28]
  dma_rx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80039a6:	4b3a      	ldr	r3, [pc, #232]	; (8003a90 <BSP_SD_MspInit+0x1c8>)
 80039a8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80039ac:	621a      	str	r2, [r3, #32]
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 80039ae:	4b38      	ldr	r3, [pc, #224]	; (8003a90 <BSP_SD_MspInit+0x1c8>)
 80039b0:	2204      	movs	r2, #4
 80039b2:	625a      	str	r2, [r3, #36]	; 0x24
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80039b4:	4b36      	ldr	r3, [pc, #216]	; (8003a90 <BSP_SD_MspInit+0x1c8>)
 80039b6:	2203      	movs	r2, #3
 80039b8:	629a      	str	r2, [r3, #40]	; 0x28
  dma_rx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 80039ba:	4b35      	ldr	r3, [pc, #212]	; (8003a90 <BSP_SD_MspInit+0x1c8>)
 80039bc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80039c0:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 80039c2:	4b33      	ldr	r3, [pc, #204]	; (8003a90 <BSP_SD_MspInit+0x1c8>)
 80039c4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80039c8:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 80039ca:	4b31      	ldr	r3, [pc, #196]	; (8003a90 <BSP_SD_MspInit+0x1c8>)
 80039cc:	4a31      	ldr	r2, [pc, #196]	; (8003a94 <BSP_SD_MspInit+0x1cc>)
 80039ce:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a2f      	ldr	r2, [pc, #188]	; (8003a90 <BSP_SD_MspInit+0x1c8>)
 80039d4:	641a      	str	r2, [r3, #64]	; 0x40
 80039d6:	4a2e      	ldr	r2, [pc, #184]	; (8003a90 <BSP_SD_MspInit+0x1c8>)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_rx_handle);
 80039dc:	482c      	ldr	r0, [pc, #176]	; (8003a90 <BSP_SD_MspInit+0x1c8>)
 80039de:	f001 f835 	bl	8004a4c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_rx_handle);
 80039e2:	482b      	ldr	r0, [pc, #172]	; (8003a90 <BSP_SD_MspInit+0x1c8>)
 80039e4:	f000 ff84 	bl	80048f0 <HAL_DMA_Init>
  
  /* Configure DMA Tx parameters */
  dma_tx_handle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
 80039e8:	4b2b      	ldr	r3, [pc, #172]	; (8003a98 <BSP_SD_MspInit+0x1d0>)
 80039ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039ee:	605a      	str	r2, [r3, #4]
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80039f0:	4b29      	ldr	r3, [pc, #164]	; (8003a98 <BSP_SD_MspInit+0x1d0>)
 80039f2:	2240      	movs	r2, #64	; 0x40
 80039f4:	609a      	str	r2, [r3, #8]
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 80039f6:	4b28      	ldr	r3, [pc, #160]	; (8003a98 <BSP_SD_MspInit+0x1d0>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	60da      	str	r2, [r3, #12]
  dma_tx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80039fc:	4b26      	ldr	r3, [pc, #152]	; (8003a98 <BSP_SD_MspInit+0x1d0>)
 80039fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a02:	611a      	str	r2, [r3, #16]
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003a04:	4b24      	ldr	r3, [pc, #144]	; (8003a98 <BSP_SD_MspInit+0x1d0>)
 8003a06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a0a:	615a      	str	r2, [r3, #20]
  dma_tx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003a0c:	4b22      	ldr	r3, [pc, #136]	; (8003a98 <BSP_SD_MspInit+0x1d0>)
 8003a0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a12:	619a      	str	r2, [r3, #24]
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
 8003a14:	4b20      	ldr	r3, [pc, #128]	; (8003a98 <BSP_SD_MspInit+0x1d0>)
 8003a16:	2220      	movs	r2, #32
 8003a18:	61da      	str	r2, [r3, #28]
  dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8003a1a:	4b1f      	ldr	r3, [pc, #124]	; (8003a98 <BSP_SD_MspInit+0x1d0>)
 8003a1c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003a20:	621a      	str	r2, [r3, #32]
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8003a22:	4b1d      	ldr	r3, [pc, #116]	; (8003a98 <BSP_SD_MspInit+0x1d0>)
 8003a24:	2204      	movs	r2, #4
 8003a26:	625a      	str	r2, [r3, #36]	; 0x24
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003a28:	4b1b      	ldr	r3, [pc, #108]	; (8003a98 <BSP_SD_MspInit+0x1d0>)
 8003a2a:	2203      	movs	r2, #3
 8003a2c:	629a      	str	r2, [r3, #40]	; 0x28
  dma_tx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 8003a2e:	4b1a      	ldr	r3, [pc, #104]	; (8003a98 <BSP_SD_MspInit+0x1d0>)
 8003a30:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003a34:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8003a36:	4b18      	ldr	r3, [pc, #96]	; (8003a98 <BSP_SD_MspInit+0x1d0>)
 8003a38:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003a3c:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 8003a3e:	4b16      	ldr	r3, [pc, #88]	; (8003a98 <BSP_SD_MspInit+0x1d0>)
 8003a40:	4a16      	ldr	r2, [pc, #88]	; (8003a9c <BSP_SD_MspInit+0x1d4>)
 8003a42:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a14      	ldr	r2, [pc, #80]	; (8003a98 <BSP_SD_MspInit+0x1d0>)
 8003a48:	63da      	str	r2, [r3, #60]	; 0x3c
 8003a4a:	4a13      	ldr	r2, [pc, #76]	; (8003a98 <BSP_SD_MspInit+0x1d0>)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_tx_handle);
 8003a50:	4811      	ldr	r0, [pc, #68]	; (8003a98 <BSP_SD_MspInit+0x1d0>)
 8003a52:	f000 fffb 	bl	8004a4c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_tx_handle); 
 8003a56:	4810      	ldr	r0, [pc, #64]	; (8003a98 <BSP_SD_MspInit+0x1d0>)
 8003a58:	f000 ff4a 	bl	80048f0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Rx_IRQn, 0x0F, 0);
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	210f      	movs	r1, #15
 8003a60:	203b      	movs	r0, #59	; 0x3b
 8003a62:	f000 fe24 	bl	80046ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Rx_IRQn);
 8003a66:	203b      	movs	r0, #59	; 0x3b
 8003a68:	f000 fe3d 	bl	80046e6 <HAL_NVIC_EnableIRQ>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Tx_IRQn, 0x0F, 0);
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	210f      	movs	r1, #15
 8003a70:	2045      	movs	r0, #69	; 0x45
 8003a72:	f000 fe1c 	bl	80046ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Tx_IRQn);
 8003a76:	2045      	movs	r0, #69	; 0x45
 8003a78:	f000 fe35 	bl	80046e6 <HAL_NVIC_EnableIRQ>
}
 8003a7c:	bf00      	nop
 8003a7e:	3730      	adds	r7, #48	; 0x30
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40023800 	.word	0x40023800
 8003a88:	40020800 	.word	0x40020800
 8003a8c:	40020c00 	.word	0x40020c00
 8003a90:	20000620 	.word	0x20000620
 8003a94:	40026458 	.word	0x40026458
 8003a98:	20000680 	.word	0x20000680
 8003a9c:	400264a0 	.word	0x400264a0

08003aa0 <BSP_SD_Detect_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SD_Detect_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b088      	sub	sp, #32
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef  gpio_init_structure;

  SD_DETECT_GPIO_CLK_ENABLE();
 8003aaa:	4b0f      	ldr	r3, [pc, #60]	; (8003ae8 <BSP_SD_Detect_MspInit+0x48>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	4a0e      	ldr	r2, [pc, #56]	; (8003ae8 <BSP_SD_Detect_MspInit+0x48>)
 8003ab0:	f043 0304 	orr.w	r3, r3, #4
 8003ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ab6:	4b0c      	ldr	r3, [pc, #48]	; (8003ae8 <BSP_SD_Detect_MspInit+0x48>)
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	f003 0304 	and.w	r3, r3, #4
 8003abe:	60bb      	str	r3, [r7, #8]
 8003ac0:	68bb      	ldr	r3, [r7, #8]

  /* GPIO configuration in input for uSD_Detect signal */
  gpio_init_structure.Pin       = SD_DETECT_PIN;
 8003ac2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ac6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003acc:	2301      	movs	r3, #1
 8003ace:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8003ad4:	f107 030c 	add.w	r3, r7, #12
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4804      	ldr	r0, [pc, #16]	; (8003aec <BSP_SD_Detect_MspInit+0x4c>)
 8003adc:	f001 fea8 	bl	8005830 <HAL_GPIO_Init>
}
 8003ae0:	bf00      	nop
 8003ae2:	3720      	adds	r7, #32
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	40020800 	.word	0x40020800

08003af0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  return((HAL_SD_GetCardState(&uSdHandle) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8003af4:	4805      	ldr	r0, [pc, #20]	; (8003b0c <BSP_SD_GetCardState+0x1c>)
 8003af6:	f004 fff3 	bl	8008ae0 <HAL_SD_GetCardState>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b04      	cmp	r3, #4
 8003afe:	bf14      	ite	ne
 8003b00:	2301      	movne	r3, #1
 8003b02:	2300      	moveq	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	20004c0c 	.word	0x20004c0c

08003b10 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&uSdHandle, CardInfo);
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	4803      	ldr	r0, [pc, #12]	; (8003b28 <BSP_SD_GetCardInfo+0x18>)
 8003b1c:	f004 ff1a 	bl	8008954 <HAL_SD_GetCardInfo>
}
 8003b20:	bf00      	nop
 8003b22:	3708      	adds	r7, #8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	20004c0c 	.word	0x20004c0c

08003b2c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8003b34:	f000 f818 	bl	8003b68 <BSP_SD_AbortCallback>
}
 8003b38:	bf00      	nop
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8003b48:	f7fe fa7a 	bl	8002040 <BSP_SD_WriteCpltCallback>
}
 8003b4c:	bf00      	nop
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8003b5c:	f7fe fa7e 	bl	800205c <BSP_SD_ReadCpltCallback>
}
 8003b60:	bf00      	nop
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callbacks
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0

}
 8003b6c:	bf00      	nop
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
	...

08003b78 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003b7c:	4b29      	ldr	r3, [pc, #164]	; (8003c24 <BSP_SDRAM_Init+0xac>)
 8003b7e:	4a2a      	ldr	r2, [pc, #168]	; (8003c28 <BSP_SDRAM_Init+0xb0>)
 8003b80:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8003b82:	4b2a      	ldr	r3, [pc, #168]	; (8003c2c <BSP_SDRAM_Init+0xb4>)
 8003b84:	2202      	movs	r2, #2
 8003b86:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003b88:	4b28      	ldr	r3, [pc, #160]	; (8003c2c <BSP_SDRAM_Init+0xb4>)
 8003b8a:	2207      	movs	r2, #7
 8003b8c:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003b8e:	4b27      	ldr	r3, [pc, #156]	; (8003c2c <BSP_SDRAM_Init+0xb4>)
 8003b90:	2204      	movs	r2, #4
 8003b92:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003b94:	4b25      	ldr	r3, [pc, #148]	; (8003c2c <BSP_SDRAM_Init+0xb4>)
 8003b96:	2207      	movs	r2, #7
 8003b98:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8003b9a:	4b24      	ldr	r3, [pc, #144]	; (8003c2c <BSP_SDRAM_Init+0xb4>)
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003ba0:	4b22      	ldr	r3, [pc, #136]	; (8003c2c <BSP_SDRAM_Init+0xb4>)
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8003ba6:	4b21      	ldr	r3, [pc, #132]	; (8003c2c <BSP_SDRAM_Init+0xb4>)
 8003ba8:	2202      	movs	r2, #2
 8003baa:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003bac:	4b1d      	ldr	r3, [pc, #116]	; (8003c24 <BSP_SDRAM_Init+0xac>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003bb2:	4b1c      	ldr	r3, [pc, #112]	; (8003c24 <BSP_SDRAM_Init+0xac>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003bb8:	4b1a      	ldr	r3, [pc, #104]	; (8003c24 <BSP_SDRAM_Init+0xac>)
 8003bba:	2204      	movs	r2, #4
 8003bbc:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003bbe:	4b19      	ldr	r3, [pc, #100]	; (8003c24 <BSP_SDRAM_Init+0xac>)
 8003bc0:	2210      	movs	r2, #16
 8003bc2:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003bc4:	4b17      	ldr	r3, [pc, #92]	; (8003c24 <BSP_SDRAM_Init+0xac>)
 8003bc6:	2240      	movs	r2, #64	; 0x40
 8003bc8:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8003bca:	4b16      	ldr	r3, [pc, #88]	; (8003c24 <BSP_SDRAM_Init+0xac>)
 8003bcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bd0:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003bd2:	4b14      	ldr	r3, [pc, #80]	; (8003c24 <BSP_SDRAM_Init+0xac>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003bd8:	4b12      	ldr	r3, [pc, #72]	; (8003c24 <BSP_SDRAM_Init+0xac>)
 8003bda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bde:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003be0:	4b10      	ldr	r3, [pc, #64]	; (8003c24 <BSP_SDRAM_Init+0xac>)
 8003be2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003be6:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003be8:	4b0e      	ldr	r3, [pc, #56]	; (8003c24 <BSP_SDRAM_Init+0xac>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003bee:	2100      	movs	r1, #0
 8003bf0:	480c      	ldr	r0, [pc, #48]	; (8003c24 <BSP_SDRAM_Init+0xac>)
 8003bf2:	f000 f87f 	bl	8003cf4 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8003bf6:	490d      	ldr	r1, [pc, #52]	; (8003c2c <BSP_SDRAM_Init+0xb4>)
 8003bf8:	480a      	ldr	r0, [pc, #40]	; (8003c24 <BSP_SDRAM_Init+0xac>)
 8003bfa:	f005 fc30 	bl	800945e <HAL_SDRAM_Init>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003c04:	4b0a      	ldr	r3, [pc, #40]	; (8003c30 <BSP_SDRAM_Init+0xb8>)
 8003c06:	2201      	movs	r2, #1
 8003c08:	701a      	strb	r2, [r3, #0]
 8003c0a:	e002      	b.n	8003c12 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003c0c:	4b08      	ldr	r3, [pc, #32]	; (8003c30 <BSP_SDRAM_Init+0xb8>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003c12:	f240 6003 	movw	r0, #1539	; 0x603
 8003c16:	f000 f80d 	bl	8003c34 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003c1a:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <BSP_SDRAM_Init+0xb8>)
 8003c1c:	781b      	ldrb	r3, [r3, #0]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	20004c90 	.word	0x20004c90
 8003c28:	a0000140 	.word	0xa0000140
 8003c2c:	200006e0 	.word	0x200006e0
 8003c30:	20000018 	.word	0x20000018

08003c34 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003c40:	4b2a      	ldr	r3, [pc, #168]	; (8003cec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c42:	2201      	movs	r2, #1
 8003c44:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003c46:	4b29      	ldr	r3, [pc, #164]	; (8003cec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c48:	2210      	movs	r2, #16
 8003c4a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003c4c:	4b27      	ldr	r3, [pc, #156]	; (8003cec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c4e:	2201      	movs	r2, #1
 8003c50:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003c52:	4b26      	ldr	r3, [pc, #152]	; (8003cec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003c58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c5c:	4923      	ldr	r1, [pc, #140]	; (8003cec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c5e:	4824      	ldr	r0, [pc, #144]	; (8003cf0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c60:	f005 fc31 	bl	80094c6 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003c64:	2001      	movs	r0, #1
 8003c66:	f000 f99b 	bl	8003fa0 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003c6a:	4b20      	ldr	r3, [pc, #128]	; (8003cec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003c70:	4b1e      	ldr	r3, [pc, #120]	; (8003cec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c72:	2210      	movs	r2, #16
 8003c74:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003c76:	4b1d      	ldr	r3, [pc, #116]	; (8003cec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c78:	2201      	movs	r2, #1
 8003c7a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003c7c:	4b1b      	ldr	r3, [pc, #108]	; (8003cec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003c82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c86:	4919      	ldr	r1, [pc, #100]	; (8003cec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c88:	4819      	ldr	r0, [pc, #100]	; (8003cf0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c8a:	f005 fc1c 	bl	80094c6 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003c8e:	4b17      	ldr	r3, [pc, #92]	; (8003cec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c90:	2203      	movs	r2, #3
 8003c92:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003c94:	4b15      	ldr	r3, [pc, #84]	; (8003cec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c96:	2210      	movs	r2, #16
 8003c98:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003c9a:	4b14      	ldr	r3, [pc, #80]	; (8003cec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c9c:	2208      	movs	r2, #8
 8003c9e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003ca0:	4b12      	ldr	r3, [pc, #72]	; (8003cec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003ca6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003caa:	4910      	ldr	r1, [pc, #64]	; (8003cec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cac:	4810      	ldr	r0, [pc, #64]	; (8003cf0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003cae:	f005 fc0a 	bl	80094c6 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003cb2:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003cb6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003cb8:	4b0c      	ldr	r3, [pc, #48]	; (8003cec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cba:	2204      	movs	r2, #4
 8003cbc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003cbe:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cc0:	2210      	movs	r2, #16
 8003cc2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003cc4:	4b09      	ldr	r3, [pc, #36]	; (8003cec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	4a07      	ldr	r2, [pc, #28]	; (8003cec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cce:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003cd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cd4:	4905      	ldr	r1, [pc, #20]	; (8003cec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cd6:	4806      	ldr	r0, [pc, #24]	; (8003cf0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003cd8:	f005 fbf5 	bl	80094c6 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	4804      	ldr	r0, [pc, #16]	; (8003cf0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003ce0:	f005 fc1c 	bl	800951c <HAL_SDRAM_ProgramRefreshRate>
}
 8003ce4:	bf00      	nop
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	200006fc 	.word	0x200006fc
 8003cf0:	20004c90 	.word	0x20004c90

08003cf4 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b090      	sub	sp, #64	; 0x40
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003cfe:	4b70      	ldr	r3, [pc, #448]	; (8003ec0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d02:	4a6f      	ldr	r2, [pc, #444]	; (8003ec0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d04:	f043 0301 	orr.w	r3, r3, #1
 8003d08:	6393      	str	r3, [r2, #56]	; 0x38
 8003d0a:	4b6d      	ldr	r3, [pc, #436]	; (8003ec0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003d16:	4b6a      	ldr	r3, [pc, #424]	; (8003ec0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1a:	4a69      	ldr	r2, [pc, #420]	; (8003ec0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d20:	6313      	str	r3, [r2, #48]	; 0x30
 8003d22:	4b67      	ldr	r3, [pc, #412]	; (8003ec0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d2e:	4b64      	ldr	r3, [pc, #400]	; (8003ec0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d32:	4a63      	ldr	r2, [pc, #396]	; (8003ec0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d34:	f043 0304 	orr.w	r3, r3, #4
 8003d38:	6313      	str	r3, [r2, #48]	; 0x30
 8003d3a:	4b61      	ldr	r3, [pc, #388]	; (8003ec0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	623b      	str	r3, [r7, #32]
 8003d44:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d46:	4b5e      	ldr	r3, [pc, #376]	; (8003ec0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4a:	4a5d      	ldr	r2, [pc, #372]	; (8003ec0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d4c:	f043 0308 	orr.w	r3, r3, #8
 8003d50:	6313      	str	r3, [r2, #48]	; 0x30
 8003d52:	4b5b      	ldr	r3, [pc, #364]	; (8003ec0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	61fb      	str	r3, [r7, #28]
 8003d5c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d5e:	4b58      	ldr	r3, [pc, #352]	; (8003ec0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d62:	4a57      	ldr	r2, [pc, #348]	; (8003ec0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d64:	f043 0310 	orr.w	r3, r3, #16
 8003d68:	6313      	str	r3, [r2, #48]	; 0x30
 8003d6a:	4b55      	ldr	r3, [pc, #340]	; (8003ec0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6e:	f003 0310 	and.w	r3, r3, #16
 8003d72:	61bb      	str	r3, [r7, #24]
 8003d74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d76:	4b52      	ldr	r3, [pc, #328]	; (8003ec0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7a:	4a51      	ldr	r2, [pc, #324]	; (8003ec0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d7c:	f043 0320 	orr.w	r3, r3, #32
 8003d80:	6313      	str	r3, [r2, #48]	; 0x30
 8003d82:	4b4f      	ldr	r3, [pc, #316]	; (8003ec0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d86:	f003 0320 	and.w	r3, r3, #32
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003d8e:	4b4c      	ldr	r3, [pc, #304]	; (8003ec0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d92:	4a4b      	ldr	r2, [pc, #300]	; (8003ec0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d98:	6313      	str	r3, [r2, #48]	; 0x30
 8003d9a:	4b49      	ldr	r3, [pc, #292]	; (8003ec0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da2:	613b      	str	r3, [r7, #16]
 8003da4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003da6:	4b46      	ldr	r3, [pc, #280]	; (8003ec0 <BSP_SDRAM_MspInit+0x1cc>)
 8003da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003daa:	4a45      	ldr	r2, [pc, #276]	; (8003ec0 <BSP_SDRAM_MspInit+0x1cc>)
 8003dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003db0:	6313      	str	r3, [r2, #48]	; 0x30
 8003db2:	4b43      	ldr	r3, [pc, #268]	; (8003ec0 <BSP_SDRAM_MspInit+0x1cc>)
 8003db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003dca:	230c      	movs	r3, #12
 8003dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003dce:	2308      	movs	r3, #8
 8003dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003dd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	483a      	ldr	r0, [pc, #232]	; (8003ec4 <BSP_SDRAM_MspInit+0x1d0>)
 8003dda:	f001 fd29 	bl	8005830 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003dde:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003de2:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003de4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003de8:	4619      	mov	r1, r3
 8003dea:	4837      	ldr	r0, [pc, #220]	; (8003ec8 <BSP_SDRAM_MspInit+0x1d4>)
 8003dec:	f001 fd20 	bl	8005830 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003df0:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003df4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003df6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4833      	ldr	r0, [pc, #204]	; (8003ecc <BSP_SDRAM_MspInit+0x1d8>)
 8003dfe:	f001 fd17 	bl	8005830 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003e02:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003e06:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003e08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4830      	ldr	r0, [pc, #192]	; (8003ed0 <BSP_SDRAM_MspInit+0x1dc>)
 8003e10:	f001 fd0e 	bl	8005830 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003e14:	f248 1333 	movw	r3, #33075	; 0x8133
 8003e18:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003e1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e1e:	4619      	mov	r1, r3
 8003e20:	482c      	ldr	r0, [pc, #176]	; (8003ed4 <BSP_SDRAM_MspInit+0x1e0>)
 8003e22:	f001 fd05 	bl	8005830 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003e26:	2328      	movs	r3, #40	; 0x28
 8003e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003e2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4829      	ldr	r0, [pc, #164]	; (8003ed8 <BSP_SDRAM_MspInit+0x1e4>)
 8003e32:	f001 fcfd 	bl	8005830 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003e36:	4b29      	ldr	r3, [pc, #164]	; (8003edc <BSP_SDRAM_MspInit+0x1e8>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003e3c:	4b27      	ldr	r3, [pc, #156]	; (8003edc <BSP_SDRAM_MspInit+0x1e8>)
 8003e3e:	2280      	movs	r2, #128	; 0x80
 8003e40:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003e42:	4b26      	ldr	r3, [pc, #152]	; (8003edc <BSP_SDRAM_MspInit+0x1e8>)
 8003e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e48:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003e4a:	4b24      	ldr	r3, [pc, #144]	; (8003edc <BSP_SDRAM_MspInit+0x1e8>)
 8003e4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e50:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003e52:	4b22      	ldr	r3, [pc, #136]	; (8003edc <BSP_SDRAM_MspInit+0x1e8>)
 8003e54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e58:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003e5a:	4b20      	ldr	r3, [pc, #128]	; (8003edc <BSP_SDRAM_MspInit+0x1e8>)
 8003e5c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e60:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8003e62:	4b1e      	ldr	r3, [pc, #120]	; (8003edc <BSP_SDRAM_MspInit+0x1e8>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003e68:	4b1c      	ldr	r3, [pc, #112]	; (8003edc <BSP_SDRAM_MspInit+0x1e8>)
 8003e6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e6e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003e70:	4b1a      	ldr	r3, [pc, #104]	; (8003edc <BSP_SDRAM_MspInit+0x1e8>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003e76:	4b19      	ldr	r3, [pc, #100]	; (8003edc <BSP_SDRAM_MspInit+0x1e8>)
 8003e78:	2203      	movs	r2, #3
 8003e7a:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003e7c:	4b17      	ldr	r3, [pc, #92]	; (8003edc <BSP_SDRAM_MspInit+0x1e8>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003e82:	4b16      	ldr	r3, [pc, #88]	; (8003edc <BSP_SDRAM_MspInit+0x1e8>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003e88:	4b14      	ldr	r3, [pc, #80]	; (8003edc <BSP_SDRAM_MspInit+0x1e8>)
 8003e8a:	4a15      	ldr	r2, [pc, #84]	; (8003ee0 <BSP_SDRAM_MspInit+0x1ec>)
 8003e8c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a12      	ldr	r2, [pc, #72]	; (8003edc <BSP_SDRAM_MspInit+0x1e8>)
 8003e92:	631a      	str	r2, [r3, #48]	; 0x30
 8003e94:	4a11      	ldr	r2, [pc, #68]	; (8003edc <BSP_SDRAM_MspInit+0x1e8>)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003e9a:	4810      	ldr	r0, [pc, #64]	; (8003edc <BSP_SDRAM_MspInit+0x1e8>)
 8003e9c:	f000 fdd6 	bl	8004a4c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003ea0:	480e      	ldr	r0, [pc, #56]	; (8003edc <BSP_SDRAM_MspInit+0x1e8>)
 8003ea2:	f000 fd25 	bl	80048f0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	210f      	movs	r1, #15
 8003eaa:	2038      	movs	r0, #56	; 0x38
 8003eac:	f000 fbff 	bl	80046ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003eb0:	2038      	movs	r0, #56	; 0x38
 8003eb2:	f000 fc18 	bl	80046e6 <HAL_NVIC_EnableIRQ>
}
 8003eb6:	bf00      	nop
 8003eb8:	3740      	adds	r7, #64	; 0x40
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	40020800 	.word	0x40020800
 8003ec8:	40020c00 	.word	0x40020c00
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	40021400 	.word	0x40021400
 8003ed4:	40021800 	.word	0x40021800
 8003ed8:	40021c00 	.word	0x40021c00
 8003edc:	2000070c 	.word	0x2000070c
 8003ee0:	40026410 	.word	0x40026410

08003ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ee8:	2003      	movs	r0, #3
 8003eea:	f000 fbd5 	bl	8004698 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003eee:	200f      	movs	r0, #15
 8003ef0:	f000 f806 	bl	8003f00 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003ef4:	f7fe f8c0 	bl	8002078 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	bd80      	pop	{r7, pc}
	...

08003f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f08:	4b12      	ldr	r3, [pc, #72]	; (8003f54 <HAL_InitTick+0x54>)
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	4b12      	ldr	r3, [pc, #72]	; (8003f58 <HAL_InitTick+0x58>)
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	4619      	mov	r1, r3
 8003f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fbef 	bl	8004702 <HAL_SYSTICK_Config>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e00e      	b.n	8003f4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b0f      	cmp	r3, #15
 8003f32:	d80a      	bhi.n	8003f4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f34:	2200      	movs	r2, #0
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	f04f 30ff 	mov.w	r0, #4294967295
 8003f3c:	f000 fbb7 	bl	80046ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f40:	4a06      	ldr	r2, [pc, #24]	; (8003f5c <HAL_InitTick+0x5c>)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
 8003f48:	e000      	b.n	8003f4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	20000004 	.word	0x20000004
 8003f58:	20000020 	.word	0x20000020
 8003f5c:	2000001c 	.word	0x2000001c

08003f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f64:	4b06      	ldr	r3, [pc, #24]	; (8003f80 <HAL_IncTick+0x20>)
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	4b06      	ldr	r3, [pc, #24]	; (8003f84 <HAL_IncTick+0x24>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4413      	add	r3, r2
 8003f70:	4a04      	ldr	r2, [pc, #16]	; (8003f84 <HAL_IncTick+0x24>)
 8003f72:	6013      	str	r3, [r2, #0]
}
 8003f74:	bf00      	nop
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	20000020 	.word	0x20000020
 8003f84:	20004cc4 	.word	0x20004cc4

08003f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8003f8c:	4b03      	ldr	r3, [pc, #12]	; (8003f9c <HAL_GetTick+0x14>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	20004cc4 	.word	0x20004cc4

08003fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fa8:	f7ff ffee 	bl	8003f88 <HAL_GetTick>
 8003fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb8:	d005      	beq.n	8003fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fba:	4b0a      	ldr	r3, [pc, #40]	; (8003fe4 <HAL_Delay+0x44>)
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003fc6:	bf00      	nop
 8003fc8:	f7ff ffde 	bl	8003f88 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d8f7      	bhi.n	8003fc8 <HAL_Delay+0x28>
  {
  }
}
 8003fd8:	bf00      	nop
 8003fda:	bf00      	nop
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	20000020 	.word	0x20000020

08003fe8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e031      	b.n	8004062 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	2b00      	cmp	r3, #0
 8004004:	d109      	bne.n	800401a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7fe f85e 	bl	80020c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	f003 0310 	and.w	r3, r3, #16
 8004022:	2b00      	cmp	r3, #0
 8004024:	d116      	bne.n	8004054 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800402a:	4b10      	ldr	r3, [pc, #64]	; (800406c <HAL_ADC_Init+0x84>)
 800402c:	4013      	ands	r3, r2
 800402e:	f043 0202 	orr.w	r2, r3, #2
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f964 	bl	8004304 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	f023 0303 	bic.w	r3, r3, #3
 800404a:	f043 0201 	orr.w	r2, r3, #1
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	641a      	str	r2, [r3, #64]	; 0x40
 8004052:	e001      	b.n	8004058 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004060:	7bfb      	ldrb	r3, [r7, #15]
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	ffffeefd 	.word	0xffffeefd

08004070 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800407a:	2300      	movs	r3, #0
 800407c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <HAL_ADC_ConfigChannel+0x1c>
 8004088:	2302      	movs	r3, #2
 800408a:	e12a      	b.n	80042e2 <HAL_ADC_ConfigChannel+0x272>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b09      	cmp	r3, #9
 800409a:	d93a      	bls.n	8004112 <HAL_ADC_ConfigChannel+0xa2>
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040a4:	d035      	beq.n	8004112 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68d9      	ldr	r1, [r3, #12]
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	461a      	mov	r2, r3
 80040b4:	4613      	mov	r3, r2
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	4413      	add	r3, r2
 80040ba:	3b1e      	subs	r3, #30
 80040bc:	2207      	movs	r2, #7
 80040be:	fa02 f303 	lsl.w	r3, r2, r3
 80040c2:	43da      	mvns	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	400a      	ands	r2, r1
 80040ca:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a87      	ldr	r2, [pc, #540]	; (80042f0 <HAL_ADC_ConfigChannel+0x280>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d10a      	bne.n	80040ec <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68d9      	ldr	r1, [r3, #12]
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	061a      	lsls	r2, r3, #24
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040ea:	e035      	b.n	8004158 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68d9      	ldr	r1, [r3, #12]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	689a      	ldr	r2, [r3, #8]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	4618      	mov	r0, r3
 80040fe:	4603      	mov	r3, r0
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	4403      	add	r3, r0
 8004104:	3b1e      	subs	r3, #30
 8004106:	409a      	lsls	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	430a      	orrs	r2, r1
 800410e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004110:	e022      	b.n	8004158 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6919      	ldr	r1, [r3, #16]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	b29b      	uxth	r3, r3
 800411e:	461a      	mov	r2, r3
 8004120:	4613      	mov	r3, r2
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	4413      	add	r3, r2
 8004126:	2207      	movs	r2, #7
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	43da      	mvns	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	400a      	ands	r2, r1
 8004134:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6919      	ldr	r1, [r3, #16]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	b29b      	uxth	r3, r3
 8004146:	4618      	mov	r0, r3
 8004148:	4603      	mov	r3, r0
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	4403      	add	r3, r0
 800414e:	409a      	lsls	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	2b06      	cmp	r3, #6
 800415e:	d824      	bhi.n	80041aa <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	4613      	mov	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	3b05      	subs	r3, #5
 8004172:	221f      	movs	r2, #31
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	43da      	mvns	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	400a      	ands	r2, r1
 8004180:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	b29b      	uxth	r3, r3
 800418e:	4618      	mov	r0, r3
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	4613      	mov	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	3b05      	subs	r3, #5
 800419c:	fa00 f203 	lsl.w	r2, r0, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	635a      	str	r2, [r3, #52]	; 0x34
 80041a8:	e04c      	b.n	8004244 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2b0c      	cmp	r3, #12
 80041b0:	d824      	bhi.n	80041fc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	4613      	mov	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	3b23      	subs	r3, #35	; 0x23
 80041c4:	221f      	movs	r2, #31
 80041c6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ca:	43da      	mvns	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	400a      	ands	r2, r1
 80041d2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	4618      	mov	r0, r3
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	4613      	mov	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	3b23      	subs	r3, #35	; 0x23
 80041ee:	fa00 f203 	lsl.w	r2, r0, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	631a      	str	r2, [r3, #48]	; 0x30
 80041fa:	e023      	b.n	8004244 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	4613      	mov	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	3b41      	subs	r3, #65	; 0x41
 800420e:	221f      	movs	r2, #31
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	43da      	mvns	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	400a      	ands	r2, r1
 800421c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	b29b      	uxth	r3, r3
 800422a:	4618      	mov	r0, r3
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685a      	ldr	r2, [r3, #4]
 8004230:	4613      	mov	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	3b41      	subs	r3, #65	; 0x41
 8004238:	fa00 f203 	lsl.w	r2, r0, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a2a      	ldr	r2, [pc, #168]	; (80042f4 <HAL_ADC_ConfigChannel+0x284>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d10a      	bne.n	8004264 <HAL_ADC_ConfigChannel+0x1f4>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004256:	d105      	bne.n	8004264 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004258:	4b27      	ldr	r3, [pc, #156]	; (80042f8 <HAL_ADC_ConfigChannel+0x288>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	4a26      	ldr	r2, [pc, #152]	; (80042f8 <HAL_ADC_ConfigChannel+0x288>)
 800425e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004262:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a22      	ldr	r2, [pc, #136]	; (80042f4 <HAL_ADC_ConfigChannel+0x284>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d109      	bne.n	8004282 <HAL_ADC_ConfigChannel+0x212>
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2b12      	cmp	r3, #18
 8004274:	d105      	bne.n	8004282 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004276:	4b20      	ldr	r3, [pc, #128]	; (80042f8 <HAL_ADC_ConfigChannel+0x288>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	4a1f      	ldr	r2, [pc, #124]	; (80042f8 <HAL_ADC_ConfigChannel+0x288>)
 800427c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004280:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a1b      	ldr	r2, [pc, #108]	; (80042f4 <HAL_ADC_ConfigChannel+0x284>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d125      	bne.n	80042d8 <HAL_ADC_ConfigChannel+0x268>
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a17      	ldr	r2, [pc, #92]	; (80042f0 <HAL_ADC_ConfigChannel+0x280>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d003      	beq.n	800429e <HAL_ADC_ConfigChannel+0x22e>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b11      	cmp	r3, #17
 800429c:	d11c      	bne.n	80042d8 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800429e:	4b16      	ldr	r3, [pc, #88]	; (80042f8 <HAL_ADC_ConfigChannel+0x288>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	4a15      	ldr	r2, [pc, #84]	; (80042f8 <HAL_ADC_ConfigChannel+0x288>)
 80042a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042a8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a10      	ldr	r2, [pc, #64]	; (80042f0 <HAL_ADC_ConfigChannel+0x280>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d111      	bne.n	80042d8 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80042b4:	4b11      	ldr	r3, [pc, #68]	; (80042fc <HAL_ADC_ConfigChannel+0x28c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a11      	ldr	r2, [pc, #68]	; (8004300 <HAL_ADC_ConfigChannel+0x290>)
 80042ba:	fba2 2303 	umull	r2, r3, r2, r3
 80042be:	0c9a      	lsrs	r2, r3, #18
 80042c0:	4613      	mov	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80042ca:	e002      	b.n	80042d2 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	3b01      	subs	r3, #1
 80042d0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1f9      	bne.n	80042cc <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	10000012 	.word	0x10000012
 80042f4:	40012000 	.word	0x40012000
 80042f8:	40012300 	.word	0x40012300
 80042fc:	20000004 	.word	0x20000004
 8004300:	431bde83 	.word	0x431bde83

08004304 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800430c:	4b78      	ldr	r3, [pc, #480]	; (80044f0 <ADC_Init+0x1ec>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	4a77      	ldr	r2, [pc, #476]	; (80044f0 <ADC_Init+0x1ec>)
 8004312:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004316:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004318:	4b75      	ldr	r3, [pc, #468]	; (80044f0 <ADC_Init+0x1ec>)
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	4973      	ldr	r1, [pc, #460]	; (80044f0 <ADC_Init+0x1ec>)
 8004322:	4313      	orrs	r3, r2
 8004324:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004334:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6859      	ldr	r1, [r3, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	021a      	lsls	r2, r3, #8
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004358:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6859      	ldr	r1, [r3, #4]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800437a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6899      	ldr	r1, [r3, #8]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68da      	ldr	r2, [r3, #12]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004392:	4a58      	ldr	r2, [pc, #352]	; (80044f4 <ADC_Init+0x1f0>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d022      	beq.n	80043de <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6899      	ldr	r1, [r3, #8]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689a      	ldr	r2, [r3, #8]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6899      	ldr	r1, [r3, #8]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	430a      	orrs	r2, r1
 80043da:	609a      	str	r2, [r3, #8]
 80043dc:	e00f      	b.n	80043fe <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0202 	bic.w	r2, r2, #2
 800440c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6899      	ldr	r1, [r3, #8]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	005a      	lsls	r2, r3, #1
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d01b      	beq.n	8004464 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800443a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800444a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6859      	ldr	r1, [r3, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	3b01      	subs	r3, #1
 8004458:	035a      	lsls	r2, r3, #13
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	605a      	str	r2, [r3, #4]
 8004462:	e007      	b.n	8004474 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004472:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004482:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	3b01      	subs	r3, #1
 8004490:	051a      	lsls	r2, r3, #20
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	430a      	orrs	r2, r1
 8004498:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80044a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6899      	ldr	r1, [r3, #8]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80044b6:	025a      	lsls	r2, r3, #9
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689a      	ldr	r2, [r3, #8]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6899      	ldr	r1, [r3, #8]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	029a      	lsls	r2, r3, #10
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	430a      	orrs	r2, r1
 80044e2:	609a      	str	r2, [r3, #8]
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	40012300 	.word	0x40012300
 80044f4:	0f000001 	.word	0x0f000001

080044f8 <__NVIC_SetPriorityGrouping>:
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f003 0307 	and.w	r3, r3, #7
 8004506:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004508:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <__NVIC_SetPriorityGrouping+0x40>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004514:	4013      	ands	r3, r2
 8004516:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004520:	4b06      	ldr	r3, [pc, #24]	; (800453c <__NVIC_SetPriorityGrouping+0x44>)
 8004522:	4313      	orrs	r3, r2
 8004524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004526:	4a04      	ldr	r2, [pc, #16]	; (8004538 <__NVIC_SetPriorityGrouping+0x40>)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	60d3      	str	r3, [r2, #12]
}
 800452c:	bf00      	nop
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	e000ed00 	.word	0xe000ed00
 800453c:	05fa0000 	.word	0x05fa0000

08004540 <__NVIC_GetPriorityGrouping>:
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004544:	4b04      	ldr	r3, [pc, #16]	; (8004558 <__NVIC_GetPriorityGrouping+0x18>)
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	0a1b      	lsrs	r3, r3, #8
 800454a:	f003 0307 	and.w	r3, r3, #7
}
 800454e:	4618      	mov	r0, r3
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	e000ed00 	.word	0xe000ed00

0800455c <__NVIC_EnableIRQ>:
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	4603      	mov	r3, r0
 8004564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800456a:	2b00      	cmp	r3, #0
 800456c:	db0b      	blt.n	8004586 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800456e:	79fb      	ldrb	r3, [r7, #7]
 8004570:	f003 021f 	and.w	r2, r3, #31
 8004574:	4907      	ldr	r1, [pc, #28]	; (8004594 <__NVIC_EnableIRQ+0x38>)
 8004576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457a:	095b      	lsrs	r3, r3, #5
 800457c:	2001      	movs	r0, #1
 800457e:	fa00 f202 	lsl.w	r2, r0, r2
 8004582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	e000e100 	.word	0xe000e100

08004598 <__NVIC_SetPriority>:
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	4603      	mov	r3, r0
 80045a0:	6039      	str	r1, [r7, #0]
 80045a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	db0a      	blt.n	80045c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	490c      	ldr	r1, [pc, #48]	; (80045e4 <__NVIC_SetPriority+0x4c>)
 80045b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b6:	0112      	lsls	r2, r2, #4
 80045b8:	b2d2      	uxtb	r2, r2
 80045ba:	440b      	add	r3, r1
 80045bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80045c0:	e00a      	b.n	80045d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	4908      	ldr	r1, [pc, #32]	; (80045e8 <__NVIC_SetPriority+0x50>)
 80045c8:	79fb      	ldrb	r3, [r7, #7]
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	3b04      	subs	r3, #4
 80045d0:	0112      	lsls	r2, r2, #4
 80045d2:	b2d2      	uxtb	r2, r2
 80045d4:	440b      	add	r3, r1
 80045d6:	761a      	strb	r2, [r3, #24]
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr
 80045e4:	e000e100 	.word	0xe000e100
 80045e8:	e000ed00 	.word	0xe000ed00

080045ec <NVIC_EncodePriority>:
{
 80045ec:	b480      	push	{r7}
 80045ee:	b089      	sub	sp, #36	; 0x24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	f1c3 0307 	rsb	r3, r3, #7
 8004606:	2b04      	cmp	r3, #4
 8004608:	bf28      	it	cs
 800460a:	2304      	movcs	r3, #4
 800460c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	3304      	adds	r3, #4
 8004612:	2b06      	cmp	r3, #6
 8004614:	d902      	bls.n	800461c <NVIC_EncodePriority+0x30>
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	3b03      	subs	r3, #3
 800461a:	e000      	b.n	800461e <NVIC_EncodePriority+0x32>
 800461c:	2300      	movs	r3, #0
 800461e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004620:	f04f 32ff 	mov.w	r2, #4294967295
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	fa02 f303 	lsl.w	r3, r2, r3
 800462a:	43da      	mvns	r2, r3
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	401a      	ands	r2, r3
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004634:	f04f 31ff 	mov.w	r1, #4294967295
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	fa01 f303 	lsl.w	r3, r1, r3
 800463e:	43d9      	mvns	r1, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004644:	4313      	orrs	r3, r2
}
 8004646:	4618      	mov	r0, r3
 8004648:	3724      	adds	r7, #36	; 0x24
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
	...

08004654 <SysTick_Config>:
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3b01      	subs	r3, #1
 8004660:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004664:	d301      	bcc.n	800466a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004666:	2301      	movs	r3, #1
 8004668:	e00f      	b.n	800468a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800466a:	4a0a      	ldr	r2, [pc, #40]	; (8004694 <SysTick_Config+0x40>)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3b01      	subs	r3, #1
 8004670:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004672:	210f      	movs	r1, #15
 8004674:	f04f 30ff 	mov.w	r0, #4294967295
 8004678:	f7ff ff8e 	bl	8004598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800467c:	4b05      	ldr	r3, [pc, #20]	; (8004694 <SysTick_Config+0x40>)
 800467e:	2200      	movs	r2, #0
 8004680:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004682:	4b04      	ldr	r3, [pc, #16]	; (8004694 <SysTick_Config+0x40>)
 8004684:	2207      	movs	r2, #7
 8004686:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	e000e010 	.word	0xe000e010

08004698 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f7ff ff29 	bl	80044f8 <__NVIC_SetPriorityGrouping>
}
 80046a6:	bf00      	nop
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b086      	sub	sp, #24
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	4603      	mov	r3, r0
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	607a      	str	r2, [r7, #4]
 80046ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80046bc:	2300      	movs	r3, #0
 80046be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046c0:	f7ff ff3e 	bl	8004540 <__NVIC_GetPriorityGrouping>
 80046c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	68b9      	ldr	r1, [r7, #8]
 80046ca:	6978      	ldr	r0, [r7, #20]
 80046cc:	f7ff ff8e 	bl	80045ec <NVIC_EncodePriority>
 80046d0:	4602      	mov	r2, r0
 80046d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046d6:	4611      	mov	r1, r2
 80046d8:	4618      	mov	r0, r3
 80046da:	f7ff ff5d 	bl	8004598 <__NVIC_SetPriority>
}
 80046de:	bf00      	nop
 80046e0:	3718      	adds	r7, #24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b082      	sub	sp, #8
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	4603      	mov	r3, r0
 80046ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff ff31 	bl	800455c <__NVIC_EnableIRQ>
}
 80046fa:	bf00      	nop
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b082      	sub	sp, #8
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7ff ffa2 	bl	8004654 <SysTick_Config>
 8004710:	4603      	mov	r3, r0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
	...

0800471c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e054      	b.n	80047d8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	7f5b      	ldrb	r3, [r3, #29]
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	d105      	bne.n	8004744 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7fd fd1c 	bl	800217c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	791b      	ldrb	r3, [r3, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10c      	bne.n	800476c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a22      	ldr	r2, [pc, #136]	; (80047e0 <HAL_CRC_Init+0xc4>)
 8004758:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0218 	bic.w	r2, r2, #24
 8004768:	609a      	str	r2, [r3, #8]
 800476a:	e00c      	b.n	8004786 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6899      	ldr	r1, [r3, #8]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	461a      	mov	r2, r3
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f834 	bl	80047e4 <HAL_CRCEx_Polynomial_Set>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e028      	b.n	80047d8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	795b      	ldrb	r3, [r3, #5]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d105      	bne.n	800479a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f04f 32ff 	mov.w	r2, #4294967295
 8004796:	611a      	str	r2, [r3, #16]
 8004798:	e004      	b.n	80047a4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6912      	ldr	r2, [r2, #16]
 80047a2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	695a      	ldr	r2, [r3, #20]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	699a      	ldr	r2, [r3, #24]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	04c11db7 	.word	0x04c11db7

080047e4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047f0:	2300      	movs	r3, #0
 80047f2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80047f4:	231f      	movs	r3, #31
 80047f6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80047f8:	bf00      	nop
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1e5a      	subs	r2, r3, #1
 80047fe:	613a      	str	r2, [r7, #16]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d009      	beq.n	8004818 <HAL_CRCEx_Polynomial_Set+0x34>
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	f003 031f 	and.w	r3, r3, #31
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	fa22 f303 	lsr.w	r3, r2, r3
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	2b00      	cmp	r3, #0
 8004816:	d0f0      	beq.n	80047fa <HAL_CRCEx_Polynomial_Set+0x16>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b18      	cmp	r3, #24
 800481c:	d846      	bhi.n	80048ac <HAL_CRCEx_Polynomial_Set+0xc8>
 800481e:	a201      	add	r2, pc, #4	; (adr r2, 8004824 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004824:	080048b3 	.word	0x080048b3
 8004828:	080048ad 	.word	0x080048ad
 800482c:	080048ad 	.word	0x080048ad
 8004830:	080048ad 	.word	0x080048ad
 8004834:	080048ad 	.word	0x080048ad
 8004838:	080048ad 	.word	0x080048ad
 800483c:	080048ad 	.word	0x080048ad
 8004840:	080048ad 	.word	0x080048ad
 8004844:	080048a1 	.word	0x080048a1
 8004848:	080048ad 	.word	0x080048ad
 800484c:	080048ad 	.word	0x080048ad
 8004850:	080048ad 	.word	0x080048ad
 8004854:	080048ad 	.word	0x080048ad
 8004858:	080048ad 	.word	0x080048ad
 800485c:	080048ad 	.word	0x080048ad
 8004860:	080048ad 	.word	0x080048ad
 8004864:	08004895 	.word	0x08004895
 8004868:	080048ad 	.word	0x080048ad
 800486c:	080048ad 	.word	0x080048ad
 8004870:	080048ad 	.word	0x080048ad
 8004874:	080048ad 	.word	0x080048ad
 8004878:	080048ad 	.word	0x080048ad
 800487c:	080048ad 	.word	0x080048ad
 8004880:	080048ad 	.word	0x080048ad
 8004884:	08004889 	.word	0x08004889
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	2b06      	cmp	r3, #6
 800488c:	d913      	bls.n	80048b6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004892:	e010      	b.n	80048b6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	2b07      	cmp	r3, #7
 8004898:	d90f      	bls.n	80048ba <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800489e:	e00c      	b.n	80048ba <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	2b0f      	cmp	r3, #15
 80048a4:	d90b      	bls.n	80048be <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80048aa:	e008      	b.n	80048be <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	75fb      	strb	r3, [r7, #23]
      break;
 80048b0:	e006      	b.n	80048c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80048b2:	bf00      	nop
 80048b4:	e004      	b.n	80048c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80048b6:	bf00      	nop
 80048b8:	e002      	b.n	80048c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80048ba:	bf00      	nop
 80048bc:	e000      	b.n	80048c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80048be:	bf00      	nop
  }
  if (status == HAL_OK)
 80048c0:	7dfb      	ldrb	r3, [r7, #23]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10d      	bne.n	80048e2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f023 0118 	bic.w	r1, r3, #24
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	430a      	orrs	r2, r1
 80048e0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80048e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	371c      	adds	r7, #28
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80048fc:	f7ff fb44 	bl	8003f88 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e099      	b.n	8004a40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 0201 	bic.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800492c:	e00f      	b.n	800494e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800492e:	f7ff fb2b 	bl	8003f88 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b05      	cmp	r3, #5
 800493a:	d908      	bls.n	800494e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2220      	movs	r2, #32
 8004940:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2203      	movs	r2, #3
 8004946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e078      	b.n	8004a40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1e8      	bne.n	800492e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	4b38      	ldr	r3, [pc, #224]	; (8004a48 <HAL_DMA_Init+0x158>)
 8004968:	4013      	ands	r3, r2
 800496a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800497a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004986:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004992:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	4313      	orrs	r3, r2
 800499e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d107      	bne.n	80049b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b0:	4313      	orrs	r3, r2
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f023 0307 	bic.w	r3, r3, #7
 80049ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	2b04      	cmp	r3, #4
 80049e0:	d117      	bne.n	8004a12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00e      	beq.n	8004a12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 fb03 	bl	8005000 <DMA_CheckFifoParam>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d008      	beq.n	8004a12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2240      	movs	r2, #64	; 0x40
 8004a04:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e016      	b.n	8004a40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 faba 	bl	8004f94 <DMA_CalcBaseAndBitshift>
 8004a20:	4603      	mov	r3, r0
 8004a22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a28:	223f      	movs	r2, #63	; 0x3f
 8004a2a:	409a      	lsls	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3718      	adds	r7, #24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	f010803f 	.word	0xf010803f

08004a4c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e050      	b.n	8004b00 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d101      	bne.n	8004a6e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	e048      	b.n	8004b00 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0201 	bic.w	r2, r2, #1
 8004a7c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2200      	movs	r2, #0
 8004a94:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2221      	movs	r2, #33	; 0x21
 8004aac:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 fa70 	bl	8004f94 <DMA_CalcBaseAndBitshift>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004abc:	223f      	movs	r2, #63	; 0x3f
 8004abe:	409a      	lsls	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
 8004b14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d101      	bne.n	8004b2e <HAL_DMA_Start_IT+0x26>
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	e048      	b.n	8004bc0 <HAL_DMA_Start_IT+0xb8>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d137      	bne.n	8004bb2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2202      	movs	r2, #2
 8004b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	68b9      	ldr	r1, [r7, #8]
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f000 f9ee 	bl	8004f38 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b60:	223f      	movs	r2, #63	; 0x3f
 8004b62:	409a      	lsls	r2, r3
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f042 0216 	orr.w	r2, r2, #22
 8004b76:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	695a      	ldr	r2, [r3, #20]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b86:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d007      	beq.n	8004ba0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f042 0208 	orr.w	r2, r2, #8
 8004b9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f042 0201 	orr.w	r2, r2, #1
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	e005      	b.n	8004bbe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004bba:	2302      	movs	r3, #2
 8004bbc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3718      	adds	r7, #24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d004      	beq.n	8004be6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2280      	movs	r2, #128	; 0x80
 8004be0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e00c      	b.n	8004c00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2205      	movs	r2, #5
 8004bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 0201 	bic.w	r2, r2, #1
 8004bfc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004c14:	2300      	movs	r3, #0
 8004c16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004c18:	4b92      	ldr	r3, [pc, #584]	; (8004e64 <HAL_DMA_IRQHandler+0x258>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a92      	ldr	r2, [pc, #584]	; (8004e68 <HAL_DMA_IRQHandler+0x25c>)
 8004c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c22:	0a9b      	lsrs	r3, r3, #10
 8004c24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c36:	2208      	movs	r2, #8
 8004c38:	409a      	lsls	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d01a      	beq.n	8004c78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d013      	beq.n	8004c78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0204 	bic.w	r2, r2, #4
 8004c5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c64:	2208      	movs	r2, #8
 8004c66:	409a      	lsls	r2, r3
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c70:	f043 0201 	orr.w	r2, r3, #1
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	409a      	lsls	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4013      	ands	r3, r2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d012      	beq.n	8004cae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00b      	beq.n	8004cae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	409a      	lsls	r2, r3
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca6:	f043 0202 	orr.w	r2, r3, #2
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb2:	2204      	movs	r2, #4
 8004cb4:	409a      	lsls	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	4013      	ands	r3, r2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d012      	beq.n	8004ce4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00b      	beq.n	8004ce4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cd0:	2204      	movs	r2, #4
 8004cd2:	409a      	lsls	r2, r3
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cdc:	f043 0204 	orr.w	r2, r3, #4
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce8:	2210      	movs	r2, #16
 8004cea:	409a      	lsls	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4013      	ands	r3, r2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d043      	beq.n	8004d7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0308 	and.w	r3, r3, #8
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d03c      	beq.n	8004d7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d06:	2210      	movs	r2, #16
 8004d08:	409a      	lsls	r2, r3
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d018      	beq.n	8004d4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d108      	bne.n	8004d3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d024      	beq.n	8004d7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	4798      	blx	r3
 8004d3a:	e01f      	b.n	8004d7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d01b      	beq.n	8004d7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	4798      	blx	r3
 8004d4c:	e016      	b.n	8004d7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d107      	bne.n	8004d6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 0208 	bic.w	r2, r2, #8
 8004d6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d80:	2220      	movs	r2, #32
 8004d82:	409a      	lsls	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4013      	ands	r3, r2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 808e 	beq.w	8004eaa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0310 	and.w	r3, r3, #16
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 8086 	beq.w	8004eaa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da2:	2220      	movs	r2, #32
 8004da4:	409a      	lsls	r2, r3
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b05      	cmp	r3, #5
 8004db4:	d136      	bne.n	8004e24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 0216 	bic.w	r2, r2, #22
 8004dc4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	695a      	ldr	r2, [r3, #20]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dd4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d103      	bne.n	8004de6 <HAL_DMA_IRQHandler+0x1da>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d007      	beq.n	8004df6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 0208 	bic.w	r2, r2, #8
 8004df4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dfa:	223f      	movs	r2, #63	; 0x3f
 8004dfc:	409a      	lsls	r2, r3
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d07d      	beq.n	8004f16 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	4798      	blx	r3
        }
        return;
 8004e22:	e078      	b.n	8004f16 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d01c      	beq.n	8004e6c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d108      	bne.n	8004e52 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d030      	beq.n	8004eaa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	4798      	blx	r3
 8004e50:	e02b      	b.n	8004eaa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d027      	beq.n	8004eaa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	4798      	blx	r3
 8004e62:	e022      	b.n	8004eaa <HAL_DMA_IRQHandler+0x29e>
 8004e64:	20000004 	.word	0x20000004
 8004e68:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10f      	bne.n	8004e9a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 0210 	bic.w	r2, r2, #16
 8004e88:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d032      	beq.n	8004f18 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d022      	beq.n	8004f04 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2205      	movs	r2, #5
 8004ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 0201 	bic.w	r2, r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	60bb      	str	r3, [r7, #8]
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d307      	bcc.n	8004ef2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1f2      	bne.n	8004ed6 <HAL_DMA_IRQHandler+0x2ca>
 8004ef0:	e000      	b.n	8004ef4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004ef2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d005      	beq.n	8004f18 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	4798      	blx	r3
 8004f14:	e000      	b.n	8004f18 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004f16:	bf00      	nop
    }
  }
}
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop

08004f20 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
 8004f44:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f54:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	2b40      	cmp	r3, #64	; 0x40
 8004f64:	d108      	bne.n	8004f78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004f76:	e007      	b.n	8004f88 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	60da      	str	r2, [r3, #12]
}
 8004f88:	bf00      	nop
 8004f8a:	3714      	adds	r7, #20
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	3b10      	subs	r3, #16
 8004fa4:	4a13      	ldr	r2, [pc, #76]	; (8004ff4 <DMA_CalcBaseAndBitshift+0x60>)
 8004fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8004faa:	091b      	lsrs	r3, r3, #4
 8004fac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004fae:	4a12      	ldr	r2, [pc, #72]	; (8004ff8 <DMA_CalcBaseAndBitshift+0x64>)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2b03      	cmp	r3, #3
 8004fc0:	d908      	bls.n	8004fd4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	4b0c      	ldr	r3, [pc, #48]	; (8004ffc <DMA_CalcBaseAndBitshift+0x68>)
 8004fca:	4013      	ands	r3, r2
 8004fcc:	1d1a      	adds	r2, r3, #4
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	659a      	str	r2, [r3, #88]	; 0x58
 8004fd2:	e006      	b.n	8004fe2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	461a      	mov	r2, r3
 8004fda:	4b08      	ldr	r3, [pc, #32]	; (8004ffc <DMA_CalcBaseAndBitshift+0x68>)
 8004fdc:	4013      	ands	r3, r2
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	aaaaaaab 	.word	0xaaaaaaab
 8004ff8:	08013a50 	.word	0x08013a50
 8004ffc:	fffffc00 	.word	0xfffffc00

08005000 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005008:	2300      	movs	r3, #0
 800500a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005010:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d11f      	bne.n	800505a <DMA_CheckFifoParam+0x5a>
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	2b03      	cmp	r3, #3
 800501e:	d856      	bhi.n	80050ce <DMA_CheckFifoParam+0xce>
 8005020:	a201      	add	r2, pc, #4	; (adr r2, 8005028 <DMA_CheckFifoParam+0x28>)
 8005022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005026:	bf00      	nop
 8005028:	08005039 	.word	0x08005039
 800502c:	0800504b 	.word	0x0800504b
 8005030:	08005039 	.word	0x08005039
 8005034:	080050cf 	.word	0x080050cf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d046      	beq.n	80050d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005048:	e043      	b.n	80050d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005052:	d140      	bne.n	80050d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005058:	e03d      	b.n	80050d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005062:	d121      	bne.n	80050a8 <DMA_CheckFifoParam+0xa8>
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	2b03      	cmp	r3, #3
 8005068:	d837      	bhi.n	80050da <DMA_CheckFifoParam+0xda>
 800506a:	a201      	add	r2, pc, #4	; (adr r2, 8005070 <DMA_CheckFifoParam+0x70>)
 800506c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005070:	08005081 	.word	0x08005081
 8005074:	08005087 	.word	0x08005087
 8005078:	08005081 	.word	0x08005081
 800507c:	08005099 	.word	0x08005099
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	73fb      	strb	r3, [r7, #15]
      break;
 8005084:	e030      	b.n	80050e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d025      	beq.n	80050de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005096:	e022      	b.n	80050de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80050a0:	d11f      	bne.n	80050e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80050a6:	e01c      	b.n	80050e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d903      	bls.n	80050b6 <DMA_CheckFifoParam+0xb6>
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2b03      	cmp	r3, #3
 80050b2:	d003      	beq.n	80050bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80050b4:	e018      	b.n	80050e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	73fb      	strb	r3, [r7, #15]
      break;
 80050ba:	e015      	b.n	80050e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00e      	beq.n	80050e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	73fb      	strb	r3, [r7, #15]
      break;
 80050cc:	e00b      	b.n	80050e6 <DMA_CheckFifoParam+0xe6>
      break;
 80050ce:	bf00      	nop
 80050d0:	e00a      	b.n	80050e8 <DMA_CheckFifoParam+0xe8>
      break;
 80050d2:	bf00      	nop
 80050d4:	e008      	b.n	80050e8 <DMA_CheckFifoParam+0xe8>
      break;
 80050d6:	bf00      	nop
 80050d8:	e006      	b.n	80050e8 <DMA_CheckFifoParam+0xe8>
      break;
 80050da:	bf00      	nop
 80050dc:	e004      	b.n	80050e8 <DMA_CheckFifoParam+0xe8>
      break;
 80050de:	bf00      	nop
 80050e0:	e002      	b.n	80050e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80050e2:	bf00      	nop
 80050e4:	e000      	b.n	80050e8 <DMA_CheckFifoParam+0xe8>
      break;
 80050e6:	bf00      	nop
    }
  } 
  
  return status; 
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop

080050f8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e039      	b.n	800517e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d106      	bne.n	8005124 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7fd f84c 	bl	80021bc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685a      	ldr	r2, [r3, #4]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	430a      	orrs	r2, r1
 8005140:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005148:	f023 0107 	bic.w	r1, r3, #7
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800515e:	4b0a      	ldr	r3, [pc, #40]	; (8005188 <HAL_DMA2D_Init+0x90>)
 8005160:	4013      	ands	r3, r2
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	68d1      	ldr	r1, [r2, #12]
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	6812      	ldr	r2, [r2, #0]
 800516a:	430b      	orrs	r3, r1
 800516c:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3708      	adds	r7, #8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	ffffc000 	.word	0xffffc000

0800518c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af02      	add	r7, sp, #8
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
 8005198:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d101      	bne.n	80051a8 <HAL_DMA2D_Start+0x1c>
 80051a4:	2302      	movs	r3, #2
 80051a6:	e018      	b.n	80051da <HAL_DMA2D_Start+0x4e>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2202      	movs	r2, #2
 80051b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	68b9      	ldr	r1, [r7, #8]
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f000 fa98 	bl	80056f8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f042 0201 	orr.w	r2, r2, #1
 80051d6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b086      	sub	sp, #24
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
 80051ea:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80051ec:	2300      	movs	r3, #0
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d056      	beq.n	80052ac <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80051fe:	f7fe fec3 	bl	8003f88 <HAL_GetTick>
 8005202:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005204:	e04b      	b.n	800529e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005214:	2b00      	cmp	r3, #0
 8005216:	d023      	beq.n	8005260 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f003 0320 	and.w	r3, r3, #32
 800521e:	2b00      	cmp	r3, #0
 8005220:	d005      	beq.n	800522e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005226:	f043 0202 	orr.w	r2, r3, #2
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	2b00      	cmp	r3, #0
 8005236:	d005      	beq.n	8005244 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800523c:	f043 0201 	orr.w	r2, r3, #1
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2221      	movs	r2, #33	; 0x21
 800524a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2204      	movs	r2, #4
 8005250:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e0a5      	b.n	80053ac <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005266:	d01a      	beq.n	800529e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005268:	f7fe fe8e 	bl	8003f88 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	429a      	cmp	r2, r3
 8005276:	d302      	bcc.n	800527e <HAL_DMA2D_PollForTransfer+0x9c>
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10f      	bne.n	800529e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005282:	f043 0220 	orr.w	r2, r3, #32
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2203      	movs	r2, #3
 800528e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e086      	b.n	80053ac <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f003 0302 	and.w	r3, r3, #2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d0ac      	beq.n	8005206 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	f003 0320 	and.w	r3, r3, #32
 80052b6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052be:	f003 0320 	and.w	r3, r3, #32
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d061      	beq.n	8005392 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80052ce:	f7fe fe5b 	bl	8003f88 <HAL_GetTick>
 80052d2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80052d4:	e056      	b.n	8005384 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d02e      	beq.n	8005346 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f003 0308 	and.w	r3, r3, #8
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d005      	beq.n	80052fe <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f6:	f043 0204 	orr.w	r2, r3, #4
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f003 0320 	and.w	r3, r3, #32
 8005304:	2b00      	cmp	r3, #0
 8005306:	d005      	beq.n	8005314 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530c:	f043 0202 	orr.w	r2, r3, #2
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b00      	cmp	r3, #0
 800531c:	d005      	beq.n	800532a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005322:	f043 0201 	orr.w	r2, r3, #1
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2229      	movs	r2, #41	; 0x29
 8005330:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2204      	movs	r2, #4
 8005336:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e032      	b.n	80053ac <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534c:	d01a      	beq.n	8005384 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800534e:	f7fe fe1b 	bl	8003f88 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	429a      	cmp	r2, r3
 800535c:	d302      	bcc.n	8005364 <HAL_DMA2D_PollForTransfer+0x182>
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10f      	bne.n	8005384 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005368:	f043 0220 	orr.w	r2, r3, #32
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2203      	movs	r2, #3
 8005374:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e013      	b.n	80053ac <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f003 0310 	and.w	r3, r3, #16
 800538e:	2b00      	cmp	r3, #0
 8005390:	d0a1      	beq.n	80052d6 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2212      	movs	r2, #18
 8005398:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3718      	adds	r7, #24
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d026      	beq.n	8005424 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d021      	beq.n	8005424 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053ee:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f4:	f043 0201 	orr.w	r2, r3, #1
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2201      	movs	r2, #1
 8005402:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2204      	movs	r2, #4
 8005408:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f003 0320 	and.w	r3, r3, #32
 800542a:	2b00      	cmp	r3, #0
 800542c:	d026      	beq.n	800547c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d021      	beq.n	800547c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005446:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2220      	movs	r2, #32
 800544e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005454:	f043 0202 	orr.w	r2, r3, #2
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2204      	movs	r2, #4
 8005460:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d003      	beq.n	800547c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f003 0308 	and.w	r3, r3, #8
 8005482:	2b00      	cmp	r3, #0
 8005484:	d026      	beq.n	80054d4 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800548c:	2b00      	cmp	r3, #0
 800548e:	d021      	beq.n	80054d4 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800549e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2208      	movs	r2, #8
 80054a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ac:	f043 0204 	orr.w	r2, r3, #4
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2204      	movs	r2, #4
 80054b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d003      	beq.n	80054d4 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f003 0304 	and.w	r3, r3, #4
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d013      	beq.n	8005506 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00e      	beq.n	8005506 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054f6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2204      	movs	r2, #4
 80054fe:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 f853 	bl	80055ac <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d024      	beq.n	800555a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005516:	2b00      	cmp	r3, #0
 8005518:	d01f      	beq.n	800555a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005528:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2202      	movs	r2, #2
 8005530:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f003 0310 	and.w	r3, r3, #16
 8005560:	2b00      	cmp	r3, #0
 8005562:	d01f      	beq.n	80055a4 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d01a      	beq.n	80055a4 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800557c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2210      	movs	r2, #16
 8005584:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f80e 	bl	80055c0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80055a4:	bf00      	nop
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d101      	bne.n	80055f4 <HAL_DMA2D_ConfigLayer+0x20>
 80055f0:	2302      	movs	r3, #2
 80055f2:	e079      	b.n	80056e8 <HAL_DMA2D_ConfigLayer+0x114>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2202      	movs	r2, #2
 8005600:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	011b      	lsls	r3, r3, #4
 8005608:	3318      	adds	r3, #24
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	4413      	add	r3, r2
 800560e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	685a      	ldr	r2, [r3, #4]
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	041b      	lsls	r3, r3, #16
 800561a:	4313      	orrs	r3, r2
 800561c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800561e:	4b35      	ldr	r3, [pc, #212]	; (80056f4 <HAL_DMA2D_ConfigLayer+0x120>)
 8005620:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	2b0a      	cmp	r3, #10
 8005628:	d003      	beq.n	8005632 <HAL_DMA2D_ConfigLayer+0x5e>
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	2b09      	cmp	r3, #9
 8005630:	d107      	bne.n	8005642 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	4313      	orrs	r3, r2
 800563e:	617b      	str	r3, [r7, #20]
 8005640:	e005      	b.n	800564e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	061b      	lsls	r3, r3, #24
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	4313      	orrs	r3, r2
 800564c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d120      	bne.n	8005696 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	43db      	mvns	r3, r3
 800565e:	ea02 0103 	and.w	r1, r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	430a      	orrs	r2, r1
 800566a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	6812      	ldr	r2, [r2, #0]
 8005674:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	2b0a      	cmp	r3, #10
 800567c:	d003      	beq.n	8005686 <HAL_DMA2D_ConfigLayer+0xb2>
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	2b09      	cmp	r3, #9
 8005684:	d127      	bne.n	80056d6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	68da      	ldr	r2, [r3, #12]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005692:	629a      	str	r2, [r3, #40]	; 0x28
 8005694:	e01f      	b.n	80056d6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	69da      	ldr	r2, [r3, #28]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	43db      	mvns	r3, r3
 80056a0:	ea02 0103 	and.w	r1, r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	6812      	ldr	r2, [r2, #0]
 80056b6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	2b0a      	cmp	r3, #10
 80056be:	d003      	beq.n	80056c8 <HAL_DMA2D_ConfigLayer+0xf4>
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	2b09      	cmp	r3, #9
 80056c6:	d106      	bne.n	80056d6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	68da      	ldr	r2, [r3, #12]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80056d4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	371c      	adds	r7, #28
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	ff03000f 	.word	0xff03000f

080056f8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b08b      	sub	sp, #44	; 0x2c
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
 8005704:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800570c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	041a      	lsls	r2, r3, #16
 8005714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005716:	431a      	orrs	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	430a      	orrs	r2, r1
 800571e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005730:	d174      	bne.n	800581c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005738:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005740:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005748:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	b2db      	uxtb	r3, r3
 800574e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d108      	bne.n	800576a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	431a      	orrs	r2, r3
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	4313      	orrs	r3, r2
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	4313      	orrs	r3, r2
 8005766:	627b      	str	r3, [r7, #36]	; 0x24
 8005768:	e053      	b.n	8005812 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d106      	bne.n	8005780 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	4313      	orrs	r3, r2
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	4313      	orrs	r3, r2
 800577c:	627b      	str	r3, [r7, #36]	; 0x24
 800577e:	e048      	b.n	8005812 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	2b02      	cmp	r3, #2
 8005786:	d111      	bne.n	80057ac <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	0cdb      	lsrs	r3, r3, #19
 800578c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	0a9b      	lsrs	r3, r3, #10
 8005792:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	08db      	lsrs	r3, r3, #3
 8005798:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	02db      	lsls	r3, r3, #11
 80057a2:	4313      	orrs	r3, r2
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	627b      	str	r3, [r7, #36]	; 0x24
 80057aa:	e032      	b.n	8005812 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	2b03      	cmp	r3, #3
 80057b2:	d117      	bne.n	80057e4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	0fdb      	lsrs	r3, r3, #31
 80057b8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	0cdb      	lsrs	r3, r3, #19
 80057be:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	0adb      	lsrs	r3, r3, #11
 80057c4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	08db      	lsrs	r3, r3, #3
 80057ca:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	029b      	lsls	r3, r3, #10
 80057d4:	431a      	orrs	r2, r3
 80057d6:	6a3b      	ldr	r3, [r7, #32]
 80057d8:	03db      	lsls	r3, r3, #15
 80057da:	4313      	orrs	r3, r2
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	4313      	orrs	r3, r2
 80057e0:	627b      	str	r3, [r7, #36]	; 0x24
 80057e2:	e016      	b.n	8005812 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	0f1b      	lsrs	r3, r3, #28
 80057e8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	0d1b      	lsrs	r3, r3, #20
 80057ee:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	0b1b      	lsrs	r3, r3, #12
 80057f4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	091b      	lsrs	r3, r3, #4
 80057fa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	011a      	lsls	r2, r3, #4
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	021b      	lsls	r3, r3, #8
 8005804:	431a      	orrs	r2, r3
 8005806:	6a3b      	ldr	r3, [r7, #32]
 8005808:	031b      	lsls	r3, r3, #12
 800580a:	4313      	orrs	r3, r2
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	4313      	orrs	r3, r2
 8005810:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005818:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800581a:	e003      	b.n	8005824 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	60da      	str	r2, [r3, #12]
}
 8005824:	bf00      	nop
 8005826:	372c      	adds	r7, #44	; 0x2c
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005830:	b480      	push	{r7}
 8005832:	b089      	sub	sp, #36	; 0x24
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800583a:	2300      	movs	r3, #0
 800583c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800583e:	2300      	movs	r3, #0
 8005840:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005842:	2300      	movs	r3, #0
 8005844:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005846:	2300      	movs	r3, #0
 8005848:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800584a:	2300      	movs	r3, #0
 800584c:	61fb      	str	r3, [r7, #28]
 800584e:	e175      	b.n	8005b3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005850:	2201      	movs	r2, #1
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	fa02 f303 	lsl.w	r3, r2, r3
 8005858:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	4013      	ands	r3, r2
 8005862:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	429a      	cmp	r2, r3
 800586a:	f040 8164 	bne.w	8005b36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d00b      	beq.n	800588e <HAL_GPIO_Init+0x5e>
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	2b02      	cmp	r3, #2
 800587c:	d007      	beq.n	800588e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005882:	2b11      	cmp	r3, #17
 8005884:	d003      	beq.n	800588e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	2b12      	cmp	r3, #18
 800588c:	d130      	bne.n	80058f0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	005b      	lsls	r3, r3, #1
 8005898:	2203      	movs	r2, #3
 800589a:	fa02 f303 	lsl.w	r3, r2, r3
 800589e:	43db      	mvns	r3, r3
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	4013      	ands	r3, r2
 80058a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	68da      	ldr	r2, [r3, #12]
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	fa02 f303 	lsl.w	r3, r2, r3
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058c4:	2201      	movs	r2, #1
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	fa02 f303 	lsl.w	r3, r2, r3
 80058cc:	43db      	mvns	r3, r3
 80058ce:	69ba      	ldr	r2, [r7, #24]
 80058d0:	4013      	ands	r3, r2
 80058d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	091b      	lsrs	r3, r3, #4
 80058da:	f003 0201 	and.w	r2, r3, #1
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	fa02 f303 	lsl.w	r3, r2, r3
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	69ba      	ldr	r2, [r7, #24]
 80058ee:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	005b      	lsls	r3, r3, #1
 80058fa:	2203      	movs	r2, #3
 80058fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005900:	43db      	mvns	r3, r3
 8005902:	69ba      	ldr	r2, [r7, #24]
 8005904:	4013      	ands	r3, r2
 8005906:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	fa02 f303 	lsl.w	r3, r2, r3
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	4313      	orrs	r3, r2
 8005918:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	2b02      	cmp	r3, #2
 8005926:	d003      	beq.n	8005930 <HAL_GPIO_Init+0x100>
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	2b12      	cmp	r3, #18
 800592e:	d123      	bne.n	8005978 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	08da      	lsrs	r2, r3, #3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	3208      	adds	r2, #8
 8005938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800593c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	220f      	movs	r2, #15
 8005948:	fa02 f303 	lsl.w	r3, r2, r3
 800594c:	43db      	mvns	r3, r3
 800594e:	69ba      	ldr	r2, [r7, #24]
 8005950:	4013      	ands	r3, r2
 8005952:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	691a      	ldr	r2, [r3, #16]
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	f003 0307 	and.w	r3, r3, #7
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	fa02 f303 	lsl.w	r3, r2, r3
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	4313      	orrs	r3, r2
 8005968:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	08da      	lsrs	r2, r3, #3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	3208      	adds	r2, #8
 8005972:	69b9      	ldr	r1, [r7, #24]
 8005974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	005b      	lsls	r3, r3, #1
 8005982:	2203      	movs	r2, #3
 8005984:	fa02 f303 	lsl.w	r3, r2, r3
 8005988:	43db      	mvns	r3, r3
 800598a:	69ba      	ldr	r2, [r7, #24]
 800598c:	4013      	ands	r3, r2
 800598e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f003 0203 	and.w	r2, r3, #3
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	fa02 f303 	lsl.w	r3, r2, r3
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 80be 	beq.w	8005b36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059ba:	4b66      	ldr	r3, [pc, #408]	; (8005b54 <HAL_GPIO_Init+0x324>)
 80059bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059be:	4a65      	ldr	r2, [pc, #404]	; (8005b54 <HAL_GPIO_Init+0x324>)
 80059c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059c4:	6453      	str	r3, [r2, #68]	; 0x44
 80059c6:	4b63      	ldr	r3, [pc, #396]	; (8005b54 <HAL_GPIO_Init+0x324>)
 80059c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80059d2:	4a61      	ldr	r2, [pc, #388]	; (8005b58 <HAL_GPIO_Init+0x328>)
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	089b      	lsrs	r3, r3, #2
 80059d8:	3302      	adds	r3, #2
 80059da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059de:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	f003 0303 	and.w	r3, r3, #3
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	220f      	movs	r2, #15
 80059ea:	fa02 f303 	lsl.w	r3, r2, r3
 80059ee:	43db      	mvns	r3, r3
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	4013      	ands	r3, r2
 80059f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a58      	ldr	r2, [pc, #352]	; (8005b5c <HAL_GPIO_Init+0x32c>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d037      	beq.n	8005a6e <HAL_GPIO_Init+0x23e>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a57      	ldr	r2, [pc, #348]	; (8005b60 <HAL_GPIO_Init+0x330>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d031      	beq.n	8005a6a <HAL_GPIO_Init+0x23a>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a56      	ldr	r2, [pc, #344]	; (8005b64 <HAL_GPIO_Init+0x334>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d02b      	beq.n	8005a66 <HAL_GPIO_Init+0x236>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a55      	ldr	r2, [pc, #340]	; (8005b68 <HAL_GPIO_Init+0x338>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d025      	beq.n	8005a62 <HAL_GPIO_Init+0x232>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a54      	ldr	r2, [pc, #336]	; (8005b6c <HAL_GPIO_Init+0x33c>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d01f      	beq.n	8005a5e <HAL_GPIO_Init+0x22e>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a53      	ldr	r2, [pc, #332]	; (8005b70 <HAL_GPIO_Init+0x340>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d019      	beq.n	8005a5a <HAL_GPIO_Init+0x22a>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a52      	ldr	r2, [pc, #328]	; (8005b74 <HAL_GPIO_Init+0x344>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d013      	beq.n	8005a56 <HAL_GPIO_Init+0x226>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a51      	ldr	r2, [pc, #324]	; (8005b78 <HAL_GPIO_Init+0x348>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d00d      	beq.n	8005a52 <HAL_GPIO_Init+0x222>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a50      	ldr	r2, [pc, #320]	; (8005b7c <HAL_GPIO_Init+0x34c>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d007      	beq.n	8005a4e <HAL_GPIO_Init+0x21e>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a4f      	ldr	r2, [pc, #316]	; (8005b80 <HAL_GPIO_Init+0x350>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d101      	bne.n	8005a4a <HAL_GPIO_Init+0x21a>
 8005a46:	2309      	movs	r3, #9
 8005a48:	e012      	b.n	8005a70 <HAL_GPIO_Init+0x240>
 8005a4a:	230a      	movs	r3, #10
 8005a4c:	e010      	b.n	8005a70 <HAL_GPIO_Init+0x240>
 8005a4e:	2308      	movs	r3, #8
 8005a50:	e00e      	b.n	8005a70 <HAL_GPIO_Init+0x240>
 8005a52:	2307      	movs	r3, #7
 8005a54:	e00c      	b.n	8005a70 <HAL_GPIO_Init+0x240>
 8005a56:	2306      	movs	r3, #6
 8005a58:	e00a      	b.n	8005a70 <HAL_GPIO_Init+0x240>
 8005a5a:	2305      	movs	r3, #5
 8005a5c:	e008      	b.n	8005a70 <HAL_GPIO_Init+0x240>
 8005a5e:	2304      	movs	r3, #4
 8005a60:	e006      	b.n	8005a70 <HAL_GPIO_Init+0x240>
 8005a62:	2303      	movs	r3, #3
 8005a64:	e004      	b.n	8005a70 <HAL_GPIO_Init+0x240>
 8005a66:	2302      	movs	r3, #2
 8005a68:	e002      	b.n	8005a70 <HAL_GPIO_Init+0x240>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e000      	b.n	8005a70 <HAL_GPIO_Init+0x240>
 8005a6e:	2300      	movs	r3, #0
 8005a70:	69fa      	ldr	r2, [r7, #28]
 8005a72:	f002 0203 	and.w	r2, r2, #3
 8005a76:	0092      	lsls	r2, r2, #2
 8005a78:	4093      	lsls	r3, r2
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005a80:	4935      	ldr	r1, [pc, #212]	; (8005b58 <HAL_GPIO_Init+0x328>)
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	089b      	lsrs	r3, r3, #2
 8005a86:	3302      	adds	r3, #2
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a8e:	4b3d      	ldr	r3, [pc, #244]	; (8005b84 <HAL_GPIO_Init+0x354>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	43db      	mvns	r3, r3
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d003      	beq.n	8005ab2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ab2:	4a34      	ldr	r2, [pc, #208]	; (8005b84 <HAL_GPIO_Init+0x354>)
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005ab8:	4b32      	ldr	r3, [pc, #200]	; (8005b84 <HAL_GPIO_Init+0x354>)
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	43db      	mvns	r3, r3
 8005ac2:	69ba      	ldr	r2, [r7, #24]
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005adc:	4a29      	ldr	r2, [pc, #164]	; (8005b84 <HAL_GPIO_Init+0x354>)
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ae2:	4b28      	ldr	r3, [pc, #160]	; (8005b84 <HAL_GPIO_Init+0x354>)
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	43db      	mvns	r3, r3
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	4013      	ands	r3, r2
 8005af0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005afe:	69ba      	ldr	r2, [r7, #24]
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005b06:	4a1f      	ldr	r2, [pc, #124]	; (8005b84 <HAL_GPIO_Init+0x354>)
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b0c:	4b1d      	ldr	r3, [pc, #116]	; (8005b84 <HAL_GPIO_Init+0x354>)
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	43db      	mvns	r3, r3
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	4013      	ands	r3, r2
 8005b1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b30:	4a14      	ldr	r2, [pc, #80]	; (8005b84 <HAL_GPIO_Init+0x354>)
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	61fb      	str	r3, [r7, #28]
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	2b0f      	cmp	r3, #15
 8005b40:	f67f ae86 	bls.w	8005850 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005b44:	bf00      	nop
 8005b46:	bf00      	nop
 8005b48:	3724      	adds	r7, #36	; 0x24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	40023800 	.word	0x40023800
 8005b58:	40013800 	.word	0x40013800
 8005b5c:	40020000 	.word	0x40020000
 8005b60:	40020400 	.word	0x40020400
 8005b64:	40020800 	.word	0x40020800
 8005b68:	40020c00 	.word	0x40020c00
 8005b6c:	40021000 	.word	0x40021000
 8005b70:	40021400 	.word	0x40021400
 8005b74:	40021800 	.word	0x40021800
 8005b78:	40021c00 	.word	0x40021c00
 8005b7c:	40022000 	.word	0x40022000
 8005b80:	40022400 	.word	0x40022400
 8005b84:	40013c00 	.word	0x40013c00

08005b88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	460b      	mov	r3, r1
 8005b92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	691a      	ldr	r2, [r3, #16]
 8005b98:	887b      	ldrh	r3, [r7, #2]
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d002      	beq.n	8005ba6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	73fb      	strb	r3, [r7, #15]
 8005ba4:	e001      	b.n	8005baa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3714      	adds	r7, #20
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	807b      	strh	r3, [r7, #2]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005bc8:	787b      	ldrb	r3, [r7, #1]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005bce:	887a      	ldrh	r2, [r7, #2]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005bd4:	e003      	b.n	8005bde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005bd6:	887b      	ldrh	r3, [r7, #2]
 8005bd8:	041a      	lsls	r2, r3, #16
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	619a      	str	r2, [r3, #24]
}
 8005bde:	bf00      	nop
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
	...

08005bec <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e0bf      	b.n	8005d7e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d106      	bne.n	8005c18 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7fc faf8 	bl	8002208 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2202      	movs	r2, #2
 8005c1c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	699a      	ldr	r2, [r3, #24]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005c2e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6999      	ldr	r1, [r3, #24]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c44:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	430a      	orrs	r2, r1
 8005c52:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6899      	ldr	r1, [r3, #8]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	4b4a      	ldr	r3, [pc, #296]	; (8005d88 <HAL_LTDC_Init+0x19c>)
 8005c60:	400b      	ands	r3, r1
 8005c62:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	041b      	lsls	r3, r3, #16
 8005c6a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6899      	ldr	r1, [r3, #8]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	699a      	ldr	r2, [r3, #24]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	431a      	orrs	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68d9      	ldr	r1, [r3, #12]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	4b3e      	ldr	r3, [pc, #248]	; (8005d88 <HAL_LTDC_Init+0x19c>)
 8005c8e:	400b      	ands	r3, r1
 8005c90:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	69db      	ldr	r3, [r3, #28]
 8005c96:	041b      	lsls	r3, r3, #16
 8005c98:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68d9      	ldr	r1, [r3, #12]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a1a      	ldr	r2, [r3, #32]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	430a      	orrs	r2, r1
 8005cae:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6919      	ldr	r1, [r3, #16]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	4b33      	ldr	r3, [pc, #204]	; (8005d88 <HAL_LTDC_Init+0x19c>)
 8005cbc:	400b      	ands	r3, r1
 8005cbe:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc4:	041b      	lsls	r3, r3, #16
 8005cc6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6919      	ldr	r1, [r3, #16]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	431a      	orrs	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	6959      	ldr	r1, [r3, #20]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	4b27      	ldr	r3, [pc, #156]	; (8005d88 <HAL_LTDC_Init+0x19c>)
 8005cea:	400b      	ands	r3, r1
 8005cec:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf2:	041b      	lsls	r3, r3, #16
 8005cf4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	6959      	ldr	r1, [r3, #20]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	431a      	orrs	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d12:	021b      	lsls	r3, r3, #8
 8005d14:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005d1c:	041b      	lsls	r3, r3, #16
 8005d1e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005d2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005d42:	431a      	orrs	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f042 0206 	orr.w	r2, r2, #6
 8005d5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	699a      	ldr	r2, [r3, #24]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 0201 	orr.w	r2, r2, #1
 8005d6a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	f000f800 	.word	0xf000f800

08005d8c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f003 0304 	and.w	r3, r3, #4
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d023      	beq.n	8005df6 <HAL_LTDC_IRQHandler+0x6a>
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	f003 0304 	and.w	r3, r3, #4
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d01e      	beq.n	8005df6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 0204 	bic.w	r2, r2, #4
 8005dc6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2204      	movs	r2, #4
 8005dce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005dd6:	f043 0201 	orr.w	r2, r3, #1
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2204      	movs	r2, #4
 8005de4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f86f 	bl	8005ed4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f003 0302 	and.w	r3, r3, #2
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d023      	beq.n	8005e48 <HAL_LTDC_IRQHandler+0xbc>
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f003 0302 	and.w	r3, r3, #2
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d01e      	beq.n	8005e48 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 0202 	bic.w	r2, r2, #2
 8005e18:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2202      	movs	r2, #2
 8005e20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e28:	f043 0202 	orr.w	r2, r3, #2
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2204      	movs	r2, #4
 8005e36:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f846 	bl	8005ed4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d01b      	beq.n	8005e8a <HAL_LTDC_IRQHandler+0xfe>
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d016      	beq.n	8005e8a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 0201 	bic.w	r2, r2, #1
 8005e6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2201      	movs	r2, #1
 8005e72:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 f82f 	bl	8005ee8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f003 0308 	and.w	r3, r3, #8
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d01b      	beq.n	8005ecc <HAL_LTDC_IRQHandler+0x140>
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f003 0308 	and.w	r3, r3, #8
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d016      	beq.n	8005ecc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 0208 	bic.w	r2, r2, #8
 8005eac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2208      	movs	r2, #8
 8005eb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f818 	bl	8005efc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005ecc:	bf00      	nop
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005f10:	b5b0      	push	{r4, r5, r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d101      	bne.n	8005f2a <HAL_LTDC_ConfigLayer+0x1a>
 8005f26:	2302      	movs	r3, #2
 8005f28:	e02c      	b.n	8005f84 <HAL_LTDC_ConfigLayer+0x74>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2202      	movs	r2, #2
 8005f36:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2134      	movs	r1, #52	; 0x34
 8005f40:	fb01 f303 	mul.w	r3, r1, r3
 8005f44:	4413      	add	r3, r2
 8005f46:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	4614      	mov	r4, r2
 8005f4e:	461d      	mov	r5, r3
 8005f50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f5c:	682b      	ldr	r3, [r5, #0]
 8005f5e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	68b9      	ldr	r1, [r7, #8]
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f000 f855 	bl	8006014 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bdb0      	pop	{r4, r5, r7, pc}

08005f8c <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d101      	bne.n	8005fa6 <HAL_LTDC_SetAlpha+0x1a>
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	e024      	b.n	8005ff0 <HAL_LTDC_SetAlpha+0x64>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2202      	movs	r2, #2
 8005fb2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2234      	movs	r2, #52	; 0x34
 8005fba:	fb02 f303 	mul.w	r3, r2, r3
 8005fbe:	3338      	adds	r3, #56	; 0x38
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	6979      	ldr	r1, [r7, #20]
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f000 f81f 	bl	8006014 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3718      	adds	r7, #24
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006006:	b2db      	uxtb	r3, r3
}
 8006008:	4618      	mov	r0, r3
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006014:	b480      	push	{r7}
 8006016:	b089      	sub	sp, #36	; 0x24
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	0c1b      	lsrs	r3, r3, #16
 800602c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006030:	4413      	add	r3, r2
 8006032:	041b      	lsls	r3, r3, #16
 8006034:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	461a      	mov	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	01db      	lsls	r3, r3, #7
 8006040:	4413      	add	r3, r2
 8006042:	3384      	adds	r3, #132	; 0x84
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	6812      	ldr	r2, [r2, #0]
 800604a:	4611      	mov	r1, r2
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	01d2      	lsls	r2, r2, #7
 8006050:	440a      	add	r2, r1
 8006052:	3284      	adds	r2, #132	; 0x84
 8006054:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006058:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	0c1b      	lsrs	r3, r3, #16
 8006066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800606a:	4413      	add	r3, r2
 800606c:	1c5a      	adds	r2, r3, #1
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4619      	mov	r1, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	01db      	lsls	r3, r3, #7
 8006078:	440b      	add	r3, r1
 800607a:	3384      	adds	r3, #132	; 0x84
 800607c:	4619      	mov	r1, r3
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	4313      	orrs	r3, r2
 8006082:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	68da      	ldr	r2, [r3, #12]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006092:	4413      	add	r3, r2
 8006094:	041b      	lsls	r3, r3, #16
 8006096:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	461a      	mov	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	01db      	lsls	r3, r3, #7
 80060a2:	4413      	add	r3, r2
 80060a4:	3384      	adds	r3, #132	; 0x84
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	6812      	ldr	r2, [r2, #0]
 80060ac:	4611      	mov	r1, r2
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	01d2      	lsls	r2, r2, #7
 80060b2:	440a      	add	r2, r1
 80060b4:	3284      	adds	r2, #132	; 0x84
 80060b6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80060ba:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	689a      	ldr	r2, [r3, #8]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060ca:	4413      	add	r3, r2
 80060cc:	1c5a      	adds	r2, r3, #1
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4619      	mov	r1, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	01db      	lsls	r3, r3, #7
 80060d8:	440b      	add	r3, r1
 80060da:	3384      	adds	r3, #132	; 0x84
 80060dc:	4619      	mov	r1, r3
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	461a      	mov	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	01db      	lsls	r3, r3, #7
 80060ee:	4413      	add	r3, r2
 80060f0:	3384      	adds	r3, #132	; 0x84
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	6812      	ldr	r2, [r2, #0]
 80060f8:	4611      	mov	r1, r2
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	01d2      	lsls	r2, r2, #7
 80060fe:	440a      	add	r2, r1
 8006100:	3284      	adds	r2, #132	; 0x84
 8006102:	f023 0307 	bic.w	r3, r3, #7
 8006106:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	461a      	mov	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	01db      	lsls	r3, r3, #7
 8006112:	4413      	add	r3, r2
 8006114:	3384      	adds	r3, #132	; 0x84
 8006116:	461a      	mov	r2, r3
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006124:	021b      	lsls	r3, r3, #8
 8006126:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800612e:	041b      	lsls	r3, r3, #16
 8006130:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	061b      	lsls	r3, r3, #24
 8006138:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	461a      	mov	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	01db      	lsls	r3, r3, #7
 8006144:	4413      	add	r3, r2
 8006146:	3384      	adds	r3, #132	; 0x84
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	461a      	mov	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	01db      	lsls	r3, r3, #7
 8006154:	4413      	add	r3, r2
 8006156:	3384      	adds	r3, #132	; 0x84
 8006158:	461a      	mov	r2, r3
 800615a:	2300      	movs	r3, #0
 800615c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006164:	461a      	mov	r2, r3
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	431a      	orrs	r2, r3
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	431a      	orrs	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4619      	mov	r1, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	01db      	lsls	r3, r3, #7
 8006178:	440b      	add	r3, r1
 800617a:	3384      	adds	r3, #132	; 0x84
 800617c:	4619      	mov	r1, r3
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	4313      	orrs	r3, r2
 8006182:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	461a      	mov	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	01db      	lsls	r3, r3, #7
 800618e:	4413      	add	r3, r2
 8006190:	3384      	adds	r3, #132	; 0x84
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	6812      	ldr	r2, [r2, #0]
 8006198:	4611      	mov	r1, r2
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	01d2      	lsls	r2, r2, #7
 800619e:	440a      	add	r2, r1
 80061a0:	3284      	adds	r2, #132	; 0x84
 80061a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80061a6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	461a      	mov	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	01db      	lsls	r3, r3, #7
 80061b2:	4413      	add	r3, r2
 80061b4:	3384      	adds	r3, #132	; 0x84
 80061b6:	461a      	mov	r2, r3
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	01db      	lsls	r3, r3, #7
 80061c8:	4413      	add	r3, r2
 80061ca:	3384      	adds	r3, #132	; 0x84
 80061cc:	69da      	ldr	r2, [r3, #28]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4619      	mov	r1, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	01db      	lsls	r3, r3, #7
 80061d8:	440b      	add	r3, r1
 80061da:	3384      	adds	r3, #132	; 0x84
 80061dc:	4619      	mov	r1, r3
 80061de:	4b58      	ldr	r3, [pc, #352]	; (8006340 <LTDC_SetConfig+0x32c>)
 80061e0:	4013      	ands	r3, r2
 80061e2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	69da      	ldr	r2, [r3, #28]
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	68f9      	ldr	r1, [r7, #12]
 80061ee:	6809      	ldr	r1, [r1, #0]
 80061f0:	4608      	mov	r0, r1
 80061f2:	6879      	ldr	r1, [r7, #4]
 80061f4:	01c9      	lsls	r1, r1, #7
 80061f6:	4401      	add	r1, r0
 80061f8:	3184      	adds	r1, #132	; 0x84
 80061fa:	4313      	orrs	r3, r2
 80061fc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	461a      	mov	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	01db      	lsls	r3, r3, #7
 8006208:	4413      	add	r3, r2
 800620a:	3384      	adds	r3, #132	; 0x84
 800620c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	461a      	mov	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	01db      	lsls	r3, r3, #7
 8006218:	4413      	add	r3, r2
 800621a:	3384      	adds	r3, #132	; 0x84
 800621c:	461a      	mov	r2, r3
 800621e:	2300      	movs	r3, #0
 8006220:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	461a      	mov	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	01db      	lsls	r3, r3, #7
 800622c:	4413      	add	r3, r2
 800622e:	3384      	adds	r3, #132	; 0x84
 8006230:	461a      	mov	r2, r3
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006236:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d102      	bne.n	8006246 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006240:	2304      	movs	r3, #4
 8006242:	61fb      	str	r3, [r7, #28]
 8006244:	e01b      	b.n	800627e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d102      	bne.n	8006254 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800624e:	2303      	movs	r3, #3
 8006250:	61fb      	str	r3, [r7, #28]
 8006252:	e014      	b.n	800627e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	2b04      	cmp	r3, #4
 800625a:	d00b      	beq.n	8006274 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006260:	2b02      	cmp	r3, #2
 8006262:	d007      	beq.n	8006274 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006268:	2b03      	cmp	r3, #3
 800626a:	d003      	beq.n	8006274 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006270:	2b07      	cmp	r3, #7
 8006272:	d102      	bne.n	800627a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006274:	2302      	movs	r3, #2
 8006276:	61fb      	str	r3, [r7, #28]
 8006278:	e001      	b.n	800627e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800627a:	2301      	movs	r3, #1
 800627c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	461a      	mov	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	01db      	lsls	r3, r3, #7
 8006288:	4413      	add	r3, r2
 800628a:	3384      	adds	r3, #132	; 0x84
 800628c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	6812      	ldr	r2, [r2, #0]
 8006292:	4611      	mov	r1, r2
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	01d2      	lsls	r2, r2, #7
 8006298:	440a      	add	r2, r1
 800629a:	3284      	adds	r2, #132	; 0x84
 800629c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80062a0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a6:	69fa      	ldr	r2, [r7, #28]
 80062a8:	fb02 f303 	mul.w	r3, r2, r3
 80062ac:	041a      	lsls	r2, r3, #16
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	6859      	ldr	r1, [r3, #4]
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	1acb      	subs	r3, r1, r3
 80062b8:	69f9      	ldr	r1, [r7, #28]
 80062ba:	fb01 f303 	mul.w	r3, r1, r3
 80062be:	3303      	adds	r3, #3
 80062c0:	68f9      	ldr	r1, [r7, #12]
 80062c2:	6809      	ldr	r1, [r1, #0]
 80062c4:	4608      	mov	r0, r1
 80062c6:	6879      	ldr	r1, [r7, #4]
 80062c8:	01c9      	lsls	r1, r1, #7
 80062ca:	4401      	add	r1, r0
 80062cc:	3184      	adds	r1, #132	; 0x84
 80062ce:	4313      	orrs	r3, r2
 80062d0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	461a      	mov	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	01db      	lsls	r3, r3, #7
 80062dc:	4413      	add	r3, r2
 80062de:	3384      	adds	r3, #132	; 0x84
 80062e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4619      	mov	r1, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	01db      	lsls	r3, r3, #7
 80062ec:	440b      	add	r3, r1
 80062ee:	3384      	adds	r3, #132	; 0x84
 80062f0:	4619      	mov	r1, r3
 80062f2:	4b14      	ldr	r3, [pc, #80]	; (8006344 <LTDC_SetConfig+0x330>)
 80062f4:	4013      	ands	r3, r2
 80062f6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	461a      	mov	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	01db      	lsls	r3, r3, #7
 8006302:	4413      	add	r3, r2
 8006304:	3384      	adds	r3, #132	; 0x84
 8006306:	461a      	mov	r2, r3
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	461a      	mov	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	01db      	lsls	r3, r3, #7
 8006318:	4413      	add	r3, r2
 800631a:	3384      	adds	r3, #132	; 0x84
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	6812      	ldr	r2, [r2, #0]
 8006322:	4611      	mov	r1, r2
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	01d2      	lsls	r2, r2, #7
 8006328:	440a      	add	r2, r1
 800632a:	3284      	adds	r2, #132	; 0x84
 800632c:	f043 0301 	orr.w	r3, r3, #1
 8006330:	6013      	str	r3, [r2, #0]
}
 8006332:	bf00      	nop
 8006334:	3724      	adds	r7, #36	; 0x24
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	fffff8f8 	.word	0xfffff8f8
 8006344:	fffff800 	.word	0xfffff800

08006348 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006348:	b480      	push	{r7}
 800634a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800634c:	4b05      	ldr	r3, [pc, #20]	; (8006364 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a04      	ldr	r2, [pc, #16]	; (8006364 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006356:	6013      	str	r3, [r2, #0]
}
 8006358:	bf00      	nop
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	40007000 	.word	0x40007000

08006368 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800636e:	2300      	movs	r3, #0
 8006370:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006372:	4b23      	ldr	r3, [pc, #140]	; (8006400 <HAL_PWREx_EnableOverDrive+0x98>)
 8006374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006376:	4a22      	ldr	r2, [pc, #136]	; (8006400 <HAL_PWREx_EnableOverDrive+0x98>)
 8006378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800637c:	6413      	str	r3, [r2, #64]	; 0x40
 800637e:	4b20      	ldr	r3, [pc, #128]	; (8006400 <HAL_PWREx_EnableOverDrive+0x98>)
 8006380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006386:	603b      	str	r3, [r7, #0]
 8006388:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800638a:	4b1e      	ldr	r3, [pc, #120]	; (8006404 <HAL_PWREx_EnableOverDrive+0x9c>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a1d      	ldr	r2, [pc, #116]	; (8006404 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006394:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006396:	f7fd fdf7 	bl	8003f88 <HAL_GetTick>
 800639a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800639c:	e009      	b.n	80063b2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800639e:	f7fd fdf3 	bl	8003f88 <HAL_GetTick>
 80063a2:	4602      	mov	r2, r0
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063ac:	d901      	bls.n	80063b2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e022      	b.n	80063f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80063b2:	4b14      	ldr	r3, [pc, #80]	; (8006404 <HAL_PWREx_EnableOverDrive+0x9c>)
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063be:	d1ee      	bne.n	800639e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80063c0:	4b10      	ldr	r3, [pc, #64]	; (8006404 <HAL_PWREx_EnableOverDrive+0x9c>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a0f      	ldr	r2, [pc, #60]	; (8006404 <HAL_PWREx_EnableOverDrive+0x9c>)
 80063c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80063cc:	f7fd fddc 	bl	8003f88 <HAL_GetTick>
 80063d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80063d2:	e009      	b.n	80063e8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80063d4:	f7fd fdd8 	bl	8003f88 <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063e2:	d901      	bls.n	80063e8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e007      	b.n	80063f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80063e8:	4b06      	ldr	r3, [pc, #24]	; (8006404 <HAL_PWREx_EnableOverDrive+0x9c>)
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063f4:	d1ee      	bne.n	80063d4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3708      	adds	r7, #8
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	40023800 	.word	0x40023800
 8006404:	40007000 	.word	0x40007000

08006408 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b086      	sub	sp, #24
 800640c:	af02      	add	r7, sp, #8
 800640e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006410:	f7fd fdba 	bl	8003f88 <HAL_GetTick>
 8006414:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d101      	bne.n	8006420 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e067      	b.n	80064f0 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10b      	bne.n	8006444 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f7fb ffaf 	bl	8002398 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800643a:	f241 3188 	movw	r1, #5000	; 0x1388
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f85e 	bl	8006500 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	3b01      	subs	r3, #1
 8006454:	021a      	lsls	r2, r3, #8
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	430a      	orrs	r2, r1
 800645c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006462:	9300      	str	r3, [sp, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	2120      	movs	r1, #32
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f856 	bl	800651c <QSPI_WaitFlagStateUntilTimeout>
 8006470:	4603      	mov	r3, r0
 8006472:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006474:	7afb      	ldrb	r3, [r7, #11]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d135      	bne.n	80064e6 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	4b1d      	ldr	r3, [pc, #116]	; (80064f8 <HAL_QSPI_Init+0xf0>)
 8006482:	4013      	ands	r3, r2
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	6852      	ldr	r2, [r2, #4]
 8006488:	0611      	lsls	r1, r2, #24
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	68d2      	ldr	r2, [r2, #12]
 800648e:	4311      	orrs	r1, r2
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	69d2      	ldr	r2, [r2, #28]
 8006494:	4311      	orrs	r1, r2
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	6a12      	ldr	r2, [r2, #32]
 800649a:	4311      	orrs	r1, r2
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	6812      	ldr	r2, [r2, #0]
 80064a0:	430b      	orrs	r3, r1
 80064a2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	4b14      	ldr	r3, [pc, #80]	; (80064fc <HAL_QSPI_Init+0xf4>)
 80064ac:	4013      	ands	r3, r2
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	6912      	ldr	r2, [r2, #16]
 80064b2:	0411      	lsls	r1, r2, #16
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	6952      	ldr	r2, [r2, #20]
 80064b8:	4311      	orrs	r1, r2
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	6992      	ldr	r2, [r2, #24]
 80064be:	4311      	orrs	r1, r2
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	6812      	ldr	r2, [r2, #0]
 80064c4:	430b      	orrs	r3, r1
 80064c6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f042 0201 	orr.w	r2, r2, #1
 80064d6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2201      	movs	r2, #1
 80064e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80064ee:	7afb      	ldrb	r3, [r7, #11]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	00ffff2f 	.word	0x00ffff2f
 80064fc:	ffe0f8fe 	.word	0xffe0f8fe

08006500 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	683a      	ldr	r2, [r7, #0]
 800650e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	603b      	str	r3, [r7, #0]
 8006528:	4613      	mov	r3, r2
 800652a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800652c:	e01a      	b.n	8006564 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006534:	d016      	beq.n	8006564 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006536:	f7fd fd27 	bl	8003f88 <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	69ba      	ldr	r2, [r7, #24]
 8006542:	429a      	cmp	r2, r3
 8006544:	d302      	bcc.n	800654c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10b      	bne.n	8006564 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2204      	movs	r2, #4
 8006550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006558:	f043 0201 	orr.w	r2, r3, #1
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e00e      	b.n	8006582 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689a      	ldr	r2, [r3, #8]
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	4013      	ands	r3, r2
 800656e:	2b00      	cmp	r3, #0
 8006570:	bf14      	ite	ne
 8006572:	2301      	movne	r3, #1
 8006574:	2300      	moveq	r3, #0
 8006576:	b2db      	uxtb	r3, r3
 8006578:	461a      	mov	r2, r3
 800657a:	79fb      	ldrb	r3, [r7, #7]
 800657c:	429a      	cmp	r2, r3
 800657e:	d1d6      	bne.n	800652e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
	...

0800658c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b086      	sub	sp, #24
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006594:	2300      	movs	r3, #0
 8006596:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d101      	bne.n	80065a2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e291      	b.n	8006ac6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f000 8087 	beq.w	80066be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80065b0:	4b96      	ldr	r3, [pc, #600]	; (800680c <HAL_RCC_OscConfig+0x280>)
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f003 030c 	and.w	r3, r3, #12
 80065b8:	2b04      	cmp	r3, #4
 80065ba:	d00c      	beq.n	80065d6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065bc:	4b93      	ldr	r3, [pc, #588]	; (800680c <HAL_RCC_OscConfig+0x280>)
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f003 030c 	and.w	r3, r3, #12
 80065c4:	2b08      	cmp	r3, #8
 80065c6:	d112      	bne.n	80065ee <HAL_RCC_OscConfig+0x62>
 80065c8:	4b90      	ldr	r3, [pc, #576]	; (800680c <HAL_RCC_OscConfig+0x280>)
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065d4:	d10b      	bne.n	80065ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065d6:	4b8d      	ldr	r3, [pc, #564]	; (800680c <HAL_RCC_OscConfig+0x280>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d06c      	beq.n	80066bc <HAL_RCC_OscConfig+0x130>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d168      	bne.n	80066bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e26b      	b.n	8006ac6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065f6:	d106      	bne.n	8006606 <HAL_RCC_OscConfig+0x7a>
 80065f8:	4b84      	ldr	r3, [pc, #528]	; (800680c <HAL_RCC_OscConfig+0x280>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a83      	ldr	r2, [pc, #524]	; (800680c <HAL_RCC_OscConfig+0x280>)
 80065fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006602:	6013      	str	r3, [r2, #0]
 8006604:	e02e      	b.n	8006664 <HAL_RCC_OscConfig+0xd8>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10c      	bne.n	8006628 <HAL_RCC_OscConfig+0x9c>
 800660e:	4b7f      	ldr	r3, [pc, #508]	; (800680c <HAL_RCC_OscConfig+0x280>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a7e      	ldr	r2, [pc, #504]	; (800680c <HAL_RCC_OscConfig+0x280>)
 8006614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006618:	6013      	str	r3, [r2, #0]
 800661a:	4b7c      	ldr	r3, [pc, #496]	; (800680c <HAL_RCC_OscConfig+0x280>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a7b      	ldr	r2, [pc, #492]	; (800680c <HAL_RCC_OscConfig+0x280>)
 8006620:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006624:	6013      	str	r3, [r2, #0]
 8006626:	e01d      	b.n	8006664 <HAL_RCC_OscConfig+0xd8>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006630:	d10c      	bne.n	800664c <HAL_RCC_OscConfig+0xc0>
 8006632:	4b76      	ldr	r3, [pc, #472]	; (800680c <HAL_RCC_OscConfig+0x280>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a75      	ldr	r2, [pc, #468]	; (800680c <HAL_RCC_OscConfig+0x280>)
 8006638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800663c:	6013      	str	r3, [r2, #0]
 800663e:	4b73      	ldr	r3, [pc, #460]	; (800680c <HAL_RCC_OscConfig+0x280>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a72      	ldr	r2, [pc, #456]	; (800680c <HAL_RCC_OscConfig+0x280>)
 8006644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006648:	6013      	str	r3, [r2, #0]
 800664a:	e00b      	b.n	8006664 <HAL_RCC_OscConfig+0xd8>
 800664c:	4b6f      	ldr	r3, [pc, #444]	; (800680c <HAL_RCC_OscConfig+0x280>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a6e      	ldr	r2, [pc, #440]	; (800680c <HAL_RCC_OscConfig+0x280>)
 8006652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006656:	6013      	str	r3, [r2, #0]
 8006658:	4b6c      	ldr	r3, [pc, #432]	; (800680c <HAL_RCC_OscConfig+0x280>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a6b      	ldr	r2, [pc, #428]	; (800680c <HAL_RCC_OscConfig+0x280>)
 800665e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d013      	beq.n	8006694 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800666c:	f7fd fc8c 	bl	8003f88 <HAL_GetTick>
 8006670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006672:	e008      	b.n	8006686 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006674:	f7fd fc88 	bl	8003f88 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	2b64      	cmp	r3, #100	; 0x64
 8006680:	d901      	bls.n	8006686 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e21f      	b.n	8006ac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006686:	4b61      	ldr	r3, [pc, #388]	; (800680c <HAL_RCC_OscConfig+0x280>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d0f0      	beq.n	8006674 <HAL_RCC_OscConfig+0xe8>
 8006692:	e014      	b.n	80066be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006694:	f7fd fc78 	bl	8003f88 <HAL_GetTick>
 8006698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800669a:	e008      	b.n	80066ae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800669c:	f7fd fc74 	bl	8003f88 <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b64      	cmp	r3, #100	; 0x64
 80066a8:	d901      	bls.n	80066ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e20b      	b.n	8006ac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066ae:	4b57      	ldr	r3, [pc, #348]	; (800680c <HAL_RCC_OscConfig+0x280>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1f0      	bne.n	800669c <HAL_RCC_OscConfig+0x110>
 80066ba:	e000      	b.n	80066be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d069      	beq.n	800679e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80066ca:	4b50      	ldr	r3, [pc, #320]	; (800680c <HAL_RCC_OscConfig+0x280>)
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f003 030c 	and.w	r3, r3, #12
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00b      	beq.n	80066ee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066d6:	4b4d      	ldr	r3, [pc, #308]	; (800680c <HAL_RCC_OscConfig+0x280>)
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f003 030c 	and.w	r3, r3, #12
 80066de:	2b08      	cmp	r3, #8
 80066e0:	d11c      	bne.n	800671c <HAL_RCC_OscConfig+0x190>
 80066e2:	4b4a      	ldr	r3, [pc, #296]	; (800680c <HAL_RCC_OscConfig+0x280>)
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d116      	bne.n	800671c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066ee:	4b47      	ldr	r3, [pc, #284]	; (800680c <HAL_RCC_OscConfig+0x280>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d005      	beq.n	8006706 <HAL_RCC_OscConfig+0x17a>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d001      	beq.n	8006706 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e1df      	b.n	8006ac6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006706:	4b41      	ldr	r3, [pc, #260]	; (800680c <HAL_RCC_OscConfig+0x280>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	493d      	ldr	r1, [pc, #244]	; (800680c <HAL_RCC_OscConfig+0x280>)
 8006716:	4313      	orrs	r3, r2
 8006718:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800671a:	e040      	b.n	800679e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d023      	beq.n	800676c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006724:	4b39      	ldr	r3, [pc, #228]	; (800680c <HAL_RCC_OscConfig+0x280>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a38      	ldr	r2, [pc, #224]	; (800680c <HAL_RCC_OscConfig+0x280>)
 800672a:	f043 0301 	orr.w	r3, r3, #1
 800672e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006730:	f7fd fc2a 	bl	8003f88 <HAL_GetTick>
 8006734:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006736:	e008      	b.n	800674a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006738:	f7fd fc26 	bl	8003f88 <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	2b02      	cmp	r3, #2
 8006744:	d901      	bls.n	800674a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e1bd      	b.n	8006ac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800674a:	4b30      	ldr	r3, [pc, #192]	; (800680c <HAL_RCC_OscConfig+0x280>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0302 	and.w	r3, r3, #2
 8006752:	2b00      	cmp	r3, #0
 8006754:	d0f0      	beq.n	8006738 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006756:	4b2d      	ldr	r3, [pc, #180]	; (800680c <HAL_RCC_OscConfig+0x280>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	00db      	lsls	r3, r3, #3
 8006764:	4929      	ldr	r1, [pc, #164]	; (800680c <HAL_RCC_OscConfig+0x280>)
 8006766:	4313      	orrs	r3, r2
 8006768:	600b      	str	r3, [r1, #0]
 800676a:	e018      	b.n	800679e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800676c:	4b27      	ldr	r3, [pc, #156]	; (800680c <HAL_RCC_OscConfig+0x280>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a26      	ldr	r2, [pc, #152]	; (800680c <HAL_RCC_OscConfig+0x280>)
 8006772:	f023 0301 	bic.w	r3, r3, #1
 8006776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006778:	f7fd fc06 	bl	8003f88 <HAL_GetTick>
 800677c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800677e:	e008      	b.n	8006792 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006780:	f7fd fc02 	bl	8003f88 <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	2b02      	cmp	r3, #2
 800678c:	d901      	bls.n	8006792 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e199      	b.n	8006ac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006792:	4b1e      	ldr	r3, [pc, #120]	; (800680c <HAL_RCC_OscConfig+0x280>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0302 	and.w	r3, r3, #2
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1f0      	bne.n	8006780 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0308 	and.w	r3, r3, #8
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d038      	beq.n	800681c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d019      	beq.n	80067e6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067b2:	4b16      	ldr	r3, [pc, #88]	; (800680c <HAL_RCC_OscConfig+0x280>)
 80067b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067b6:	4a15      	ldr	r2, [pc, #84]	; (800680c <HAL_RCC_OscConfig+0x280>)
 80067b8:	f043 0301 	orr.w	r3, r3, #1
 80067bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067be:	f7fd fbe3 	bl	8003f88 <HAL_GetTick>
 80067c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067c4:	e008      	b.n	80067d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067c6:	f7fd fbdf 	bl	8003f88 <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d901      	bls.n	80067d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e176      	b.n	8006ac6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067d8:	4b0c      	ldr	r3, [pc, #48]	; (800680c <HAL_RCC_OscConfig+0x280>)
 80067da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067dc:	f003 0302 	and.w	r3, r3, #2
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d0f0      	beq.n	80067c6 <HAL_RCC_OscConfig+0x23a>
 80067e4:	e01a      	b.n	800681c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067e6:	4b09      	ldr	r3, [pc, #36]	; (800680c <HAL_RCC_OscConfig+0x280>)
 80067e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067ea:	4a08      	ldr	r2, [pc, #32]	; (800680c <HAL_RCC_OscConfig+0x280>)
 80067ec:	f023 0301 	bic.w	r3, r3, #1
 80067f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067f2:	f7fd fbc9 	bl	8003f88 <HAL_GetTick>
 80067f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067f8:	e00a      	b.n	8006810 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067fa:	f7fd fbc5 	bl	8003f88 <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	2b02      	cmp	r3, #2
 8006806:	d903      	bls.n	8006810 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	e15c      	b.n	8006ac6 <HAL_RCC_OscConfig+0x53a>
 800680c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006810:	4b91      	ldr	r3, [pc, #580]	; (8006a58 <HAL_RCC_OscConfig+0x4cc>)
 8006812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006814:	f003 0302 	and.w	r3, r3, #2
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1ee      	bne.n	80067fa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0304 	and.w	r3, r3, #4
 8006824:	2b00      	cmp	r3, #0
 8006826:	f000 80a4 	beq.w	8006972 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800682a:	4b8b      	ldr	r3, [pc, #556]	; (8006a58 <HAL_RCC_OscConfig+0x4cc>)
 800682c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10d      	bne.n	8006852 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006836:	4b88      	ldr	r3, [pc, #544]	; (8006a58 <HAL_RCC_OscConfig+0x4cc>)
 8006838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683a:	4a87      	ldr	r2, [pc, #540]	; (8006a58 <HAL_RCC_OscConfig+0x4cc>)
 800683c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006840:	6413      	str	r3, [r2, #64]	; 0x40
 8006842:	4b85      	ldr	r3, [pc, #532]	; (8006a58 <HAL_RCC_OscConfig+0x4cc>)
 8006844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800684a:	60bb      	str	r3, [r7, #8]
 800684c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800684e:	2301      	movs	r3, #1
 8006850:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006852:	4b82      	ldr	r3, [pc, #520]	; (8006a5c <HAL_RCC_OscConfig+0x4d0>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800685a:	2b00      	cmp	r3, #0
 800685c:	d118      	bne.n	8006890 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800685e:	4b7f      	ldr	r3, [pc, #508]	; (8006a5c <HAL_RCC_OscConfig+0x4d0>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a7e      	ldr	r2, [pc, #504]	; (8006a5c <HAL_RCC_OscConfig+0x4d0>)
 8006864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006868:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800686a:	f7fd fb8d 	bl	8003f88 <HAL_GetTick>
 800686e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006870:	e008      	b.n	8006884 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006872:	f7fd fb89 	bl	8003f88 <HAL_GetTick>
 8006876:	4602      	mov	r2, r0
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	2b64      	cmp	r3, #100	; 0x64
 800687e:	d901      	bls.n	8006884 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e120      	b.n	8006ac6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006884:	4b75      	ldr	r3, [pc, #468]	; (8006a5c <HAL_RCC_OscConfig+0x4d0>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800688c:	2b00      	cmp	r3, #0
 800688e:	d0f0      	beq.n	8006872 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d106      	bne.n	80068a6 <HAL_RCC_OscConfig+0x31a>
 8006898:	4b6f      	ldr	r3, [pc, #444]	; (8006a58 <HAL_RCC_OscConfig+0x4cc>)
 800689a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800689c:	4a6e      	ldr	r2, [pc, #440]	; (8006a58 <HAL_RCC_OscConfig+0x4cc>)
 800689e:	f043 0301 	orr.w	r3, r3, #1
 80068a2:	6713      	str	r3, [r2, #112]	; 0x70
 80068a4:	e02d      	b.n	8006902 <HAL_RCC_OscConfig+0x376>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10c      	bne.n	80068c8 <HAL_RCC_OscConfig+0x33c>
 80068ae:	4b6a      	ldr	r3, [pc, #424]	; (8006a58 <HAL_RCC_OscConfig+0x4cc>)
 80068b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b2:	4a69      	ldr	r2, [pc, #420]	; (8006a58 <HAL_RCC_OscConfig+0x4cc>)
 80068b4:	f023 0301 	bic.w	r3, r3, #1
 80068b8:	6713      	str	r3, [r2, #112]	; 0x70
 80068ba:	4b67      	ldr	r3, [pc, #412]	; (8006a58 <HAL_RCC_OscConfig+0x4cc>)
 80068bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068be:	4a66      	ldr	r2, [pc, #408]	; (8006a58 <HAL_RCC_OscConfig+0x4cc>)
 80068c0:	f023 0304 	bic.w	r3, r3, #4
 80068c4:	6713      	str	r3, [r2, #112]	; 0x70
 80068c6:	e01c      	b.n	8006902 <HAL_RCC_OscConfig+0x376>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	2b05      	cmp	r3, #5
 80068ce:	d10c      	bne.n	80068ea <HAL_RCC_OscConfig+0x35e>
 80068d0:	4b61      	ldr	r3, [pc, #388]	; (8006a58 <HAL_RCC_OscConfig+0x4cc>)
 80068d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068d4:	4a60      	ldr	r2, [pc, #384]	; (8006a58 <HAL_RCC_OscConfig+0x4cc>)
 80068d6:	f043 0304 	orr.w	r3, r3, #4
 80068da:	6713      	str	r3, [r2, #112]	; 0x70
 80068dc:	4b5e      	ldr	r3, [pc, #376]	; (8006a58 <HAL_RCC_OscConfig+0x4cc>)
 80068de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e0:	4a5d      	ldr	r2, [pc, #372]	; (8006a58 <HAL_RCC_OscConfig+0x4cc>)
 80068e2:	f043 0301 	orr.w	r3, r3, #1
 80068e6:	6713      	str	r3, [r2, #112]	; 0x70
 80068e8:	e00b      	b.n	8006902 <HAL_RCC_OscConfig+0x376>
 80068ea:	4b5b      	ldr	r3, [pc, #364]	; (8006a58 <HAL_RCC_OscConfig+0x4cc>)
 80068ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ee:	4a5a      	ldr	r2, [pc, #360]	; (8006a58 <HAL_RCC_OscConfig+0x4cc>)
 80068f0:	f023 0301 	bic.w	r3, r3, #1
 80068f4:	6713      	str	r3, [r2, #112]	; 0x70
 80068f6:	4b58      	ldr	r3, [pc, #352]	; (8006a58 <HAL_RCC_OscConfig+0x4cc>)
 80068f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068fa:	4a57      	ldr	r2, [pc, #348]	; (8006a58 <HAL_RCC_OscConfig+0x4cc>)
 80068fc:	f023 0304 	bic.w	r3, r3, #4
 8006900:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d015      	beq.n	8006936 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800690a:	f7fd fb3d 	bl	8003f88 <HAL_GetTick>
 800690e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006910:	e00a      	b.n	8006928 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006912:	f7fd fb39 	bl	8003f88 <HAL_GetTick>
 8006916:	4602      	mov	r2, r0
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006920:	4293      	cmp	r3, r2
 8006922:	d901      	bls.n	8006928 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	e0ce      	b.n	8006ac6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006928:	4b4b      	ldr	r3, [pc, #300]	; (8006a58 <HAL_RCC_OscConfig+0x4cc>)
 800692a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800692c:	f003 0302 	and.w	r3, r3, #2
 8006930:	2b00      	cmp	r3, #0
 8006932:	d0ee      	beq.n	8006912 <HAL_RCC_OscConfig+0x386>
 8006934:	e014      	b.n	8006960 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006936:	f7fd fb27 	bl	8003f88 <HAL_GetTick>
 800693a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800693c:	e00a      	b.n	8006954 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800693e:	f7fd fb23 	bl	8003f88 <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	f241 3288 	movw	r2, #5000	; 0x1388
 800694c:	4293      	cmp	r3, r2
 800694e:	d901      	bls.n	8006954 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e0b8      	b.n	8006ac6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006954:	4b40      	ldr	r3, [pc, #256]	; (8006a58 <HAL_RCC_OscConfig+0x4cc>)
 8006956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006958:	f003 0302 	and.w	r3, r3, #2
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1ee      	bne.n	800693e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006960:	7dfb      	ldrb	r3, [r7, #23]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d105      	bne.n	8006972 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006966:	4b3c      	ldr	r3, [pc, #240]	; (8006a58 <HAL_RCC_OscConfig+0x4cc>)
 8006968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696a:	4a3b      	ldr	r2, [pc, #236]	; (8006a58 <HAL_RCC_OscConfig+0x4cc>)
 800696c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006970:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	2b00      	cmp	r3, #0
 8006978:	f000 80a4 	beq.w	8006ac4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800697c:	4b36      	ldr	r3, [pc, #216]	; (8006a58 <HAL_RCC_OscConfig+0x4cc>)
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	f003 030c 	and.w	r3, r3, #12
 8006984:	2b08      	cmp	r3, #8
 8006986:	d06b      	beq.n	8006a60 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	2b02      	cmp	r3, #2
 800698e:	d149      	bne.n	8006a24 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006990:	4b31      	ldr	r3, [pc, #196]	; (8006a58 <HAL_RCC_OscConfig+0x4cc>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a30      	ldr	r2, [pc, #192]	; (8006a58 <HAL_RCC_OscConfig+0x4cc>)
 8006996:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800699a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800699c:	f7fd faf4 	bl	8003f88 <HAL_GetTick>
 80069a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069a2:	e008      	b.n	80069b6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069a4:	f7fd faf0 	bl	8003f88 <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e087      	b.n	8006ac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069b6:	4b28      	ldr	r3, [pc, #160]	; (8006a58 <HAL_RCC_OscConfig+0x4cc>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1f0      	bne.n	80069a4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	69da      	ldr	r2, [r3, #28]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	431a      	orrs	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d0:	019b      	lsls	r3, r3, #6
 80069d2:	431a      	orrs	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d8:	085b      	lsrs	r3, r3, #1
 80069da:	3b01      	subs	r3, #1
 80069dc:	041b      	lsls	r3, r3, #16
 80069de:	431a      	orrs	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e4:	061b      	lsls	r3, r3, #24
 80069e6:	4313      	orrs	r3, r2
 80069e8:	4a1b      	ldr	r2, [pc, #108]	; (8006a58 <HAL_RCC_OscConfig+0x4cc>)
 80069ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80069ee:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069f0:	4b19      	ldr	r3, [pc, #100]	; (8006a58 <HAL_RCC_OscConfig+0x4cc>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a18      	ldr	r2, [pc, #96]	; (8006a58 <HAL_RCC_OscConfig+0x4cc>)
 80069f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069fc:	f7fd fac4 	bl	8003f88 <HAL_GetTick>
 8006a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a02:	e008      	b.n	8006a16 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a04:	f7fd fac0 	bl	8003f88 <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d901      	bls.n	8006a16 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e057      	b.n	8006ac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a16:	4b10      	ldr	r3, [pc, #64]	; (8006a58 <HAL_RCC_OscConfig+0x4cc>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d0f0      	beq.n	8006a04 <HAL_RCC_OscConfig+0x478>
 8006a22:	e04f      	b.n	8006ac4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a24:	4b0c      	ldr	r3, [pc, #48]	; (8006a58 <HAL_RCC_OscConfig+0x4cc>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a0b      	ldr	r2, [pc, #44]	; (8006a58 <HAL_RCC_OscConfig+0x4cc>)
 8006a2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a30:	f7fd faaa 	bl	8003f88 <HAL_GetTick>
 8006a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a36:	e008      	b.n	8006a4a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a38:	f7fd faa6 	bl	8003f88 <HAL_GetTick>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d901      	bls.n	8006a4a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e03d      	b.n	8006ac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a4a:	4b03      	ldr	r3, [pc, #12]	; (8006a58 <HAL_RCC_OscConfig+0x4cc>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1f0      	bne.n	8006a38 <HAL_RCC_OscConfig+0x4ac>
 8006a56:	e035      	b.n	8006ac4 <HAL_RCC_OscConfig+0x538>
 8006a58:	40023800 	.word	0x40023800
 8006a5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006a60:	4b1b      	ldr	r3, [pc, #108]	; (8006ad0 <HAL_RCC_OscConfig+0x544>)
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d028      	beq.n	8006ac0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d121      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d11a      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006a90:	4013      	ands	r3, r2
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006a96:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d111      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa6:	085b      	lsrs	r3, r3, #1
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d107      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d001      	beq.n	8006ac4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e000      	b.n	8006ac6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3718      	adds	r7, #24
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	40023800 	.word	0x40023800

08006ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d101      	bne.n	8006aec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e0d0      	b.n	8006c8e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006aec:	4b6a      	ldr	r3, [pc, #424]	; (8006c98 <HAL_RCC_ClockConfig+0x1c4>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 030f 	and.w	r3, r3, #15
 8006af4:	683a      	ldr	r2, [r7, #0]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d910      	bls.n	8006b1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006afa:	4b67      	ldr	r3, [pc, #412]	; (8006c98 <HAL_RCC_ClockConfig+0x1c4>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f023 020f 	bic.w	r2, r3, #15
 8006b02:	4965      	ldr	r1, [pc, #404]	; (8006c98 <HAL_RCC_ClockConfig+0x1c4>)
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b0a:	4b63      	ldr	r3, [pc, #396]	; (8006c98 <HAL_RCC_ClockConfig+0x1c4>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 030f 	and.w	r3, r3, #15
 8006b12:	683a      	ldr	r2, [r7, #0]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d001      	beq.n	8006b1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e0b8      	b.n	8006c8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0302 	and.w	r3, r3, #2
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d020      	beq.n	8006b6a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0304 	and.w	r3, r3, #4
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d005      	beq.n	8006b40 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b34:	4b59      	ldr	r3, [pc, #356]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	4a58      	ldr	r2, [pc, #352]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006b3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006b3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0308 	and.w	r3, r3, #8
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d005      	beq.n	8006b58 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b4c:	4b53      	ldr	r3, [pc, #332]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	4a52      	ldr	r2, [pc, #328]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006b52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006b56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b58:	4b50      	ldr	r3, [pc, #320]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	494d      	ldr	r1, [pc, #308]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d040      	beq.n	8006bf8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d107      	bne.n	8006b8e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b7e:	4b47      	ldr	r3, [pc, #284]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d115      	bne.n	8006bb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e07f      	b.n	8006c8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d107      	bne.n	8006ba6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b96:	4b41      	ldr	r3, [pc, #260]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d109      	bne.n	8006bb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e073      	b.n	8006c8e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ba6:	4b3d      	ldr	r3, [pc, #244]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0302 	and.w	r3, r3, #2
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e06b      	b.n	8006c8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006bb6:	4b39      	ldr	r3, [pc, #228]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f023 0203 	bic.w	r2, r3, #3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	4936      	ldr	r1, [pc, #216]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bc8:	f7fd f9de 	bl	8003f88 <HAL_GetTick>
 8006bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bce:	e00a      	b.n	8006be6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bd0:	f7fd f9da 	bl	8003f88 <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d901      	bls.n	8006be6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e053      	b.n	8006c8e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006be6:	4b2d      	ldr	r3, [pc, #180]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	f003 020c 	and.w	r2, r3, #12
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d1eb      	bne.n	8006bd0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006bf8:	4b27      	ldr	r3, [pc, #156]	; (8006c98 <HAL_RCC_ClockConfig+0x1c4>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 030f 	and.w	r3, r3, #15
 8006c00:	683a      	ldr	r2, [r7, #0]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d210      	bcs.n	8006c28 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c06:	4b24      	ldr	r3, [pc, #144]	; (8006c98 <HAL_RCC_ClockConfig+0x1c4>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f023 020f 	bic.w	r2, r3, #15
 8006c0e:	4922      	ldr	r1, [pc, #136]	; (8006c98 <HAL_RCC_ClockConfig+0x1c4>)
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c16:	4b20      	ldr	r3, [pc, #128]	; (8006c98 <HAL_RCC_ClockConfig+0x1c4>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 030f 	and.w	r3, r3, #15
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d001      	beq.n	8006c28 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e032      	b.n	8006c8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0304 	and.w	r3, r3, #4
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d008      	beq.n	8006c46 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c34:	4b19      	ldr	r3, [pc, #100]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	4916      	ldr	r1, [pc, #88]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0308 	and.w	r3, r3, #8
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d009      	beq.n	8006c66 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006c52:	4b12      	ldr	r3, [pc, #72]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	00db      	lsls	r3, r3, #3
 8006c60:	490e      	ldr	r1, [pc, #56]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c66:	f000 f821 	bl	8006cac <HAL_RCC_GetSysClockFreq>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	4b0b      	ldr	r3, [pc, #44]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	091b      	lsrs	r3, r3, #4
 8006c72:	f003 030f 	and.w	r3, r3, #15
 8006c76:	490a      	ldr	r1, [pc, #40]	; (8006ca0 <HAL_RCC_ClockConfig+0x1cc>)
 8006c78:	5ccb      	ldrb	r3, [r1, r3]
 8006c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c7e:	4a09      	ldr	r2, [pc, #36]	; (8006ca4 <HAL_RCC_ClockConfig+0x1d0>)
 8006c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006c82:	4b09      	ldr	r3, [pc, #36]	; (8006ca8 <HAL_RCC_ClockConfig+0x1d4>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7fd f93a 	bl	8003f00 <HAL_InitTick>

  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	40023c00 	.word	0x40023c00
 8006c9c:	40023800 	.word	0x40023800
 8006ca0:	08011b0c 	.word	0x08011b0c
 8006ca4:	20000004 	.word	0x20000004
 8006ca8:	2000001c 	.word	0x2000001c

08006cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cac:	b5b0      	push	{r4, r5, r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	6079      	str	r1, [r7, #4]
 8006cb6:	2100      	movs	r1, #0
 8006cb8:	60f9      	str	r1, [r7, #12]
 8006cba:	2100      	movs	r1, #0
 8006cbc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006cbe:	2100      	movs	r1, #0
 8006cc0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cc2:	4952      	ldr	r1, [pc, #328]	; (8006e0c <HAL_RCC_GetSysClockFreq+0x160>)
 8006cc4:	6889      	ldr	r1, [r1, #8]
 8006cc6:	f001 010c 	and.w	r1, r1, #12
 8006cca:	2908      	cmp	r1, #8
 8006ccc:	d00d      	beq.n	8006cea <HAL_RCC_GetSysClockFreq+0x3e>
 8006cce:	2908      	cmp	r1, #8
 8006cd0:	f200 8094 	bhi.w	8006dfc <HAL_RCC_GetSysClockFreq+0x150>
 8006cd4:	2900      	cmp	r1, #0
 8006cd6:	d002      	beq.n	8006cde <HAL_RCC_GetSysClockFreq+0x32>
 8006cd8:	2904      	cmp	r1, #4
 8006cda:	d003      	beq.n	8006ce4 <HAL_RCC_GetSysClockFreq+0x38>
 8006cdc:	e08e      	b.n	8006dfc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006cde:	4b4c      	ldr	r3, [pc, #304]	; (8006e10 <HAL_RCC_GetSysClockFreq+0x164>)
 8006ce0:	60bb      	str	r3, [r7, #8]
      break;
 8006ce2:	e08e      	b.n	8006e02 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ce4:	4b4b      	ldr	r3, [pc, #300]	; (8006e14 <HAL_RCC_GetSysClockFreq+0x168>)
 8006ce6:	60bb      	str	r3, [r7, #8]
      break;
 8006ce8:	e08b      	b.n	8006e02 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006cea:	4948      	ldr	r1, [pc, #288]	; (8006e0c <HAL_RCC_GetSysClockFreq+0x160>)
 8006cec:	6849      	ldr	r1, [r1, #4]
 8006cee:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006cf2:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006cf4:	4945      	ldr	r1, [pc, #276]	; (8006e0c <HAL_RCC_GetSysClockFreq+0x160>)
 8006cf6:	6849      	ldr	r1, [r1, #4]
 8006cf8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006cfc:	2900      	cmp	r1, #0
 8006cfe:	d024      	beq.n	8006d4a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d00:	4942      	ldr	r1, [pc, #264]	; (8006e0c <HAL_RCC_GetSysClockFreq+0x160>)
 8006d02:	6849      	ldr	r1, [r1, #4]
 8006d04:	0989      	lsrs	r1, r1, #6
 8006d06:	4608      	mov	r0, r1
 8006d08:	f04f 0100 	mov.w	r1, #0
 8006d0c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006d10:	f04f 0500 	mov.w	r5, #0
 8006d14:	ea00 0204 	and.w	r2, r0, r4
 8006d18:	ea01 0305 	and.w	r3, r1, r5
 8006d1c:	493d      	ldr	r1, [pc, #244]	; (8006e14 <HAL_RCC_GetSysClockFreq+0x168>)
 8006d1e:	fb01 f003 	mul.w	r0, r1, r3
 8006d22:	2100      	movs	r1, #0
 8006d24:	fb01 f102 	mul.w	r1, r1, r2
 8006d28:	1844      	adds	r4, r0, r1
 8006d2a:	493a      	ldr	r1, [pc, #232]	; (8006e14 <HAL_RCC_GetSysClockFreq+0x168>)
 8006d2c:	fba2 0101 	umull	r0, r1, r2, r1
 8006d30:	1863      	adds	r3, r4, r1
 8006d32:	4619      	mov	r1, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	461a      	mov	r2, r3
 8006d38:	f04f 0300 	mov.w	r3, #0
 8006d3c:	f7f9 fab8 	bl	80002b0 <__aeabi_uldivmod>
 8006d40:	4602      	mov	r2, r0
 8006d42:	460b      	mov	r3, r1
 8006d44:	4613      	mov	r3, r2
 8006d46:	60fb      	str	r3, [r7, #12]
 8006d48:	e04a      	b.n	8006de0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d4a:	4b30      	ldr	r3, [pc, #192]	; (8006e0c <HAL_RCC_GetSysClockFreq+0x160>)
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	099b      	lsrs	r3, r3, #6
 8006d50:	461a      	mov	r2, r3
 8006d52:	f04f 0300 	mov.w	r3, #0
 8006d56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006d5a:	f04f 0100 	mov.w	r1, #0
 8006d5e:	ea02 0400 	and.w	r4, r2, r0
 8006d62:	ea03 0501 	and.w	r5, r3, r1
 8006d66:	4620      	mov	r0, r4
 8006d68:	4629      	mov	r1, r5
 8006d6a:	f04f 0200 	mov.w	r2, #0
 8006d6e:	f04f 0300 	mov.w	r3, #0
 8006d72:	014b      	lsls	r3, r1, #5
 8006d74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006d78:	0142      	lsls	r2, r0, #5
 8006d7a:	4610      	mov	r0, r2
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	1b00      	subs	r0, r0, r4
 8006d80:	eb61 0105 	sbc.w	r1, r1, r5
 8006d84:	f04f 0200 	mov.w	r2, #0
 8006d88:	f04f 0300 	mov.w	r3, #0
 8006d8c:	018b      	lsls	r3, r1, #6
 8006d8e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006d92:	0182      	lsls	r2, r0, #6
 8006d94:	1a12      	subs	r2, r2, r0
 8006d96:	eb63 0301 	sbc.w	r3, r3, r1
 8006d9a:	f04f 0000 	mov.w	r0, #0
 8006d9e:	f04f 0100 	mov.w	r1, #0
 8006da2:	00d9      	lsls	r1, r3, #3
 8006da4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006da8:	00d0      	lsls	r0, r2, #3
 8006daa:	4602      	mov	r2, r0
 8006dac:	460b      	mov	r3, r1
 8006dae:	1912      	adds	r2, r2, r4
 8006db0:	eb45 0303 	adc.w	r3, r5, r3
 8006db4:	f04f 0000 	mov.w	r0, #0
 8006db8:	f04f 0100 	mov.w	r1, #0
 8006dbc:	0299      	lsls	r1, r3, #10
 8006dbe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006dc2:	0290      	lsls	r0, r2, #10
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	4610      	mov	r0, r2
 8006dca:	4619      	mov	r1, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	f04f 0300 	mov.w	r3, #0
 8006dd4:	f7f9 fa6c 	bl	80002b0 <__aeabi_uldivmod>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	460b      	mov	r3, r1
 8006ddc:	4613      	mov	r3, r2
 8006dde:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006de0:	4b0a      	ldr	r3, [pc, #40]	; (8006e0c <HAL_RCC_GetSysClockFreq+0x160>)
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	0c1b      	lsrs	r3, r3, #16
 8006de6:	f003 0303 	and.w	r3, r3, #3
 8006dea:	3301      	adds	r3, #1
 8006dec:	005b      	lsls	r3, r3, #1
 8006dee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df8:	60bb      	str	r3, [r7, #8]
      break;
 8006dfa:	e002      	b.n	8006e02 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006dfc:	4b04      	ldr	r3, [pc, #16]	; (8006e10 <HAL_RCC_GetSysClockFreq+0x164>)
 8006dfe:	60bb      	str	r3, [r7, #8]
      break;
 8006e00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e02:	68bb      	ldr	r3, [r7, #8]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bdb0      	pop	{r4, r5, r7, pc}
 8006e0c:	40023800 	.word	0x40023800
 8006e10:	00f42400 	.word	0x00f42400
 8006e14:	017d7840 	.word	0x017d7840

08006e18 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e1c:	4b03      	ldr	r3, [pc, #12]	; (8006e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	20000004 	.word	0x20000004

08006e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006e34:	f7ff fff0 	bl	8006e18 <HAL_RCC_GetHCLKFreq>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	4b05      	ldr	r3, [pc, #20]	; (8006e50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	0a9b      	lsrs	r3, r3, #10
 8006e40:	f003 0307 	and.w	r3, r3, #7
 8006e44:	4903      	ldr	r1, [pc, #12]	; (8006e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e46:	5ccb      	ldrb	r3, [r1, r3]
 8006e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	40023800 	.word	0x40023800
 8006e54:	08011b1c 	.word	0x08011b1c

08006e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006e5c:	f7ff ffdc 	bl	8006e18 <HAL_RCC_GetHCLKFreq>
 8006e60:	4602      	mov	r2, r0
 8006e62:	4b05      	ldr	r3, [pc, #20]	; (8006e78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	0b5b      	lsrs	r3, r3, #13
 8006e68:	f003 0307 	and.w	r3, r3, #7
 8006e6c:	4903      	ldr	r1, [pc, #12]	; (8006e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e6e:	5ccb      	ldrb	r3, [r1, r3]
 8006e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	40023800 	.word	0x40023800
 8006e7c:	08011b1c 	.word	0x08011b1c

08006e80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b088      	sub	sp, #32
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006e90:	2300      	movs	r3, #0
 8006e92:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006e94:	2300      	movs	r3, #0
 8006e96:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d012      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006ea8:	4b69      	ldr	r3, [pc, #420]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	4a68      	ldr	r2, [pc, #416]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006eb2:	6093      	str	r3, [r2, #8]
 8006eb4:	4b66      	ldr	r3, [pc, #408]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eb6:	689a      	ldr	r2, [r3, #8]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ebc:	4964      	ldr	r1, [pc, #400]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d101      	bne.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d017      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006eda:	4b5d      	ldr	r3, [pc, #372]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ee0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee8:	4959      	ldr	r1, [pc, #356]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ef8:	d101      	bne.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006efa:	2301      	movs	r3, #1
 8006efc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d101      	bne.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006f06:	2301      	movs	r3, #1
 8006f08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d017      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006f16:	4b4e      	ldr	r3, [pc, #312]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f24:	494a      	ldr	r1, [pc, #296]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f26:	4313      	orrs	r3, r2
 8006f28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f34:	d101      	bne.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006f36:	2301      	movs	r3, #1
 8006f38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d101      	bne.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006f42:	2301      	movs	r3, #1
 8006f44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006f52:	2301      	movs	r3, #1
 8006f54:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 0320 	and.w	r3, r3, #32
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f000 808b 	beq.w	800707a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f64:	4b3a      	ldr	r3, [pc, #232]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f68:	4a39      	ldr	r2, [pc, #228]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f6e:	6413      	str	r3, [r2, #64]	; 0x40
 8006f70:	4b37      	ldr	r3, [pc, #220]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f78:	60bb      	str	r3, [r7, #8]
 8006f7a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006f7c:	4b35      	ldr	r3, [pc, #212]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a34      	ldr	r2, [pc, #208]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f88:	f7fc fffe 	bl	8003f88 <HAL_GetTick>
 8006f8c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006f8e:	e008      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f90:	f7fc fffa 	bl	8003f88 <HAL_GetTick>
 8006f94:	4602      	mov	r2, r0
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	2b64      	cmp	r3, #100	; 0x64
 8006f9c:	d901      	bls.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e357      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006fa2:	4b2c      	ldr	r3, [pc, #176]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d0f0      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006fae:	4b28      	ldr	r3, [pc, #160]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fb6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d035      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fc6:	693a      	ldr	r2, [r7, #16]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d02e      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006fcc:	4b20      	ldr	r3, [pc, #128]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fd4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006fd6:	4b1e      	ldr	r3, [pc, #120]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fda:	4a1d      	ldr	r2, [pc, #116]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fe0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006fe2:	4b1b      	ldr	r3, [pc, #108]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fe6:	4a1a      	ldr	r2, [pc, #104]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006fee:	4a18      	ldr	r2, [pc, #96]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006ff4:	4b16      	ldr	r3, [pc, #88]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff8:	f003 0301 	and.w	r3, r3, #1
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d114      	bne.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007000:	f7fc ffc2 	bl	8003f88 <HAL_GetTick>
 8007004:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007006:	e00a      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007008:	f7fc ffbe 	bl	8003f88 <HAL_GetTick>
 800700c:	4602      	mov	r2, r0
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	f241 3288 	movw	r2, #5000	; 0x1388
 8007016:	4293      	cmp	r3, r2
 8007018:	d901      	bls.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e319      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800701e:	4b0c      	ldr	r3, [pc, #48]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007022:	f003 0302 	and.w	r3, r3, #2
 8007026:	2b00      	cmp	r3, #0
 8007028:	d0ee      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007032:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007036:	d111      	bne.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007038:	4b05      	ldr	r3, [pc, #20]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007044:	4b04      	ldr	r3, [pc, #16]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007046:	400b      	ands	r3, r1
 8007048:	4901      	ldr	r1, [pc, #4]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800704a:	4313      	orrs	r3, r2
 800704c:	608b      	str	r3, [r1, #8]
 800704e:	e00b      	b.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007050:	40023800 	.word	0x40023800
 8007054:	40007000 	.word	0x40007000
 8007058:	0ffffcff 	.word	0x0ffffcff
 800705c:	4bb1      	ldr	r3, [pc, #708]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	4ab0      	ldr	r2, [pc, #704]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007062:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007066:	6093      	str	r3, [r2, #8]
 8007068:	4bae      	ldr	r3, [pc, #696]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800706a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007074:	49ab      	ldr	r1, [pc, #684]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007076:	4313      	orrs	r3, r2
 8007078:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0310 	and.w	r3, r3, #16
 8007082:	2b00      	cmp	r3, #0
 8007084:	d010      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007086:	4ba7      	ldr	r3, [pc, #668]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800708c:	4aa5      	ldr	r2, [pc, #660]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800708e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007092:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007096:	4ba3      	ldr	r3, [pc, #652]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007098:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a0:	49a0      	ldr	r1, [pc, #640]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80070a2:	4313      	orrs	r3, r2
 80070a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00a      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80070b4:	4b9b      	ldr	r3, [pc, #620]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80070b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070c2:	4998      	ldr	r1, [pc, #608]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80070c4:	4313      	orrs	r3, r2
 80070c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d00a      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80070d6:	4b93      	ldr	r3, [pc, #588]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80070d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070e4:	498f      	ldr	r1, [pc, #572]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80070e6:	4313      	orrs	r3, r2
 80070e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00a      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80070f8:	4b8a      	ldr	r3, [pc, #552]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80070fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007106:	4987      	ldr	r1, [pc, #540]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007108:	4313      	orrs	r3, r2
 800710a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00a      	beq.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800711a:	4b82      	ldr	r3, [pc, #520]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800711c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007120:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007128:	497e      	ldr	r1, [pc, #504]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800712a:	4313      	orrs	r3, r2
 800712c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00a      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800713c:	4b79      	ldr	r3, [pc, #484]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800713e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007142:	f023 0203 	bic.w	r2, r3, #3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800714a:	4976      	ldr	r1, [pc, #472]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800714c:	4313      	orrs	r3, r2
 800714e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00a      	beq.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800715e:	4b71      	ldr	r3, [pc, #452]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007164:	f023 020c 	bic.w	r2, r3, #12
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800716c:	496d      	ldr	r1, [pc, #436]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800716e:	4313      	orrs	r3, r2
 8007170:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00a      	beq.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007180:	4b68      	ldr	r3, [pc, #416]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007186:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800718e:	4965      	ldr	r1, [pc, #404]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007190:	4313      	orrs	r3, r2
 8007192:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00a      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80071a2:	4b60      	ldr	r3, [pc, #384]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80071a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071a8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071b0:	495c      	ldr	r1, [pc, #368]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80071b2:	4313      	orrs	r3, r2
 80071b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00a      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80071c4:	4b57      	ldr	r3, [pc, #348]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80071c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071d2:	4954      	ldr	r1, [pc, #336]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80071d4:	4313      	orrs	r3, r2
 80071d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00a      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80071e6:	4b4f      	ldr	r3, [pc, #316]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80071e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071f4:	494b      	ldr	r1, [pc, #300]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80071f6:	4313      	orrs	r3, r2
 80071f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00a      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007208:	4b46      	ldr	r3, [pc, #280]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800720a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800720e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007216:	4943      	ldr	r1, [pc, #268]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007218:	4313      	orrs	r3, r2
 800721a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00a      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800722a:	4b3e      	ldr	r3, [pc, #248]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800722c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007230:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007238:	493a      	ldr	r1, [pc, #232]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800723a:	4313      	orrs	r3, r2
 800723c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007248:	2b00      	cmp	r3, #0
 800724a:	d00a      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800724c:	4b35      	ldr	r3, [pc, #212]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800724e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007252:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800725a:	4932      	ldr	r1, [pc, #200]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800725c:	4313      	orrs	r3, r2
 800725e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d011      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800726e:	4b2d      	ldr	r3, [pc, #180]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007274:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800727c:	4929      	ldr	r1, [pc, #164]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800727e:	4313      	orrs	r3, r2
 8007280:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007288:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800728c:	d101      	bne.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800728e:	2301      	movs	r3, #1
 8007290:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 0308 	and.w	r3, r3, #8
 800729a:	2b00      	cmp	r3, #0
 800729c:	d001      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800729e:	2301      	movs	r3, #1
 80072a0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00a      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80072ae:	4b1d      	ldr	r3, [pc, #116]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80072b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072b4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072bc:	4919      	ldr	r1, [pc, #100]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80072be:	4313      	orrs	r3, r2
 80072c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00b      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80072d0:	4b14      	ldr	r3, [pc, #80]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80072d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072d6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072e0:	4910      	ldr	r1, [pc, #64]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d006      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f000 80d9 	beq.w	80074ae <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80072fc:	4b09      	ldr	r3, [pc, #36]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a08      	ldr	r2, [pc, #32]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007302:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007306:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007308:	f7fc fe3e 	bl	8003f88 <HAL_GetTick>
 800730c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800730e:	e00b      	b.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007310:	f7fc fe3a 	bl	8003f88 <HAL_GetTick>
 8007314:	4602      	mov	r2, r0
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	2b64      	cmp	r3, #100	; 0x64
 800731c:	d904      	bls.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800731e:	2303      	movs	r3, #3
 8007320:	e197      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007322:	bf00      	nop
 8007324:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007328:	4b6c      	ldr	r3, [pc, #432]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1ed      	bne.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0301 	and.w	r3, r3, #1
 800733c:	2b00      	cmp	r3, #0
 800733e:	d021      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007344:	2b00      	cmp	r3, #0
 8007346:	d11d      	bne.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007348:	4b64      	ldr	r3, [pc, #400]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800734a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800734e:	0c1b      	lsrs	r3, r3, #16
 8007350:	f003 0303 	and.w	r3, r3, #3
 8007354:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007356:	4b61      	ldr	r3, [pc, #388]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800735c:	0e1b      	lsrs	r3, r3, #24
 800735e:	f003 030f 	and.w	r3, r3, #15
 8007362:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	019a      	lsls	r2, r3, #6
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	041b      	lsls	r3, r3, #16
 800736e:	431a      	orrs	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	061b      	lsls	r3, r3, #24
 8007374:	431a      	orrs	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	071b      	lsls	r3, r3, #28
 800737c:	4957      	ldr	r1, [pc, #348]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800737e:	4313      	orrs	r3, r2
 8007380:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800738c:	2b00      	cmp	r3, #0
 800738e:	d004      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007394:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007398:	d00a      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d02e      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073ae:	d129      	bne.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80073b0:	4b4a      	ldr	r3, [pc, #296]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073b6:	0c1b      	lsrs	r3, r3, #16
 80073b8:	f003 0303 	and.w	r3, r3, #3
 80073bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80073be:	4b47      	ldr	r3, [pc, #284]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073c4:	0f1b      	lsrs	r3, r3, #28
 80073c6:	f003 0307 	and.w	r3, r3, #7
 80073ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	019a      	lsls	r2, r3, #6
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	041b      	lsls	r3, r3, #16
 80073d6:	431a      	orrs	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	061b      	lsls	r3, r3, #24
 80073de:	431a      	orrs	r2, r3
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	071b      	lsls	r3, r3, #28
 80073e4:	493d      	ldr	r1, [pc, #244]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073e6:	4313      	orrs	r3, r2
 80073e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80073ec:	4b3b      	ldr	r3, [pc, #236]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073f2:	f023 021f 	bic.w	r2, r3, #31
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fa:	3b01      	subs	r3, #1
 80073fc:	4937      	ldr	r1, [pc, #220]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073fe:	4313      	orrs	r3, r2
 8007400:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800740c:	2b00      	cmp	r3, #0
 800740e:	d01d      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007410:	4b32      	ldr	r3, [pc, #200]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007412:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007416:	0e1b      	lsrs	r3, r3, #24
 8007418:	f003 030f 	and.w	r3, r3, #15
 800741c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800741e:	4b2f      	ldr	r3, [pc, #188]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007420:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007424:	0f1b      	lsrs	r3, r3, #28
 8007426:	f003 0307 	and.w	r3, r3, #7
 800742a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	019a      	lsls	r2, r3, #6
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	041b      	lsls	r3, r3, #16
 8007438:	431a      	orrs	r2, r3
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	061b      	lsls	r3, r3, #24
 800743e:	431a      	orrs	r2, r3
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	071b      	lsls	r3, r3, #28
 8007444:	4925      	ldr	r1, [pc, #148]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007446:	4313      	orrs	r3, r2
 8007448:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007454:	2b00      	cmp	r3, #0
 8007456:	d011      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	019a      	lsls	r2, r3, #6
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	041b      	lsls	r3, r3, #16
 8007464:	431a      	orrs	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	061b      	lsls	r3, r3, #24
 800746c:	431a      	orrs	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	071b      	lsls	r3, r3, #28
 8007474:	4919      	ldr	r1, [pc, #100]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007476:	4313      	orrs	r3, r2
 8007478:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800747c:	4b17      	ldr	r3, [pc, #92]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a16      	ldr	r2, [pc, #88]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007482:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007486:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007488:	f7fc fd7e 	bl	8003f88 <HAL_GetTick>
 800748c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800748e:	e008      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007490:	f7fc fd7a 	bl	8003f88 <HAL_GetTick>
 8007494:	4602      	mov	r2, r0
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	1ad3      	subs	r3, r2, r3
 800749a:	2b64      	cmp	r3, #100	; 0x64
 800749c:	d901      	bls.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800749e:	2303      	movs	r3, #3
 80074a0:	e0d7      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074a2:	4b0e      	ldr	r3, [pc, #56]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d0f0      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	f040 80cd 	bne.w	8007650 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80074b6:	4b09      	ldr	r3, [pc, #36]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a08      	ldr	r2, [pc, #32]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074c2:	f7fc fd61 	bl	8003f88 <HAL_GetTick>
 80074c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80074c8:	e00a      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80074ca:	f7fc fd5d 	bl	8003f88 <HAL_GetTick>
 80074ce:	4602      	mov	r2, r0
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	2b64      	cmp	r3, #100	; 0x64
 80074d6:	d903      	bls.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074d8:	2303      	movs	r3, #3
 80074da:	e0ba      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80074dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80074e0:	4b5e      	ldr	r3, [pc, #376]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074ec:	d0ed      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d003      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d009      	beq.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800750a:	2b00      	cmp	r3, #0
 800750c:	d02e      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007512:	2b00      	cmp	r3, #0
 8007514:	d12a      	bne.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007516:	4b51      	ldr	r3, [pc, #324]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800751c:	0c1b      	lsrs	r3, r3, #16
 800751e:	f003 0303 	and.w	r3, r3, #3
 8007522:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007524:	4b4d      	ldr	r3, [pc, #308]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800752a:	0f1b      	lsrs	r3, r3, #28
 800752c:	f003 0307 	and.w	r3, r3, #7
 8007530:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	695b      	ldr	r3, [r3, #20]
 8007536:	019a      	lsls	r2, r3, #6
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	041b      	lsls	r3, r3, #16
 800753c:	431a      	orrs	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	061b      	lsls	r3, r3, #24
 8007544:	431a      	orrs	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	071b      	lsls	r3, r3, #28
 800754a:	4944      	ldr	r1, [pc, #272]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800754c:	4313      	orrs	r3, r2
 800754e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007552:	4b42      	ldr	r3, [pc, #264]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007558:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007560:	3b01      	subs	r3, #1
 8007562:	021b      	lsls	r3, r3, #8
 8007564:	493d      	ldr	r1, [pc, #244]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007566:	4313      	orrs	r3, r2
 8007568:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007574:	2b00      	cmp	r3, #0
 8007576:	d022      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800757c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007580:	d11d      	bne.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007582:	4b36      	ldr	r3, [pc, #216]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007588:	0e1b      	lsrs	r3, r3, #24
 800758a:	f003 030f 	and.w	r3, r3, #15
 800758e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007590:	4b32      	ldr	r3, [pc, #200]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007596:	0f1b      	lsrs	r3, r3, #28
 8007598:	f003 0307 	and.w	r3, r3, #7
 800759c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	019a      	lsls	r2, r3, #6
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a1b      	ldr	r3, [r3, #32]
 80075a8:	041b      	lsls	r3, r3, #16
 80075aa:	431a      	orrs	r2, r3
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	061b      	lsls	r3, r3, #24
 80075b0:	431a      	orrs	r2, r3
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	071b      	lsls	r3, r3, #28
 80075b6:	4929      	ldr	r1, [pc, #164]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075b8:	4313      	orrs	r3, r2
 80075ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0308 	and.w	r3, r3, #8
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d028      	beq.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80075ca:	4b24      	ldr	r3, [pc, #144]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075d0:	0e1b      	lsrs	r3, r3, #24
 80075d2:	f003 030f 	and.w	r3, r3, #15
 80075d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80075d8:	4b20      	ldr	r3, [pc, #128]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075de:	0c1b      	lsrs	r3, r3, #16
 80075e0:	f003 0303 	and.w	r3, r3, #3
 80075e4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	019a      	lsls	r2, r3, #6
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	041b      	lsls	r3, r3, #16
 80075f0:	431a      	orrs	r2, r3
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	061b      	lsls	r3, r3, #24
 80075f6:	431a      	orrs	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	69db      	ldr	r3, [r3, #28]
 80075fc:	071b      	lsls	r3, r3, #28
 80075fe:	4917      	ldr	r1, [pc, #92]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007600:	4313      	orrs	r3, r2
 8007602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007606:	4b15      	ldr	r3, [pc, #84]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007608:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800760c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007614:	4911      	ldr	r1, [pc, #68]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007616:	4313      	orrs	r3, r2
 8007618:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800761c:	4b0f      	ldr	r3, [pc, #60]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a0e      	ldr	r2, [pc, #56]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007626:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007628:	f7fc fcae 	bl	8003f88 <HAL_GetTick>
 800762c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800762e:	e008      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007630:	f7fc fcaa 	bl	8003f88 <HAL_GetTick>
 8007634:	4602      	mov	r2, r0
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	2b64      	cmp	r3, #100	; 0x64
 800763c:	d901      	bls.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800763e:	2303      	movs	r3, #3
 8007640:	e007      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007642:	4b06      	ldr	r3, [pc, #24]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800764a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800764e:	d1ef      	bne.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3720      	adds	r7, #32
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	40023800 	.word	0x40023800

08007660 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d101      	bne.n	8007672 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e081      	b.n	8007776 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	7f5b      	ldrb	r3, [r3, #29]
 8007676:	b2db      	uxtb	r3, r3
 8007678:	2b00      	cmp	r3, #0
 800767a:	d105      	bne.n	8007688 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f7fa ff18 	bl	80024b8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2202      	movs	r2, #2
 800768c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	22ca      	movs	r2, #202	; 0xca
 8007694:	625a      	str	r2, [r3, #36]	; 0x24
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2253      	movs	r2, #83	; 0x53
 800769c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 fb16 	bl	8007cd0 <RTC_EnterInitMode>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d008      	beq.n	80076bc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	22ff      	movs	r2, #255	; 0xff
 80076b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2204      	movs	r2, #4
 80076b6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	e05c      	b.n	8007776 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6899      	ldr	r1, [r3, #8]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	4b2e      	ldr	r3, [pc, #184]	; (8007780 <HAL_RTC_Init+0x120>)
 80076c8:	400b      	ands	r3, r1
 80076ca:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6899      	ldr	r1, [r3, #8]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	685a      	ldr	r2, [r3, #4]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	431a      	orrs	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	695b      	ldr	r3, [r3, #20]
 80076e0:	431a      	orrs	r2, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	430a      	orrs	r2, r1
 80076e8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	68d2      	ldr	r2, [r2, #12]
 80076f2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	6919      	ldr	r1, [r3, #16]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	041a      	lsls	r2, r3, #16
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	430a      	orrs	r2, r1
 8007706:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	68da      	ldr	r2, [r3, #12]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007716:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	f003 0320 	and.w	r3, r3, #32
 8007722:	2b00      	cmp	r3, #0
 8007724:	d10e      	bne.n	8007744 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 faaa 	bl	8007c80 <HAL_RTC_WaitForSynchro>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d008      	beq.n	8007744 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	22ff      	movs	r2, #255	; 0xff
 8007738:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2204      	movs	r2, #4
 800773e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e018      	b.n	8007776 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f022 0208 	bic.w	r2, r2, #8
 8007752:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	699a      	ldr	r2, [r3, #24]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	430a      	orrs	r2, r1
 8007764:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	22ff      	movs	r2, #255	; 0xff
 800776c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2201      	movs	r2, #1
 8007772:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007774:	2300      	movs	r3, #0
  }
}
 8007776:	4618      	mov	r0, r3
 8007778:	3708      	adds	r7, #8
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	ff8fffbf 	.word	0xff8fffbf

08007784 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007784:	b590      	push	{r4, r7, lr}
 8007786:	b087      	sub	sp, #28
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007790:	2300      	movs	r3, #0
 8007792:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	7f1b      	ldrb	r3, [r3, #28]
 8007798:	2b01      	cmp	r3, #1
 800779a:	d101      	bne.n	80077a0 <HAL_RTC_SetTime+0x1c>
 800779c:	2302      	movs	r3, #2
 800779e:	e0a8      	b.n	80078f2 <HAL_RTC_SetTime+0x16e>
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2201      	movs	r2, #1
 80077a4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2202      	movs	r2, #2
 80077aa:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d126      	bne.n	8007800 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d102      	bne.n	80077c6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	2200      	movs	r2, #0
 80077c4:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f000 faac 	bl	8007d28 <RTC_ByteToBcd2>
 80077d0:	4603      	mov	r3, r0
 80077d2:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	785b      	ldrb	r3, [r3, #1]
 80077d8:	4618      	mov	r0, r3
 80077da:	f000 faa5 	bl	8007d28 <RTC_ByteToBcd2>
 80077de:	4603      	mov	r3, r0
 80077e0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80077e2:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	789b      	ldrb	r3, [r3, #2]
 80077e8:	4618      	mov	r0, r3
 80077ea:	f000 fa9d 	bl	8007d28 <RTC_ByteToBcd2>
 80077ee:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80077f0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	7b1b      	ldrb	r3, [r3, #12]
 80077f8:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80077fa:	4313      	orrs	r3, r2
 80077fc:	617b      	str	r3, [r7, #20]
 80077fe:	e018      	b.n	8007832 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800780a:	2b00      	cmp	r3, #0
 800780c:	d102      	bne.n	8007814 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	2200      	movs	r2, #0
 8007812:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	785b      	ldrb	r3, [r3, #1]
 800781e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007820:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007822:	68ba      	ldr	r2, [r7, #8]
 8007824:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007826:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	7b1b      	ldrb	r3, [r3, #12]
 800782c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800782e:	4313      	orrs	r3, r2
 8007830:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	22ca      	movs	r2, #202	; 0xca
 8007838:	625a      	str	r2, [r3, #36]	; 0x24
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2253      	movs	r2, #83	; 0x53
 8007840:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f000 fa44 	bl	8007cd0 <RTC_EnterInitMode>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00b      	beq.n	8007866 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	22ff      	movs	r2, #255	; 0xff
 8007854:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2204      	movs	r2, #4
 800785a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2200      	movs	r2, #0
 8007860:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e045      	b.n	80078f2 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	6979      	ldr	r1, [r7, #20]
 800786c:	4b23      	ldr	r3, [pc, #140]	; (80078fc <HAL_RTC_SetTime+0x178>)
 800786e:	400b      	ands	r3, r1
 8007870:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	689a      	ldr	r2, [r3, #8]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007880:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6899      	ldr	r1, [r3, #8]
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	691a      	ldr	r2, [r3, #16]
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	695b      	ldr	r3, [r3, #20]
 8007890:	431a      	orrs	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	430a      	orrs	r2, r1
 8007898:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68da      	ldr	r2, [r3, #12]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078a8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	f003 0320 	and.w	r3, r3, #32
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d111      	bne.n	80078dc <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f000 f9e1 	bl	8007c80 <HAL_RTC_WaitForSynchro>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d00b      	beq.n	80078dc <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	22ff      	movs	r2, #255	; 0xff
 80078ca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2204      	movs	r2, #4
 80078d0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2200      	movs	r2, #0
 80078d6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	e00a      	b.n	80078f2 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	22ff      	movs	r2, #255	; 0xff
 80078e2:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2201      	movs	r2, #1
 80078e8:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80078f0:	2300      	movs	r3, #0
  }
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	371c      	adds	r7, #28
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd90      	pop	{r4, r7, pc}
 80078fa:	bf00      	nop
 80078fc:	007f7f7f 	.word	0x007f7f7f

08007900 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007900:	b590      	push	{r4, r7, lr}
 8007902:	b087      	sub	sp, #28
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800790c:	2300      	movs	r3, #0
 800790e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	7f1b      	ldrb	r3, [r3, #28]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d101      	bne.n	800791c <HAL_RTC_SetDate+0x1c>
 8007918:	2302      	movs	r3, #2
 800791a:	e092      	b.n	8007a42 <HAL_RTC_SetDate+0x142>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2201      	movs	r2, #1
 8007920:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2202      	movs	r2, #2
 8007926:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d10e      	bne.n	800794c <HAL_RTC_SetDate+0x4c>
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	785b      	ldrb	r3, [r3, #1]
 8007932:	f003 0310 	and.w	r3, r3, #16
 8007936:	2b00      	cmp	r3, #0
 8007938:	d008      	beq.n	800794c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	785b      	ldrb	r3, [r3, #1]
 800793e:	f023 0310 	bic.w	r3, r3, #16
 8007942:	b2db      	uxtb	r3, r3
 8007944:	330a      	adds	r3, #10
 8007946:	b2da      	uxtb	r2, r3
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d11c      	bne.n	800798c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	78db      	ldrb	r3, [r3, #3]
 8007956:	4618      	mov	r0, r3
 8007958:	f000 f9e6 	bl	8007d28 <RTC_ByteToBcd2>
 800795c:	4603      	mov	r3, r0
 800795e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	785b      	ldrb	r3, [r3, #1]
 8007964:	4618      	mov	r0, r3
 8007966:	f000 f9df 	bl	8007d28 <RTC_ByteToBcd2>
 800796a:	4603      	mov	r3, r0
 800796c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800796e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	789b      	ldrb	r3, [r3, #2]
 8007974:	4618      	mov	r0, r3
 8007976:	f000 f9d7 	bl	8007d28 <RTC_ByteToBcd2>
 800797a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800797c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007986:	4313      	orrs	r3, r2
 8007988:	617b      	str	r3, [r7, #20]
 800798a:	e00e      	b.n	80079aa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	78db      	ldrb	r3, [r3, #3]
 8007990:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	785b      	ldrb	r3, [r3, #1]
 8007996:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007998:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800799e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80079a6:	4313      	orrs	r3, r2
 80079a8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	22ca      	movs	r2, #202	; 0xca
 80079b0:	625a      	str	r2, [r3, #36]	; 0x24
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2253      	movs	r2, #83	; 0x53
 80079b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	f000 f988 	bl	8007cd0 <RTC_EnterInitMode>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d00b      	beq.n	80079de <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	22ff      	movs	r2, #255	; 0xff
 80079cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2204      	movs	r2, #4
 80079d2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e031      	b.n	8007a42 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	6979      	ldr	r1, [r7, #20]
 80079e4:	4b19      	ldr	r3, [pc, #100]	; (8007a4c <HAL_RTC_SetDate+0x14c>)
 80079e6:	400b      	ands	r3, r1
 80079e8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68da      	ldr	r2, [r3, #12]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079f8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	f003 0320 	and.w	r3, r3, #32
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d111      	bne.n	8007a2c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f000 f939 	bl	8007c80 <HAL_RTC_WaitForSynchro>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d00b      	beq.n	8007a2c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	22ff      	movs	r2, #255	; 0xff
 8007a1a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2204      	movs	r2, #4
 8007a20:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e00a      	b.n	8007a42 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	22ff      	movs	r2, #255	; 0xff
 8007a32:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2201      	movs	r2, #1
 8007a38:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007a40:	2300      	movs	r3, #0
  }
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	371c      	adds	r7, #28
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd90      	pop	{r4, r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	00ffff3f 	.word	0x00ffff3f

08007a50 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007a50:	b590      	push	{r4, r7, lr}
 8007a52:	b089      	sub	sp, #36	; 0x24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8007a60:	2300      	movs	r3, #0
 8007a62:	61fb      	str	r3, [r7, #28]
 8007a64:	2300      	movs	r3, #0
 8007a66:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	7f1b      	ldrb	r3, [r3, #28]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d101      	bne.n	8007a74 <HAL_RTC_SetAlarm+0x24>
 8007a70:	2302      	movs	r3, #2
 8007a72:	e101      	b.n	8007c78 <HAL_RTC_SetAlarm+0x228>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2201      	movs	r2, #1
 8007a78:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2202      	movs	r2, #2
 8007a7e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d137      	bne.n	8007af6 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d102      	bne.n	8007a9a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	2200      	movs	r2, #0
 8007a98:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f000 f942 	bl	8007d28 <RTC_ByteToBcd2>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	785b      	ldrb	r3, [r3, #1]
 8007aac:	4618      	mov	r0, r3
 8007aae:	f000 f93b 	bl	8007d28 <RTC_ByteToBcd2>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007ab6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	789b      	ldrb	r3, [r3, #2]
 8007abc:	4618      	mov	r0, r3
 8007abe:	f000 f933 	bl	8007d28 <RTC_ByteToBcd2>
 8007ac2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007ac4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	7b1b      	ldrb	r3, [r3, #12]
 8007acc:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007ace:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f000 f925 	bl	8007d28 <RTC_ByteToBcd2>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007ae2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007aea:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007af0:	4313      	orrs	r3, r2
 8007af2:	61fb      	str	r3, [r7, #28]
 8007af4:	e023      	b.n	8007b3e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d102      	bne.n	8007b0a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	2200      	movs	r2, #0
 8007b08:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	785b      	ldrb	r3, [r3, #1]
 8007b14:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007b16:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007b1c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	7b1b      	ldrb	r3, [r3, #12]
 8007b22:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007b24:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007b2c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007b2e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007b34:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	685a      	ldr	r2, [r3, #4]
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	69db      	ldr	r3, [r3, #28]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	22ca      	movs	r2, #202	; 0xca
 8007b50:	625a      	str	r2, [r3, #36]	; 0x24
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2253      	movs	r2, #83	; 0x53
 8007b58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b62:	d13f      	bne.n	8007be4 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	689a      	ldr	r2, [r3, #8]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b72:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	689a      	ldr	r2, [r3, #8]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b82:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007b84:	f7fc fa00 	bl	8003f88 <HAL_GetTick>
 8007b88:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007b8a:	e013      	b.n	8007bb4 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007b8c:	f7fc f9fc 	bl	8003f88 <HAL_GetTick>
 8007b90:	4602      	mov	r2, r0
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b9a:	d90b      	bls.n	8007bb4 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	22ff      	movs	r2, #255	; 0xff
 8007ba2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2203      	movs	r2, #3
 8007ba8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	e061      	b.n	8007c78 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	f003 0301 	and.w	r3, r3, #1
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d0e4      	beq.n	8007b8c <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	69fa      	ldr	r2, [r7, #28]
 8007bc8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	697a      	ldr	r2, [r7, #20]
 8007bd0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	689a      	ldr	r2, [r3, #8]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007be0:	609a      	str	r2, [r3, #8]
 8007be2:	e03e      	b.n	8007c62 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	689a      	ldr	r2, [r3, #8]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007bf2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	689a      	ldr	r2, [r3, #8]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c02:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007c04:	f7fc f9c0 	bl	8003f88 <HAL_GetTick>
 8007c08:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007c0a:	e013      	b.n	8007c34 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007c0c:	f7fc f9bc 	bl	8003f88 <HAL_GetTick>
 8007c10:	4602      	mov	r2, r0
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c1a:	d90b      	bls.n	8007c34 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	22ff      	movs	r2, #255	; 0xff
 8007c22:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2203      	movs	r2, #3
 8007c28:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007c30:	2303      	movs	r3, #3
 8007c32:	e021      	b.n	8007c78 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	f003 0302 	and.w	r3, r3, #2
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d0e4      	beq.n	8007c0c <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	69fa      	ldr	r2, [r7, #28]
 8007c48:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	689a      	ldr	r2, [r3, #8]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c60:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	22ff      	movs	r2, #255	; 0xff
 8007c68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3724      	adds	r7, #36	; 0x24
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd90      	pop	{r4, r7, pc}

08007c80 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68da      	ldr	r2, [r3, #12]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007c9a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007c9c:	f7fc f974 	bl	8003f88 <HAL_GetTick>
 8007ca0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007ca2:	e009      	b.n	8007cb8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007ca4:	f7fc f970 	bl	8003f88 <HAL_GetTick>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007cb2:	d901      	bls.n	8007cb8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e007      	b.n	8007cc8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	f003 0320 	and.w	r3, r3, #32
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d0ee      	beq.n	8007ca4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3710      	adds	r7, #16
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d119      	bne.n	8007d1e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007cf4:	f7fc f948 	bl	8003f88 <HAL_GetTick>
 8007cf8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007cfa:	e009      	b.n	8007d10 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007cfc:	f7fc f944 	bl	8003f88 <HAL_GetTick>
 8007d00:	4602      	mov	r2, r0
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d0a:	d901      	bls.n	8007d10 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	e007      	b.n	8007d20 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d0ee      	beq.n	8007cfc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	4603      	mov	r3, r0
 8007d30:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8007d32:	2300      	movs	r3, #0
 8007d34:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8007d36:	e005      	b.n	8007d44 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8007d3e:	79fb      	ldrb	r3, [r7, #7]
 8007d40:	3b0a      	subs	r3, #10
 8007d42:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8007d44:	79fb      	ldrb	r3, [r7, #7]
 8007d46:	2b09      	cmp	r3, #9
 8007d48:	d8f6      	bhi.n	8007d38 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	011b      	lsls	r3, r3, #4
 8007d50:	b2da      	uxtb	r2, r3
 8007d52:	79fb      	ldrb	r3, [r7, #7]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	b2db      	uxtb	r3, r3
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3714      	adds	r7, #20
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b087      	sub	sp, #28
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007d70:	2300      	movs	r3, #0
 8007d72:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	7f1b      	ldrb	r3, [r3, #28]
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d101      	bne.n	8007d80 <HAL_RTCEx_SetTimeStamp+0x1c>
 8007d7c:	2302      	movs	r3, #2
 8007d7e:	e03e      	b.n	8007dfe <HAL_RTCEx_SetTimeStamp+0x9a>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2201      	movs	r2, #1
 8007d84:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2202      	movs	r2, #2
 8007d8a:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	689a      	ldr	r2, [r3, #8]
 8007d92:	4b1e      	ldr	r3, [pc, #120]	; (8007e0c <HAL_RTCEx_SetTimeStamp+0xa8>)
 8007d94:	4013      	ands	r3, r2
 8007d96:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8007d98:	697a      	ldr	r2, [r7, #20]
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	22ca      	movs	r2, #202	; 0xca
 8007da6:	625a      	str	r2, [r3, #36]	; 0x24
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2253      	movs	r2, #83	; 0x53
 8007dae:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f022 0206 	bic.w	r2, r2, #6
 8007dbe:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	430a      	orrs	r2, r1
 8007dce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	697a      	ldr	r2, [r7, #20]
 8007dd6:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	689a      	ldr	r2, [r3, #8]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007de6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	22ff      	movs	r2, #255	; 0xff
 8007dee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2201      	movs	r2, #1
 8007df4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	371c      	adds	r7, #28
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	fffff7f7 	.word	0xfffff7f7

08007e10 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d101      	bne.n	8007e22 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e022      	b.n	8007e68 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d105      	bne.n	8007e3a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f7fa fb59 	bl	80024ec <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2203      	movs	r2, #3
 8007e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f814 	bl	8007e70 <HAL_SD_InitCard>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e00a      	b.n	8007e68 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2201      	movs	r2, #1
 8007e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007e70:	b5b0      	push	{r4, r5, r7, lr}
 8007e72:	b08e      	sub	sp, #56	; 0x38
 8007e74:	af04      	add	r7, sp, #16
 8007e76:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007e80:	2300      	movs	r3, #0
 8007e82:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007e84:	2300      	movs	r3, #0
 8007e86:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8007e8c:	2376      	movs	r3, #118	; 0x76
 8007e8e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681d      	ldr	r5, [r3, #0]
 8007e94:	466c      	mov	r4, sp
 8007e96:	f107 0314 	add.w	r3, r7, #20
 8007e9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007e9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007ea2:	f107 0308 	add.w	r3, r7, #8
 8007ea6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	f002 ff2d 	bl	800ad08 <SDMMC_Init>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d001      	beq.n	8007ec0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e056      	b.n	8007f6e <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	685a      	ldr	r2, [r3, #4]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ece:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f002 ff61 	bl	800ad9c <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	685a      	ldr	r2, [r3, #4]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ee8:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fff2 	bl	8008ed4 <SD_PowerON>
 8007ef0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ef2:	6a3b      	ldr	r3, [r7, #32]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d00b      	beq.n	8007f10 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f04:	6a3b      	ldr	r3, [r7, #32]
 8007f06:	431a      	orrs	r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e02e      	b.n	8007f6e <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 ff13 	bl	8008d3c <SD_InitCard>
 8007f16:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f18:	6a3b      	ldr	r3, [r7, #32]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00b      	beq.n	8007f36 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2201      	movs	r2, #1
 8007f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f2a:	6a3b      	ldr	r3, [r7, #32]
 8007f2c:	431a      	orrs	r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	e01b      	b.n	8007f6e <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f002 ffc0 	bl	800aec4 <SDMMC_CmdBlockLength>
 8007f44:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f46:	6a3b      	ldr	r3, [r7, #32]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00f      	beq.n	8007f6c <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a09      	ldr	r2, [pc, #36]	; (8007f78 <HAL_SD_InitCard+0x108>)
 8007f52:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f58:	6a3b      	ldr	r3, [r7, #32]
 8007f5a:	431a      	orrs	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e000      	b.n	8007f6e <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3728      	adds	r7, #40	; 0x28
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bdb0      	pop	{r4, r5, r7, pc}
 8007f76:	bf00      	nop
 8007f78:	004005ff 	.word	0x004005ff

08007f7c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b08c      	sub	sp, #48	; 0x30
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	607a      	str	r2, [r7, #4]
 8007f88:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d107      	bne.n	8007fa4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f98:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e0c3      	b.n	800812c <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	f040 80bc 	bne.w	800812a <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007fb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	441a      	add	r2, r3
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d907      	bls.n	8007fd6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e0aa      	b.n	800812c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2203      	movs	r2, #3
 8007fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007ff4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ffa:	4a4e      	ldr	r2, [pc, #312]	; (8008134 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007ffc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008002:	4a4d      	ldr	r2, [pc, #308]	; (8008138 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8008004:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800a:	2200      	movs	r2, #0
 800800c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008012:	2200      	movs	r2, #0
 8008014:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008026:	689a      	ldr	r2, [r3, #8]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	430a      	orrs	r2, r1
 8008030:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	3380      	adds	r3, #128	; 0x80
 800803c:	4619      	mov	r1, r3
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	025b      	lsls	r3, r3, #9
 8008044:	089b      	lsrs	r3, r3, #2
 8008046:	f7fc fd5f 	bl	8004b08 <HAL_DMA_Start_IT>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d017      	beq.n	8008080 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800805e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a35      	ldr	r2, [pc, #212]	; (800813c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008066:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	e055      	b.n	800812c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f042 0208 	orr.w	r2, r2, #8
 800808e:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008094:	2b01      	cmp	r3, #1
 8008096:	d002      	beq.n	800809e <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8008098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809a:	025b      	lsls	r3, r3, #9
 800809c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800809e:	f04f 33ff 	mov.w	r3, #4294967295
 80080a2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	025b      	lsls	r3, r3, #9
 80080a8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80080aa:	2390      	movs	r3, #144	; 0x90
 80080ac:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80080ae:	2302      	movs	r3, #2
 80080b0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80080b2:	2300      	movs	r3, #0
 80080b4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80080b6:	2301      	movs	r3, #1
 80080b8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f107 0210 	add.w	r2, r7, #16
 80080c2:	4611      	mov	r1, r2
 80080c4:	4618      	mov	r0, r3
 80080c6:	f002 fed1 	bl	800ae6c <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d90a      	bls.n	80080e6 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2282      	movs	r2, #130	; 0x82
 80080d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080dc:	4618      	mov	r0, r3
 80080de:	f002 ff35 	bl	800af4c <SDMMC_CmdReadMultiBlock>
 80080e2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80080e4:	e009      	b.n	80080fa <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2281      	movs	r2, #129	; 0x81
 80080ea:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080f2:	4618      	mov	r0, r3
 80080f4:	f002 ff08 	bl	800af08 <SDMMC_CmdReadSingleBlock>
 80080f8:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80080fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d012      	beq.n	8008126 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a0d      	ldr	r2, [pc, #52]	; (800813c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008106:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800810c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810e:	431a      	orrs	r2, r3
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2200      	movs	r2, #0
 8008120:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e002      	b.n	800812c <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8008126:	2300      	movs	r3, #0
 8008128:	e000      	b.n	800812c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800812a:	2302      	movs	r3, #2
  }
}
 800812c:	4618      	mov	r0, r3
 800812e:	3730      	adds	r7, #48	; 0x30
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	08008b4b 	.word	0x08008b4b
 8008138:	08008bbd 	.word	0x08008bbd
 800813c:	004005ff 	.word	0x004005ff

08008140 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b08c      	sub	sp, #48	; 0x30
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	607a      	str	r2, [r7, #4]
 800814c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d107      	bne.n	8008168 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800815c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	e0c6      	b.n	80082f6 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800816e:	b2db      	uxtb	r3, r3
 8008170:	2b01      	cmp	r3, #1
 8008172:	f040 80bf 	bne.w	80082f4 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800817c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	441a      	add	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008186:	429a      	cmp	r2, r3
 8008188:	d907      	bls.n	800819a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800818e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e0ad      	b.n	80082f6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2203      	movs	r2, #3
 800819e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2200      	movs	r2, #0
 80081a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f042 021a 	orr.w	r2, r2, #26
 80081b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081be:	4a50      	ldr	r2, [pc, #320]	; (8008300 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80081c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081c6:	4a4f      	ldr	r2, [pc, #316]	; (8008304 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80081c8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ce:	2200      	movs	r2, #0
 80081d0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d002      	beq.n	80081e0 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80081da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081dc:	025b      	lsls	r3, r3, #9
 80081de:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d90a      	bls.n	80081fc <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	22a0      	movs	r2, #160	; 0xa0
 80081ea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081f2:	4618      	mov	r0, r3
 80081f4:	f002 feee 	bl	800afd4 <SDMMC_CmdWriteMultiBlock>
 80081f8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80081fa:	e009      	b.n	8008210 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2290      	movs	r2, #144	; 0x90
 8008200:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008208:	4618      	mov	r0, r3
 800820a:	f002 fec1 	bl	800af90 <SDMMC_CmdWriteSingleBlock>
 800820e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008212:	2b00      	cmp	r3, #0
 8008214:	d012      	beq.n	800823c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a3b      	ldr	r2, [pc, #236]	; (8008308 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800821c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008224:	431a      	orrs	r2, r3
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2201      	movs	r2, #1
 800822e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2200      	movs	r2, #0
 8008236:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	e05c      	b.n	80082f6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f042 0208 	orr.w	r2, r2, #8
 800824a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008250:	2240      	movs	r2, #64	; 0x40
 8008252:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008264:	689a      	ldr	r2, [r3, #8]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	430a      	orrs	r2, r1
 800826e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008274:	68b9      	ldr	r1, [r7, #8]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	3380      	adds	r3, #128	; 0x80
 800827c:	461a      	mov	r2, r3
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	025b      	lsls	r3, r3, #9
 8008282:	089b      	lsrs	r3, r3, #2
 8008284:	f7fc fc40 	bl	8004b08 <HAL_DMA_Start_IT>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d01a      	beq.n	80082c4 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f022 021a 	bic.w	r2, r2, #26
 800829c:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a19      	ldr	r2, [pc, #100]	; (8008308 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80082a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2201      	movs	r2, #1
 80082b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2200      	movs	r2, #0
 80082be:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	e018      	b.n	80082f6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80082c4:	f04f 33ff 	mov.w	r3, #4294967295
 80082c8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	025b      	lsls	r3, r3, #9
 80082ce:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80082d0:	2390      	movs	r3, #144	; 0x90
 80082d2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80082d4:	2300      	movs	r3, #0
 80082d6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80082d8:	2300      	movs	r3, #0
 80082da:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80082dc:	2301      	movs	r3, #1
 80082de:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f107 0210 	add.w	r2, r7, #16
 80082e8:	4611      	mov	r1, r2
 80082ea:	4618      	mov	r0, r3
 80082ec:	f002 fdbe 	bl	800ae6c <SDMMC_ConfigData>

      return HAL_OK;
 80082f0:	2300      	movs	r3, #0
 80082f2:	e000      	b.n	80082f6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80082f4:	2302      	movs	r3, #2
  }
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3730      	adds	r7, #48	; 0x30
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	08008b21 	.word	0x08008b21
 8008304:	08008bbd 	.word	0x08008bbd
 8008308:	004005ff 	.word	0x004005ff

0800830c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008318:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008324:	2b00      	cmp	r3, #0
 8008326:	d008      	beq.n	800833a <HAL_SD_IRQHandler+0x2e>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f003 0308 	and.w	r3, r3, #8
 800832e:	2b00      	cmp	r3, #0
 8008330:	d003      	beq.n	800833a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 ffed 	bl	8009312 <SD_Read_IT>
 8008338:	e153      	b.n	80085e2 <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008344:	2b00      	cmp	r3, #0
 8008346:	f000 808d 	beq.w	8008464 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008352:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	4ba3      	ldr	r3, [pc, #652]	; (80085ec <HAL_SD_IRQHandler+0x2e0>)
 8008360:	400b      	ands	r3, r1
 8008362:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f022 0201 	bic.w	r2, r2, #1
 8008372:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f003 0308 	and.w	r3, r3, #8
 800837a:	2b00      	cmp	r3, #0
 800837c:	d039      	beq.n	80083f2 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f003 0302 	and.w	r3, r3, #2
 8008384:	2b00      	cmp	r3, #0
 8008386:	d104      	bne.n	8008392 <HAL_SD_IRQHandler+0x86>
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f003 0320 	and.w	r3, r3, #32
 800838e:	2b00      	cmp	r3, #0
 8008390:	d011      	beq.n	80083b6 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4618      	mov	r0, r3
 8008398:	f002 fe3e 	bl	800b018 <SDMMC_CmdStopTransfer>
 800839c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d008      	beq.n	80083b6 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	431a      	orrs	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 f921 	bl	80085f8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f240 523a 	movw	r2, #1338	; 0x53a
 80083be:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f003 0301 	and.w	r3, r3, #1
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d104      	bne.n	80083e2 <HAL_SD_IRQHandler+0xd6>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f003 0302 	and.w	r3, r3, #2
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d003      	beq.n	80083ea <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f7fb fbb6 	bl	8003b54 <HAL_SD_RxCpltCallback>
 80083e8:	e0fb      	b.n	80085e2 <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f7fb fba8 	bl	8003b40 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80083f0:	e0f7      	b.n	80085e2 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f000 80f2 	beq.w	80085e2 <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f003 0320 	and.w	r3, r3, #32
 8008404:	2b00      	cmp	r3, #0
 8008406:	d011      	beq.n	800842c <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4618      	mov	r0, r3
 800840e:	f002 fe03 	bl	800b018 <SDMMC_CmdStopTransfer>
 8008412:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d008      	beq.n	800842c <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	431a      	orrs	r2, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f8e6 	bl	80085f8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f003 0301 	and.w	r3, r3, #1
 8008432:	2b00      	cmp	r3, #0
 8008434:	f040 80d5 	bne.w	80085e2 <HAL_SD_IRQHandler+0x2d6>
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f003 0302 	and.w	r3, r3, #2
 800843e:	2b00      	cmp	r3, #0
 8008440:	f040 80cf 	bne.w	80085e2 <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f022 0208 	bic.w	r2, r2, #8
 8008452:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f7fb fb6f 	bl	8003b40 <HAL_SD_TxCpltCallback>
}
 8008462:	e0be      	b.n	80085e2 <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800846a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800846e:	2b00      	cmp	r3, #0
 8008470:	d008      	beq.n	8008484 <HAL_SD_IRQHandler+0x178>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f003 0308 	and.w	r3, r3, #8
 8008478:	2b00      	cmp	r3, #0
 800847a:	d003      	beq.n	8008484 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 ff99 	bl	80093b4 <SD_Write_IT>
 8008482:	e0ae      	b.n	80085e2 <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800848a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800848e:	2b00      	cmp	r3, #0
 8008490:	f000 80a7 	beq.w	80085e2 <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800849a:	f003 0302 	and.w	r3, r3, #2
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d005      	beq.n	80084ae <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a6:	f043 0202 	orr.w	r2, r3, #2
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084b4:	f003 0308 	and.w	r3, r3, #8
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d005      	beq.n	80084c8 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c0:	f043 0208 	orr.w	r2, r3, #8
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ce:	f003 0320 	and.w	r3, r3, #32
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d005      	beq.n	80084e2 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084da:	f043 0220 	orr.w	r2, r3, #32
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084e8:	f003 0310 	and.w	r3, r3, #16
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d005      	beq.n	80084fc <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f4:	f043 0210 	orr.w	r2, r3, #16
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f240 523a 	movw	r2, #1338	; 0x53a
 8008504:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008514:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4618      	mov	r0, r3
 800851c:	f002 fd7c 	bl	800b018 <SDMMC_CmdStopTransfer>
 8008520:	4602      	mov	r2, r0
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008526:	431a      	orrs	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f003 0308 	and.w	r3, r3, #8
 8008532:	2b00      	cmp	r3, #0
 8008534:	d00a      	beq.n	800854c <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2201      	movs	r2, #1
 800853a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 f857 	bl	80085f8 <HAL_SD_ErrorCallback>
}
 800854a:	e04a      	b.n	80085e2 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008552:	2b00      	cmp	r3, #0
 8008554:	d045      	beq.n	80085e2 <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f003 0310 	and.w	r3, r3, #16
 800855c:	2b00      	cmp	r3, #0
 800855e:	d104      	bne.n	800856a <HAL_SD_IRQHandler+0x25e>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f003 0320 	and.w	r3, r3, #32
 8008566:	2b00      	cmp	r3, #0
 8008568:	d011      	beq.n	800858e <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800856e:	4a20      	ldr	r2, [pc, #128]	; (80085f0 <HAL_SD_IRQHandler+0x2e4>)
 8008570:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008576:	4618      	mov	r0, r3
 8008578:	f7fc fb26 	bl	8004bc8 <HAL_DMA_Abort_IT>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d02f      	beq.n	80085e2 <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008586:	4618      	mov	r0, r3
 8008588:	f000 fb6a 	bl	8008c60 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800858c:	e029      	b.n	80085e2 <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f003 0301 	and.w	r3, r3, #1
 8008594:	2b00      	cmp	r3, #0
 8008596:	d104      	bne.n	80085a2 <HAL_SD_IRQHandler+0x296>
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f003 0302 	and.w	r3, r3, #2
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d011      	beq.n	80085c6 <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a6:	4a13      	ldr	r2, [pc, #76]	; (80085f4 <HAL_SD_IRQHandler+0x2e8>)
 80085a8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7fc fb0a 	bl	8004bc8 <HAL_DMA_Abort_IT>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d013      	beq.n	80085e2 <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 fb85 	bl	8008cce <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80085c4:	e00d      	b.n	80085e2 <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f7fb faa6 	bl	8003b2c <HAL_SD_AbortCallback>
}
 80085e0:	e7ff      	b.n	80085e2 <HAL_SD_IRQHandler+0x2d6>
 80085e2:	bf00      	nop
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	ffff3ec5 	.word	0xffff3ec5
 80085f0:	08008c61 	.word	0x08008c61
 80085f4:	08008ccf 	.word	0x08008ccf

080085f8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008600:	bf00      	nop
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800861a:	0f9b      	lsrs	r3, r3, #30
 800861c:	b2da      	uxtb	r2, r3
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008626:	0e9b      	lsrs	r3, r3, #26
 8008628:	b2db      	uxtb	r3, r3
 800862a:	f003 030f 	and.w	r3, r3, #15
 800862e:	b2da      	uxtb	r2, r3
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008638:	0e1b      	lsrs	r3, r3, #24
 800863a:	b2db      	uxtb	r3, r3
 800863c:	f003 0303 	and.w	r3, r3, #3
 8008640:	b2da      	uxtb	r2, r3
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800864a:	0c1b      	lsrs	r3, r3, #16
 800864c:	b2da      	uxtb	r2, r3
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008656:	0a1b      	lsrs	r3, r3, #8
 8008658:	b2da      	uxtb	r2, r3
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008662:	b2da      	uxtb	r2, r3
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800866c:	0d1b      	lsrs	r3, r3, #20
 800866e:	b29a      	uxth	r2, r3
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008678:	0c1b      	lsrs	r3, r3, #16
 800867a:	b2db      	uxtb	r3, r3
 800867c:	f003 030f 	and.w	r3, r3, #15
 8008680:	b2da      	uxtb	r2, r3
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800868a:	0bdb      	lsrs	r3, r3, #15
 800868c:	b2db      	uxtb	r3, r3
 800868e:	f003 0301 	and.w	r3, r3, #1
 8008692:	b2da      	uxtb	r2, r3
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800869c:	0b9b      	lsrs	r3, r3, #14
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	f003 0301 	and.w	r3, r3, #1
 80086a4:	b2da      	uxtb	r2, r3
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086ae:	0b5b      	lsrs	r3, r3, #13
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	f003 0301 	and.w	r3, r3, #1
 80086b6:	b2da      	uxtb	r2, r3
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086c0:	0b1b      	lsrs	r3, r3, #12
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	f003 0301 	and.w	r3, r3, #1
 80086c8:	b2da      	uxtb	r2, r3
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	2200      	movs	r2, #0
 80086d2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d163      	bne.n	80087a4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086e0:	009a      	lsls	r2, r3, #2
 80086e2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80086e6:	4013      	ands	r3, r2
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80086ec:	0f92      	lsrs	r2, r2, #30
 80086ee:	431a      	orrs	r2, r3
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086f8:	0edb      	lsrs	r3, r3, #27
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	f003 0307 	and.w	r3, r3, #7
 8008700:	b2da      	uxtb	r2, r3
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800870a:	0e1b      	lsrs	r3, r3, #24
 800870c:	b2db      	uxtb	r3, r3
 800870e:	f003 0307 	and.w	r3, r3, #7
 8008712:	b2da      	uxtb	r2, r3
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800871c:	0d5b      	lsrs	r3, r3, #21
 800871e:	b2db      	uxtb	r3, r3
 8008720:	f003 0307 	and.w	r3, r3, #7
 8008724:	b2da      	uxtb	r2, r3
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800872e:	0c9b      	lsrs	r3, r3, #18
 8008730:	b2db      	uxtb	r3, r3
 8008732:	f003 0307 	and.w	r3, r3, #7
 8008736:	b2da      	uxtb	r2, r3
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008740:	0bdb      	lsrs	r3, r3, #15
 8008742:	b2db      	uxtb	r3, r3
 8008744:	f003 0307 	and.w	r3, r3, #7
 8008748:	b2da      	uxtb	r2, r3
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	1c5a      	adds	r2, r3, #1
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	7e1b      	ldrb	r3, [r3, #24]
 800875c:	b2db      	uxtb	r3, r3
 800875e:	f003 0307 	and.w	r3, r3, #7
 8008762:	3302      	adds	r3, #2
 8008764:	2201      	movs	r2, #1
 8008766:	fa02 f303 	lsl.w	r3, r2, r3
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800876e:	fb02 f203 	mul.w	r2, r2, r3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	7a1b      	ldrb	r3, [r3, #8]
 800877a:	b2db      	uxtb	r3, r3
 800877c:	f003 030f 	and.w	r3, r3, #15
 8008780:	2201      	movs	r2, #1
 8008782:	409a      	lsls	r2, r3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008790:	0a52      	lsrs	r2, r2, #9
 8008792:	fb02 f203 	mul.w	r2, r2, r3
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087a0:	661a      	str	r2, [r3, #96]	; 0x60
 80087a2:	e031      	b.n	8008808 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d11d      	bne.n	80087e8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087b0:	041b      	lsls	r3, r3, #16
 80087b2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087ba:	0c1b      	lsrs	r3, r3, #16
 80087bc:	431a      	orrs	r2, r3
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	691b      	ldr	r3, [r3, #16]
 80087c6:	3301      	adds	r3, #1
 80087c8:	029a      	lsls	r2, r3, #10
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087dc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	661a      	str	r2, [r3, #96]	; 0x60
 80087e6:	e00f      	b.n	8008808 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a58      	ldr	r2, [pc, #352]	; (8008950 <HAL_SD_GetCardCSD+0x344>)
 80087ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2201      	movs	r2, #1
 8008800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	e09d      	b.n	8008944 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800880c:	0b9b      	lsrs	r3, r3, #14
 800880e:	b2db      	uxtb	r3, r3
 8008810:	f003 0301 	and.w	r3, r3, #1
 8008814:	b2da      	uxtb	r2, r3
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800881e:	09db      	lsrs	r3, r3, #7
 8008820:	b2db      	uxtb	r3, r3
 8008822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008826:	b2da      	uxtb	r2, r3
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008830:	b2db      	uxtb	r3, r3
 8008832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008836:	b2da      	uxtb	r2, r3
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008840:	0fdb      	lsrs	r3, r3, #31
 8008842:	b2da      	uxtb	r2, r3
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800884c:	0f5b      	lsrs	r3, r3, #29
 800884e:	b2db      	uxtb	r3, r3
 8008850:	f003 0303 	and.w	r3, r3, #3
 8008854:	b2da      	uxtb	r2, r3
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800885e:	0e9b      	lsrs	r3, r3, #26
 8008860:	b2db      	uxtb	r3, r3
 8008862:	f003 0307 	and.w	r3, r3, #7
 8008866:	b2da      	uxtb	r2, r3
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008870:	0d9b      	lsrs	r3, r3, #22
 8008872:	b2db      	uxtb	r3, r3
 8008874:	f003 030f 	and.w	r3, r3, #15
 8008878:	b2da      	uxtb	r2, r3
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008882:	0d5b      	lsrs	r3, r3, #21
 8008884:	b2db      	uxtb	r3, r3
 8008886:	f003 0301 	and.w	r3, r3, #1
 800888a:	b2da      	uxtb	r2, r3
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	2200      	movs	r2, #0
 8008896:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800889e:	0c1b      	lsrs	r3, r3, #16
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	f003 0301 	and.w	r3, r3, #1
 80088a6:	b2da      	uxtb	r2, r3
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088b2:	0bdb      	lsrs	r3, r3, #15
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	f003 0301 	and.w	r3, r3, #1
 80088ba:	b2da      	uxtb	r2, r3
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088c6:	0b9b      	lsrs	r3, r3, #14
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	f003 0301 	and.w	r3, r3, #1
 80088ce:	b2da      	uxtb	r2, r3
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088da:	0b5b      	lsrs	r3, r3, #13
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	f003 0301 	and.w	r3, r3, #1
 80088e2:	b2da      	uxtb	r2, r3
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ee:	0b1b      	lsrs	r3, r3, #12
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	f003 0301 	and.w	r3, r3, #1
 80088f6:	b2da      	uxtb	r2, r3
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008902:	0a9b      	lsrs	r3, r3, #10
 8008904:	b2db      	uxtb	r3, r3
 8008906:	f003 0303 	and.w	r3, r3, #3
 800890a:	b2da      	uxtb	r2, r3
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008916:	0a1b      	lsrs	r3, r3, #8
 8008918:	b2db      	uxtb	r3, r3
 800891a:	f003 0303 	and.w	r3, r3, #3
 800891e:	b2da      	uxtb	r2, r3
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800892a:	085b      	lsrs	r3, r3, #1
 800892c:	b2db      	uxtb	r3, r3
 800892e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008932:	b2da      	uxtb	r2, r3
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	2201      	movs	r2, #1
 800893e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	370c      	adds	r7, #12
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr
 8008950:	004005ff 	.word	0x004005ff

08008954 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800899e:	2300      	movs	r3, #0
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	370c      	adds	r7, #12
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80089ac:	b5b0      	push	{r4, r5, r7, lr}
 80089ae:	b08e      	sub	sp, #56	; 0x38
 80089b0:	af04      	add	r7, sp, #16
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80089b6:	2300      	movs	r3, #0
 80089b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2203      	movs	r2, #3
 80089c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089c8:	2b03      	cmp	r3, #3
 80089ca:	d02e      	beq.n	8008a2a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089d2:	d106      	bne.n	80089e2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	639a      	str	r2, [r3, #56]	; 0x38
 80089e0:	e029      	b.n	8008a36 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089e8:	d10a      	bne.n	8008a00 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 fb28 	bl	8009040 <SD_WideBus_Enable>
 80089f0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089f6:	6a3b      	ldr	r3, [r7, #32]
 80089f8:	431a      	orrs	r2, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	639a      	str	r2, [r3, #56]	; 0x38
 80089fe:	e01a      	b.n	8008a36 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d10a      	bne.n	8008a1c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 fb65 	bl	80090d6 <SD_WideBus_Disable>
 8008a0c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a12:	6a3b      	ldr	r3, [r7, #32]
 8008a14:	431a      	orrs	r2, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	639a      	str	r2, [r3, #56]	; 0x38
 8008a1a:	e00c      	b.n	8008a36 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a20:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	639a      	str	r2, [r3, #56]	; 0x38
 8008a28:	e005      	b.n	8008a36 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a2e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00b      	beq.n	8008a56 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a26      	ldr	r2, [pc, #152]	; (8008adc <HAL_SD_ConfigWideBusOperation+0x130>)
 8008a44:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008a54:	e01f      	b.n	8008a96 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	695b      	ldr	r3, [r3, #20]
 8008a70:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	699b      	ldr	r3, [r3, #24]
 8008a76:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681d      	ldr	r5, [r3, #0]
 8008a7c:	466c      	mov	r4, sp
 8008a7e:	f107 0314 	add.w	r3, r7, #20
 8008a82:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008a86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008a8a:	f107 0308 	add.w	r3, r7, #8
 8008a8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008a90:	4628      	mov	r0, r5
 8008a92:	f002 f939 	bl	800ad08 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f002 fa10 	bl	800aec4 <SDMMC_CmdBlockLength>
 8008aa4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008aa6:	6a3b      	ldr	r3, [r7, #32]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00c      	beq.n	8008ac6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a0a      	ldr	r2, [pc, #40]	; (8008adc <HAL_SD_ConfigWideBusOperation+0x130>)
 8008ab2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ab8:	6a3b      	ldr	r3, [r7, #32]
 8008aba:	431a      	orrs	r2, r3
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008ace:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3728      	adds	r7, #40	; 0x28
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bdb0      	pop	{r4, r5, r7, pc}
 8008ada:	bf00      	nop
 8008adc:	004005ff 	.word	0x004005ff

08008ae0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008aec:	f107 030c 	add.w	r3, r7, #12
 8008af0:	4619      	mov	r1, r3
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 fa7c 	bl	8008ff0 <SD_SendStatus>
 8008af8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d005      	beq.n	8008b0c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	431a      	orrs	r2, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	0a5b      	lsrs	r3, r3, #9
 8008b10:	f003 030f 	and.w	r3, r3, #15
 8008b14:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008b16:	693b      	ldr	r3, [r7, #16]
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3718      	adds	r7, #24
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b085      	sub	sp, #20
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b2c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b3c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008b3e:	bf00      	nop
 8008b40:	3714      	adds	r7, #20
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr

08008b4a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b084      	sub	sp, #16
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b56:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b5c:	2b82      	cmp	r3, #130	; 0x82
 8008b5e:	d111      	bne.n	8008b84 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4618      	mov	r0, r3
 8008b66:	f002 fa57 	bl	800b018 <SDMMC_CmdStopTransfer>
 8008b6a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d008      	beq.n	8008b84 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	431a      	orrs	r2, r3
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f7ff fd3a 	bl	80085f8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f022 0208 	bic.w	r2, r2, #8
 8008b92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f240 523a 	movw	r2, #1338	; 0x53a
 8008b9c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f7fa ffd1 	bl	8003b54 <HAL_SD_RxCpltCallback>
#endif
}
 8008bb2:	bf00      	nop
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
	...

08008bbc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b086      	sub	sp, #24
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f7fc f9a8 	bl	8004f20 <HAL_DMA_GetError>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b02      	cmp	r3, #2
 8008bd4:	d03e      	beq.n	8008c54 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bdc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008be4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d002      	beq.n	8008bf2 <SD_DMAError+0x36>
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d12d      	bne.n	8008c4e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a19      	ldr	r2, [pc, #100]	; (8008c5c <SD_DMAError+0xa0>)
 8008bf8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008c08:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c0e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008c16:	6978      	ldr	r0, [r7, #20]
 8008c18:	f7ff ff62 	bl	8008ae0 <HAL_SD_GetCardState>
 8008c1c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	2b06      	cmp	r3, #6
 8008c22:	d002      	beq.n	8008c2a <SD_DMAError+0x6e>
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	2b05      	cmp	r3, #5
 8008c28:	d10a      	bne.n	8008c40 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f002 f9f2 	bl	800b018 <SDMMC_CmdStopTransfer>
 8008c34:	4602      	mov	r2, r0
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c3a:	431a      	orrs	r2, r3
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008c4e:	6978      	ldr	r0, [r7, #20]
 8008c50:	f7ff fcd2 	bl	80085f8 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008c54:	bf00      	nop
 8008c56:	3718      	adds	r7, #24
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	004005ff 	.word	0x004005ff

08008c60 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c6c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f240 523a 	movw	r2, #1338	; 0x53a
 8008c76:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008c78:	68f8      	ldr	r0, [r7, #12]
 8008c7a:	f7ff ff31 	bl	8008ae0 <HAL_SD_GetCardState>
 8008c7e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	2b06      	cmp	r3, #6
 8008c92:	d002      	beq.n	8008c9a <SD_DMATxAbort+0x3a>
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	2b05      	cmp	r3, #5
 8008c98:	d10a      	bne.n	8008cb0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f002 f9ba 	bl	800b018 <SDMMC_CmdStopTransfer>
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008caa:	431a      	orrs	r2, r3
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d103      	bne.n	8008cc0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008cb8:	68f8      	ldr	r0, [r7, #12]
 8008cba:	f7fa ff37 	bl	8003b2c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008cbe:	e002      	b.n	8008cc6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008cc0:	68f8      	ldr	r0, [r7, #12]
 8008cc2:	f7ff fc99 	bl	80085f8 <HAL_SD_ErrorCallback>
}
 8008cc6:	bf00      	nop
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b084      	sub	sp, #16
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cda:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f240 523a 	movw	r2, #1338	; 0x53a
 8008ce4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008ce6:	68f8      	ldr	r0, [r7, #12]
 8008ce8:	f7ff fefa 	bl	8008ae0 <HAL_SD_GetCardState>
 8008cec:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	2b06      	cmp	r3, #6
 8008d00:	d002      	beq.n	8008d08 <SD_DMARxAbort+0x3a>
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	2b05      	cmp	r3, #5
 8008d06:	d10a      	bne.n	8008d1e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f002 f983 	bl	800b018 <SDMMC_CmdStopTransfer>
 8008d12:	4602      	mov	r2, r0
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d18:	431a      	orrs	r2, r3
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d103      	bne.n	8008d2e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008d26:	68f8      	ldr	r0, [r7, #12]
 8008d28:	f7fa ff00 	bl	8003b2c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008d2c:	e002      	b.n	8008d34 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008d2e:	68f8      	ldr	r0, [r7, #12]
 8008d30:	f7ff fc62 	bl	80085f8 <HAL_SD_ErrorCallback>
}
 8008d34:	bf00      	nop
 8008d36:	3710      	adds	r7, #16
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008d3c:	b5b0      	push	{r4, r5, r7, lr}
 8008d3e:	b094      	sub	sp, #80	; 0x50
 8008d40:	af04      	add	r7, sp, #16
 8008d42:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008d44:	2301      	movs	r3, #1
 8008d46:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f002 f834 	bl	800adba <SDMMC_GetPowerState>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d102      	bne.n	8008d5e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008d58:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008d5c:	e0b6      	b.n	8008ecc <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d62:	2b03      	cmp	r3, #3
 8008d64:	d02f      	beq.n	8008dc6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f002 fa5f 	bl	800b22e <SDMMC_CmdSendCID>
 8008d70:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d001      	beq.n	8008d7c <SD_InitCard+0x40>
    {
      return errorstate;
 8008d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d7a:	e0a7      	b.n	8008ecc <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	2100      	movs	r1, #0
 8008d82:	4618      	mov	r0, r3
 8008d84:	f002 f85f 	bl	800ae46 <SDMMC_GetResponse>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	2104      	movs	r1, #4
 8008d94:	4618      	mov	r0, r3
 8008d96:	f002 f856 	bl	800ae46 <SDMMC_GetResponse>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2108      	movs	r1, #8
 8008da6:	4618      	mov	r0, r3
 8008da8:	f002 f84d 	bl	800ae46 <SDMMC_GetResponse>
 8008dac:	4602      	mov	r2, r0
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	210c      	movs	r1, #12
 8008db8:	4618      	mov	r0, r3
 8008dba:	f002 f844 	bl	800ae46 <SDMMC_GetResponse>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dca:	2b03      	cmp	r3, #3
 8008dcc:	d00d      	beq.n	8008dea <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f107 020e 	add.w	r2, r7, #14
 8008dd6:	4611      	mov	r1, r2
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f002 fa65 	bl	800b2a8 <SDMMC_CmdSetRelAdd>
 8008dde:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d001      	beq.n	8008dea <SD_InitCard+0xae>
    {
      return errorstate;
 8008de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008de8:	e070      	b.n	8008ecc <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dee:	2b03      	cmp	r3, #3
 8008df0:	d036      	beq.n	8008e60 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008df2:	89fb      	ldrh	r3, [r7, #14]
 8008df4:	461a      	mov	r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e02:	041b      	lsls	r3, r3, #16
 8008e04:	4619      	mov	r1, r3
 8008e06:	4610      	mov	r0, r2
 8008e08:	f002 fa2f 	bl	800b26a <SDMMC_CmdSendCSD>
 8008e0c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d001      	beq.n	8008e18 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e16:	e059      	b.n	8008ecc <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2100      	movs	r1, #0
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f002 f811 	bl	800ae46 <SDMMC_GetResponse>
 8008e24:	4602      	mov	r2, r0
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	2104      	movs	r1, #4
 8008e30:	4618      	mov	r0, r3
 8008e32:	f002 f808 	bl	800ae46 <SDMMC_GetResponse>
 8008e36:	4602      	mov	r2, r0
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2108      	movs	r1, #8
 8008e42:	4618      	mov	r0, r3
 8008e44:	f001 ffff 	bl	800ae46 <SDMMC_GetResponse>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	210c      	movs	r1, #12
 8008e54:	4618      	mov	r0, r3
 8008e56:	f001 fff6 	bl	800ae46 <SDMMC_GetResponse>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	2104      	movs	r1, #4
 8008e66:	4618      	mov	r0, r3
 8008e68:	f001 ffed 	bl	800ae46 <SDMMC_GetResponse>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	0d1a      	lsrs	r2, r3, #20
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008e74:	f107 0310 	add.w	r3, r7, #16
 8008e78:	4619      	mov	r1, r3
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f7ff fbc6 	bl	800860c <HAL_SD_GetCardCSD>
 8008e80:	4603      	mov	r3, r0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d002      	beq.n	8008e8c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e86:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008e8a:	e01f      	b.n	8008ecc <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6819      	ldr	r1, [r3, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e94:	041b      	lsls	r3, r3, #16
 8008e96:	461a      	mov	r2, r3
 8008e98:	f04f 0300 	mov.w	r3, #0
 8008e9c:	4608      	mov	r0, r1
 8008e9e:	f002 f8dd 	bl	800b05c <SDMMC_CmdSelDesel>
 8008ea2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d001      	beq.n	8008eae <SD_InitCard+0x172>
  {
    return errorstate;
 8008eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eac:	e00e      	b.n	8008ecc <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681d      	ldr	r5, [r3, #0]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	466c      	mov	r4, sp
 8008eb6:	f103 0210 	add.w	r2, r3, #16
 8008eba:	ca07      	ldmia	r2, {r0, r1, r2}
 8008ebc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008ec0:	3304      	adds	r3, #4
 8008ec2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ec4:	4628      	mov	r0, r5
 8008ec6:	f001 ff1f 	bl	800ad08 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008eca:	2300      	movs	r3, #0
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3740      	adds	r7, #64	; 0x40
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bdb0      	pop	{r4, r5, r7, pc}

08008ed4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b086      	sub	sp, #24
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008edc:	2300      	movs	r3, #0
 8008ede:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	617b      	str	r3, [r7, #20]
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4618      	mov	r0, r3
 8008eee:	f002 f8d8 	bl	800b0a2 <SDMMC_CmdGoIdleState>
 8008ef2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d001      	beq.n	8008efe <SD_PowerON+0x2a>
  {
    return errorstate;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	e072      	b.n	8008fe4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4618      	mov	r0, r3
 8008f04:	f002 f8eb 	bl	800b0de <SDMMC_CmdOperCond>
 8008f08:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00d      	beq.n	8008f2c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f002 f8c1 	bl	800b0a2 <SDMMC_CmdGoIdleState>
 8008f20:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d004      	beq.n	8008f32 <SD_PowerON+0x5e>
    {
      return errorstate;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	e05b      	b.n	8008fe4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d137      	bne.n	8008faa <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	2100      	movs	r1, #0
 8008f40:	4618      	mov	r0, r3
 8008f42:	f002 f8eb 	bl	800b11c <SDMMC_CmdAppCommand>
 8008f46:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d02d      	beq.n	8008faa <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f52:	e047      	b.n	8008fe4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2100      	movs	r1, #0
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f002 f8de 	bl	800b11c <SDMMC_CmdAppCommand>
 8008f60:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d001      	beq.n	8008f6c <SD_PowerON+0x98>
    {
      return errorstate;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	e03b      	b.n	8008fe4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	491e      	ldr	r1, [pc, #120]	; (8008fec <SD_PowerON+0x118>)
 8008f72:	4618      	mov	r0, r3
 8008f74:	f002 f8f4 	bl	800b160 <SDMMC_CmdAppOperCommand>
 8008f78:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d002      	beq.n	8008f86 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f84:	e02e      	b.n	8008fe4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2100      	movs	r1, #0
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f001 ff5a 	bl	800ae46 <SDMMC_GetResponse>
 8008f92:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	0fdb      	lsrs	r3, r3, #31
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d101      	bne.n	8008fa0 <SD_PowerON+0xcc>
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e000      	b.n	8008fa2 <SD_PowerON+0xce>
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	613b      	str	r3, [r7, #16]

    count++;
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d802      	bhi.n	8008fba <SD_PowerON+0xe6>
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d0cc      	beq.n	8008f54 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d902      	bls.n	8008fca <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008fc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008fc8:	e00c      	b.n	8008fe4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d003      	beq.n	8008fdc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	645a      	str	r2, [r3, #68]	; 0x44
 8008fda:	e002      	b.n	8008fe2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008fe2:	2300      	movs	r3, #0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3718      	adds	r7, #24
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	c1100000 	.word	0xc1100000

08008ff0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d102      	bne.n	8009006 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009000:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009004:	e018      	b.n	8009038 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800900e:	041b      	lsls	r3, r3, #16
 8009010:	4619      	mov	r1, r3
 8009012:	4610      	mov	r0, r2
 8009014:	f002 f969 	bl	800b2ea <SDMMC_CmdSendStatus>
 8009018:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d001      	beq.n	8009024 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	e009      	b.n	8009038 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	2100      	movs	r1, #0
 800902a:	4618      	mov	r0, r3
 800902c:	f001 ff0b 	bl	800ae46 <SDMMC_GetResponse>
 8009030:	4602      	mov	r2, r0
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	3710      	adds	r7, #16
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b086      	sub	sp, #24
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009048:	2300      	movs	r3, #0
 800904a:	60fb      	str	r3, [r7, #12]
 800904c:	2300      	movs	r3, #0
 800904e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	2100      	movs	r1, #0
 8009056:	4618      	mov	r0, r3
 8009058:	f001 fef5 	bl	800ae46 <SDMMC_GetResponse>
 800905c:	4603      	mov	r3, r0
 800905e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009062:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009066:	d102      	bne.n	800906e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009068:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800906c:	e02f      	b.n	80090ce <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800906e:	f107 030c 	add.w	r3, r7, #12
 8009072:	4619      	mov	r1, r3
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 f879 	bl	800916c <SD_FindSCR>
 800907a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d001      	beq.n	8009086 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	e023      	b.n	80090ce <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800908c:	2b00      	cmp	r3, #0
 800908e:	d01c      	beq.n	80090ca <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009098:	041b      	lsls	r3, r3, #16
 800909a:	4619      	mov	r1, r3
 800909c:	4610      	mov	r0, r2
 800909e:	f002 f83d 	bl	800b11c <SDMMC_CmdAppCommand>
 80090a2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d001      	beq.n	80090ae <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	e00f      	b.n	80090ce <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	2102      	movs	r1, #2
 80090b4:	4618      	mov	r0, r3
 80090b6:	f002 f877 	bl	800b1a8 <SDMMC_CmdBusWidth>
 80090ba:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d001      	beq.n	80090c6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	e003      	b.n	80090ce <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80090c6:	2300      	movs	r3, #0
 80090c8:	e001      	b.n	80090ce <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80090ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3718      	adds	r7, #24
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b086      	sub	sp, #24
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80090de:	2300      	movs	r3, #0
 80090e0:	60fb      	str	r3, [r7, #12]
 80090e2:	2300      	movs	r3, #0
 80090e4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2100      	movs	r1, #0
 80090ec:	4618      	mov	r0, r3
 80090ee:	f001 feaa 	bl	800ae46 <SDMMC_GetResponse>
 80090f2:	4603      	mov	r3, r0
 80090f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090fc:	d102      	bne.n	8009104 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80090fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009102:	e02f      	b.n	8009164 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009104:	f107 030c 	add.w	r3, r7, #12
 8009108:	4619      	mov	r1, r3
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 f82e 	bl	800916c <SD_FindSCR>
 8009110:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d001      	beq.n	800911c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	e023      	b.n	8009164 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009122:	2b00      	cmp	r3, #0
 8009124:	d01c      	beq.n	8009160 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800912e:	041b      	lsls	r3, r3, #16
 8009130:	4619      	mov	r1, r3
 8009132:	4610      	mov	r0, r2
 8009134:	f001 fff2 	bl	800b11c <SDMMC_CmdAppCommand>
 8009138:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d001      	beq.n	8009144 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	e00f      	b.n	8009164 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2100      	movs	r1, #0
 800914a:	4618      	mov	r0, r3
 800914c:	f002 f82c 	bl	800b1a8 <SDMMC_CmdBusWidth>
 8009150:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d001      	beq.n	800915c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	e003      	b.n	8009164 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800915c:	2300      	movs	r3, #0
 800915e:	e001      	b.n	8009164 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009160:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009164:	4618      	mov	r0, r3
 8009166:	3718      	adds	r7, #24
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800916c:	b590      	push	{r4, r7, lr}
 800916e:	b08f      	sub	sp, #60	; 0x3c
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009176:	f7fa ff07 	bl	8003f88 <HAL_GetTick>
 800917a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800917c:	2300      	movs	r3, #0
 800917e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009180:	2300      	movs	r3, #0
 8009182:	60bb      	str	r3, [r7, #8]
 8009184:	2300      	movs	r3, #0
 8009186:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2108      	movs	r1, #8
 8009192:	4618      	mov	r0, r3
 8009194:	f001 fe96 	bl	800aec4 <SDMMC_CmdBlockLength>
 8009198:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800919a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919c:	2b00      	cmp	r3, #0
 800919e:	d001      	beq.n	80091a4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80091a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a2:	e0b2      	b.n	800930a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681a      	ldr	r2, [r3, #0]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091ac:	041b      	lsls	r3, r3, #16
 80091ae:	4619      	mov	r1, r3
 80091b0:	4610      	mov	r0, r2
 80091b2:	f001 ffb3 	bl	800b11c <SDMMC_CmdAppCommand>
 80091b6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80091b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d001      	beq.n	80091c2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80091be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c0:	e0a3      	b.n	800930a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80091c2:	f04f 33ff 	mov.w	r3, #4294967295
 80091c6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80091c8:	2308      	movs	r3, #8
 80091ca:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80091cc:	2330      	movs	r3, #48	; 0x30
 80091ce:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80091d0:	2302      	movs	r3, #2
 80091d2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80091d4:	2300      	movs	r3, #0
 80091d6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80091d8:	2301      	movs	r3, #1
 80091da:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f107 0210 	add.w	r2, r7, #16
 80091e4:	4611      	mov	r1, r2
 80091e6:	4618      	mov	r0, r3
 80091e8:	f001 fe40 	bl	800ae6c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4618      	mov	r0, r3
 80091f2:	f001 fffb 	bl	800b1ec <SDMMC_CmdSendSCR>
 80091f6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80091f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d02a      	beq.n	8009254 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80091fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009200:	e083      	b.n	800930a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800920c:	2b00      	cmp	r3, #0
 800920e:	d00f      	beq.n	8009230 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6819      	ldr	r1, [r3, #0]
 8009214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	f107 0208 	add.w	r2, r7, #8
 800921c:	18d4      	adds	r4, r2, r3
 800921e:	4608      	mov	r0, r1
 8009220:	f001 fd9e 	bl	800ad60 <SDMMC_ReadFIFO>
 8009224:	4603      	mov	r3, r0
 8009226:	6023      	str	r3, [r4, #0]
      index++;
 8009228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800922a:	3301      	adds	r3, #1
 800922c:	637b      	str	r3, [r7, #52]	; 0x34
 800922e:	e006      	b.n	800923e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009236:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800923a:	2b00      	cmp	r3, #0
 800923c:	d012      	beq.n	8009264 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800923e:	f7fa fea3 	bl	8003f88 <HAL_GetTick>
 8009242:	4602      	mov	r2, r0
 8009244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009246:	1ad3      	subs	r3, r2, r3
 8009248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800924c:	d102      	bne.n	8009254 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800924e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009252:	e05a      	b.n	800930a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800925a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800925e:	2b00      	cmp	r3, #0
 8009260:	d0cf      	beq.n	8009202 <SD_FindSCR+0x96>
 8009262:	e000      	b.n	8009266 <SD_FindSCR+0xfa>
      break;
 8009264:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800926c:	f003 0308 	and.w	r3, r3, #8
 8009270:	2b00      	cmp	r3, #0
 8009272:	d005      	beq.n	8009280 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2208      	movs	r2, #8
 800927a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800927c:	2308      	movs	r3, #8
 800927e:	e044      	b.n	800930a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009286:	f003 0302 	and.w	r3, r3, #2
 800928a:	2b00      	cmp	r3, #0
 800928c:	d005      	beq.n	800929a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2202      	movs	r2, #2
 8009294:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009296:	2302      	movs	r3, #2
 8009298:	e037      	b.n	800930a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a0:	f003 0320 	and.w	r3, r3, #32
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d005      	beq.n	80092b4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2220      	movs	r2, #32
 80092ae:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80092b0:	2320      	movs	r3, #32
 80092b2:	e02a      	b.n	800930a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f240 523a 	movw	r2, #1338	; 0x53a
 80092bc:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	061a      	lsls	r2, r3, #24
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	021b      	lsls	r3, r3, #8
 80092c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80092ca:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	0a1b      	lsrs	r3, r3, #8
 80092d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80092d4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	0e1b      	lsrs	r3, r3, #24
 80092da:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80092dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092de:	601a      	str	r2, [r3, #0]
    scr++;
 80092e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e2:	3304      	adds	r3, #4
 80092e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	061a      	lsls	r2, r3, #24
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	021b      	lsls	r3, r3, #8
 80092ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80092f2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	0a1b      	lsrs	r3, r3, #8
 80092f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80092fc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	0e1b      	lsrs	r3, r3, #24
 8009302:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009306:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009308:	2300      	movs	r3, #0
}
 800930a:	4618      	mov	r0, r3
 800930c:	373c      	adds	r7, #60	; 0x3c
 800930e:	46bd      	mov	sp, r7
 8009310:	bd90      	pop	{r4, r7, pc}

08009312 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b086      	sub	sp, #24
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800931e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009324:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d03f      	beq.n	80093ac <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800932c:	2300      	movs	r3, #0
 800932e:	617b      	str	r3, [r7, #20]
 8009330:	e033      	b.n	800939a <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4618      	mov	r0, r3
 8009338:	f001 fd12 	bl	800ad60 <SDMMC_ReadFIFO>
 800933c:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	b2da      	uxtb	r2, r3
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	3301      	adds	r3, #1
 800934a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	3b01      	subs	r3, #1
 8009350:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	0a1b      	lsrs	r3, r3, #8
 8009356:	b2da      	uxtb	r2, r3
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	3301      	adds	r3, #1
 8009360:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	3b01      	subs	r3, #1
 8009366:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	0c1b      	lsrs	r3, r3, #16
 800936c:	b2da      	uxtb	r2, r3
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	3301      	adds	r3, #1
 8009376:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	3b01      	subs	r3, #1
 800937c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	0e1b      	lsrs	r3, r3, #24
 8009382:	b2da      	uxtb	r2, r3
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	3301      	adds	r3, #1
 800938c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	3b01      	subs	r3, #1
 8009392:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	3301      	adds	r3, #1
 8009398:	617b      	str	r3, [r7, #20]
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	2b07      	cmp	r3, #7
 800939e:	d9c8      	bls.n	8009332 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	68fa      	ldr	r2, [r7, #12]
 80093a4:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	693a      	ldr	r2, [r7, #16]
 80093aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80093ac:	bf00      	nop
 80093ae:	3718      	adds	r7, #24
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b086      	sub	sp, #24
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6a1b      	ldr	r3, [r3, #32]
 80093c0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d043      	beq.n	8009456 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80093ce:	2300      	movs	r3, #0
 80093d0:	617b      	str	r3, [r7, #20]
 80093d2:	e037      	b.n	8009444 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	3301      	adds	r3, #1
 80093de:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	3b01      	subs	r3, #1
 80093e4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	021a      	lsls	r2, r3, #8
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	4313      	orrs	r3, r2
 80093f0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	3301      	adds	r3, #1
 80093f6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	3b01      	subs	r3, #1
 80093fc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	041a      	lsls	r2, r3, #16
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	4313      	orrs	r3, r2
 8009408:	60bb      	str	r3, [r7, #8]
      tmp++;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	3301      	adds	r3, #1
 800940e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	3b01      	subs	r3, #1
 8009414:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	061a      	lsls	r2, r3, #24
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	4313      	orrs	r3, r2
 8009420:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	3301      	adds	r3, #1
 8009426:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	3b01      	subs	r3, #1
 800942c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f107 0208 	add.w	r2, r7, #8
 8009436:	4611      	mov	r1, r2
 8009438:	4618      	mov	r0, r3
 800943a:	f001 fc9e 	bl	800ad7a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	3301      	adds	r3, #1
 8009442:	617b      	str	r3, [r7, #20]
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	2b07      	cmp	r3, #7
 8009448:	d9c4      	bls.n	80093d4 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	68fa      	ldr	r2, [r7, #12]
 800944e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	693a      	ldr	r2, [r7, #16]
 8009454:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8009456:	bf00      	nop
 8009458:	3718      	adds	r7, #24
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800945e:	b580      	push	{r7, lr}
 8009460:	b082      	sub	sp, #8
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
 8009466:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d101      	bne.n	8009472 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800946e:	2301      	movs	r3, #1
 8009470:	e025      	b.n	80094be <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009478:	b2db      	uxtb	r3, r3
 800947a:	2b00      	cmp	r3, #0
 800947c:	d106      	bne.n	800948c <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f7f9 fb34 	bl	8002af4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2202      	movs	r2, #2
 8009490:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	3304      	adds	r3, #4
 800949c:	4619      	mov	r1, r3
 800949e:	4610      	mov	r0, r2
 80094a0:	f001 fb08 	bl	800aab4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6818      	ldr	r0, [r3, #0]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	461a      	mov	r2, r3
 80094ae:	6839      	ldr	r1, [r7, #0]
 80094b0:	f001 fb72 	bl	800ab98 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2201      	movs	r2, #1
 80094b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80094bc:	2300      	movs	r3, #0
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3708      	adds	r7, #8
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b084      	sub	sp, #16
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	60f8      	str	r0, [r7, #12]
 80094ce:	60b9      	str	r1, [r7, #8]
 80094d0:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	2b02      	cmp	r3, #2
 80094dc:	d101      	bne.n	80094e2 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80094de:	2302      	movs	r3, #2
 80094e0:	e018      	b.n	8009514 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2202      	movs	r2, #2
 80094e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	68b9      	ldr	r1, [r7, #8]
 80094f2:	4618      	mov	r0, r3
 80094f4:	f001 fbd0 	bl	800ac98 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2b02      	cmp	r3, #2
 80094fe:	d104      	bne.n	800950a <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2205      	movs	r2, #5
 8009504:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8009508:	e003      	b.n	8009512 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2201      	movs	r2, #1
 800950e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8009512:	2300      	movs	r3, #0
}
 8009514:	4618      	mov	r0, r3
 8009516:	3710      	adds	r7, #16
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800952c:	b2db      	uxtb	r3, r3
 800952e:	2b02      	cmp	r3, #2
 8009530:	d101      	bne.n	8009536 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009532:	2302      	movs	r3, #2
 8009534:	e00e      	b.n	8009554 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2202      	movs	r2, #2
 800953a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	6839      	ldr	r1, [r7, #0]
 8009544:	4618      	mov	r0, r3
 8009546:	f001 fbcb 	bl	800ace0 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2201      	movs	r2, #1
 800954e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8009552:	2300      	movs	r3, #0
}
 8009554:	4618      	mov	r0, r3
 8009556:	3708      	adds	r7, #8
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d101      	bne.n	800956e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800956a:	2301      	movs	r3, #1
 800956c:	e049      	b.n	8009602 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009574:	b2db      	uxtb	r3, r3
 8009576:	2b00      	cmp	r3, #0
 8009578:	d106      	bne.n	8009588 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f7f9 f8a6 	bl	80026d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2202      	movs	r2, #2
 800958c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	3304      	adds	r3, #4
 8009598:	4619      	mov	r1, r3
 800959a:	4610      	mov	r0, r2
 800959c:	f000 fa62 	bl	8009a64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2201      	movs	r2, #1
 80095b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2201      	movs	r2, #1
 80095bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2201      	movs	r2, #1
 80095c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2201      	movs	r2, #1
 80095cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2201      	movs	r2, #1
 80095d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2201      	movs	r2, #1
 80095dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2201      	movs	r2, #1
 80095e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2201      	movs	r2, #1
 80095ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2201      	movs	r2, #1
 80095f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2201      	movs	r2, #1
 80095fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009600:	2300      	movs	r3, #0
}
 8009602:	4618      	mov	r0, r3
 8009604:	3708      	adds	r7, #8
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}

0800960a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800960a:	b580      	push	{r7, lr}
 800960c:	b082      	sub	sp, #8
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d101      	bne.n	800961c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009618:	2301      	movs	r3, #1
 800961a:	e049      	b.n	80096b0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009622:	b2db      	uxtb	r3, r3
 8009624:	2b00      	cmp	r3, #0
 8009626:	d106      	bne.n	8009636 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2200      	movs	r2, #0
 800962c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f7f9 f897 	bl	8002764 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2202      	movs	r2, #2
 800963a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	3304      	adds	r3, #4
 8009646:	4619      	mov	r1, r3
 8009648:	4610      	mov	r0, r2
 800964a:	f000 fa0b 	bl	8009a64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2201      	movs	r2, #1
 8009652:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2201      	movs	r2, #1
 800965a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2201      	movs	r2, #1
 8009662:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2201      	movs	r2, #1
 800966a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2201      	movs	r2, #1
 8009672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2201      	movs	r2, #1
 800967a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2201      	movs	r2, #1
 8009682:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2201      	movs	r2, #1
 800968a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2201      	movs	r2, #1
 8009692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2201      	movs	r2, #1
 800969a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2201      	movs	r2, #1
 80096a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2201      	movs	r2, #1
 80096aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3708      	adds	r7, #8
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	60b9      	str	r1, [r7, #8]
 80096c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096ca:	2b01      	cmp	r3, #1
 80096cc:	d101      	bne.n	80096d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80096ce:	2302      	movs	r3, #2
 80096d0:	e0fd      	b.n	80098ce <HAL_TIM_PWM_ConfigChannel+0x216>
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2201      	movs	r2, #1
 80096d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2b14      	cmp	r3, #20
 80096de:	f200 80f0 	bhi.w	80098c2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80096e2:	a201      	add	r2, pc, #4	; (adr r2, 80096e8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80096e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e8:	0800973d 	.word	0x0800973d
 80096ec:	080098c3 	.word	0x080098c3
 80096f0:	080098c3 	.word	0x080098c3
 80096f4:	080098c3 	.word	0x080098c3
 80096f8:	0800977d 	.word	0x0800977d
 80096fc:	080098c3 	.word	0x080098c3
 8009700:	080098c3 	.word	0x080098c3
 8009704:	080098c3 	.word	0x080098c3
 8009708:	080097bf 	.word	0x080097bf
 800970c:	080098c3 	.word	0x080098c3
 8009710:	080098c3 	.word	0x080098c3
 8009714:	080098c3 	.word	0x080098c3
 8009718:	080097ff 	.word	0x080097ff
 800971c:	080098c3 	.word	0x080098c3
 8009720:	080098c3 	.word	0x080098c3
 8009724:	080098c3 	.word	0x080098c3
 8009728:	08009841 	.word	0x08009841
 800972c:	080098c3 	.word	0x080098c3
 8009730:	080098c3 	.word	0x080098c3
 8009734:	080098c3 	.word	0x080098c3
 8009738:	08009881 	.word	0x08009881
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	68b9      	ldr	r1, [r7, #8]
 8009742:	4618      	mov	r0, r3
 8009744:	f000 fa2e 	bl	8009ba4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	699a      	ldr	r2, [r3, #24]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f042 0208 	orr.w	r2, r2, #8
 8009756:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	699a      	ldr	r2, [r3, #24]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f022 0204 	bic.w	r2, r2, #4
 8009766:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	6999      	ldr	r1, [r3, #24]
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	691a      	ldr	r2, [r3, #16]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	430a      	orrs	r2, r1
 8009778:	619a      	str	r2, [r3, #24]
      break;
 800977a:	e0a3      	b.n	80098c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	68b9      	ldr	r1, [r7, #8]
 8009782:	4618      	mov	r0, r3
 8009784:	f000 fa80 	bl	8009c88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	699a      	ldr	r2, [r3, #24]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009796:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	699a      	ldr	r2, [r3, #24]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	6999      	ldr	r1, [r3, #24]
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	691b      	ldr	r3, [r3, #16]
 80097b2:	021a      	lsls	r2, r3, #8
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	430a      	orrs	r2, r1
 80097ba:	619a      	str	r2, [r3, #24]
      break;
 80097bc:	e082      	b.n	80098c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	68b9      	ldr	r1, [r7, #8]
 80097c4:	4618      	mov	r0, r3
 80097c6:	f000 fad7 	bl	8009d78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	69da      	ldr	r2, [r3, #28]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f042 0208 	orr.w	r2, r2, #8
 80097d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	69da      	ldr	r2, [r3, #28]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f022 0204 	bic.w	r2, r2, #4
 80097e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	69d9      	ldr	r1, [r3, #28]
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	691a      	ldr	r2, [r3, #16]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	430a      	orrs	r2, r1
 80097fa:	61da      	str	r2, [r3, #28]
      break;
 80097fc:	e062      	b.n	80098c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	68b9      	ldr	r1, [r7, #8]
 8009804:	4618      	mov	r0, r3
 8009806:	f000 fb2d 	bl	8009e64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	69da      	ldr	r2, [r3, #28]
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009818:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	69da      	ldr	r2, [r3, #28]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009828:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	69d9      	ldr	r1, [r3, #28]
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	691b      	ldr	r3, [r3, #16]
 8009834:	021a      	lsls	r2, r3, #8
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	430a      	orrs	r2, r1
 800983c:	61da      	str	r2, [r3, #28]
      break;
 800983e:	e041      	b.n	80098c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	68b9      	ldr	r1, [r7, #8]
 8009846:	4618      	mov	r0, r3
 8009848:	f000 fb64 	bl	8009f14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f042 0208 	orr.w	r2, r2, #8
 800985a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f022 0204 	bic.w	r2, r2, #4
 800986a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	691a      	ldr	r2, [r3, #16]
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	430a      	orrs	r2, r1
 800987c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800987e:	e021      	b.n	80098c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	68b9      	ldr	r1, [r7, #8]
 8009886:	4618      	mov	r0, r3
 8009888:	f000 fb96 	bl	8009fb8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800989a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	691b      	ldr	r3, [r3, #16]
 80098b6:	021a      	lsls	r2, r3, #8
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	430a      	orrs	r2, r1
 80098be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80098c0:	e000      	b.n	80098c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80098c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2200      	movs	r2, #0
 80098c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80098cc:	2300      	movs	r3, #0
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3710      	adds	r7, #16
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop

080098d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b084      	sub	sp, #16
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d101      	bne.n	80098f0 <HAL_TIM_ConfigClockSource+0x18>
 80098ec:	2302      	movs	r3, #2
 80098ee:	e0b3      	b.n	8009a58 <HAL_TIM_ConfigClockSource+0x180>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2202      	movs	r2, #2
 80098fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	689b      	ldr	r3, [r3, #8]
 8009906:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009908:	68fa      	ldr	r2, [r7, #12]
 800990a:	4b55      	ldr	r3, [pc, #340]	; (8009a60 <HAL_TIM_ConfigClockSource+0x188>)
 800990c:	4013      	ands	r3, r2
 800990e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009916:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	68fa      	ldr	r2, [r7, #12]
 800991e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009928:	d03e      	beq.n	80099a8 <HAL_TIM_ConfigClockSource+0xd0>
 800992a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800992e:	f200 8087 	bhi.w	8009a40 <HAL_TIM_ConfigClockSource+0x168>
 8009932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009936:	f000 8085 	beq.w	8009a44 <HAL_TIM_ConfigClockSource+0x16c>
 800993a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800993e:	d87f      	bhi.n	8009a40 <HAL_TIM_ConfigClockSource+0x168>
 8009940:	2b70      	cmp	r3, #112	; 0x70
 8009942:	d01a      	beq.n	800997a <HAL_TIM_ConfigClockSource+0xa2>
 8009944:	2b70      	cmp	r3, #112	; 0x70
 8009946:	d87b      	bhi.n	8009a40 <HAL_TIM_ConfigClockSource+0x168>
 8009948:	2b60      	cmp	r3, #96	; 0x60
 800994a:	d050      	beq.n	80099ee <HAL_TIM_ConfigClockSource+0x116>
 800994c:	2b60      	cmp	r3, #96	; 0x60
 800994e:	d877      	bhi.n	8009a40 <HAL_TIM_ConfigClockSource+0x168>
 8009950:	2b50      	cmp	r3, #80	; 0x50
 8009952:	d03c      	beq.n	80099ce <HAL_TIM_ConfigClockSource+0xf6>
 8009954:	2b50      	cmp	r3, #80	; 0x50
 8009956:	d873      	bhi.n	8009a40 <HAL_TIM_ConfigClockSource+0x168>
 8009958:	2b40      	cmp	r3, #64	; 0x40
 800995a:	d058      	beq.n	8009a0e <HAL_TIM_ConfigClockSource+0x136>
 800995c:	2b40      	cmp	r3, #64	; 0x40
 800995e:	d86f      	bhi.n	8009a40 <HAL_TIM_ConfigClockSource+0x168>
 8009960:	2b30      	cmp	r3, #48	; 0x30
 8009962:	d064      	beq.n	8009a2e <HAL_TIM_ConfigClockSource+0x156>
 8009964:	2b30      	cmp	r3, #48	; 0x30
 8009966:	d86b      	bhi.n	8009a40 <HAL_TIM_ConfigClockSource+0x168>
 8009968:	2b20      	cmp	r3, #32
 800996a:	d060      	beq.n	8009a2e <HAL_TIM_ConfigClockSource+0x156>
 800996c:	2b20      	cmp	r3, #32
 800996e:	d867      	bhi.n	8009a40 <HAL_TIM_ConfigClockSource+0x168>
 8009970:	2b00      	cmp	r3, #0
 8009972:	d05c      	beq.n	8009a2e <HAL_TIM_ConfigClockSource+0x156>
 8009974:	2b10      	cmp	r3, #16
 8009976:	d05a      	beq.n	8009a2e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009978:	e062      	b.n	8009a40 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6818      	ldr	r0, [r3, #0]
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	6899      	ldr	r1, [r3, #8]
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	685a      	ldr	r2, [r3, #4]
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	f000 fbe3 	bl	800a154 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	689b      	ldr	r3, [r3, #8]
 8009994:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800999c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	68fa      	ldr	r2, [r7, #12]
 80099a4:	609a      	str	r2, [r3, #8]
      break;
 80099a6:	e04e      	b.n	8009a46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6818      	ldr	r0, [r3, #0]
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	6899      	ldr	r1, [r3, #8]
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	685a      	ldr	r2, [r3, #4]
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	68db      	ldr	r3, [r3, #12]
 80099b8:	f000 fbcc 	bl	800a154 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	689a      	ldr	r2, [r3, #8]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80099ca:	609a      	str	r2, [r3, #8]
      break;
 80099cc:	e03b      	b.n	8009a46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6818      	ldr	r0, [r3, #0]
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	6859      	ldr	r1, [r3, #4]
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	461a      	mov	r2, r3
 80099dc:	f000 fb40 	bl	800a060 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2150      	movs	r1, #80	; 0x50
 80099e6:	4618      	mov	r0, r3
 80099e8:	f000 fb99 	bl	800a11e <TIM_ITRx_SetConfig>
      break;
 80099ec:	e02b      	b.n	8009a46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6818      	ldr	r0, [r3, #0]
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	6859      	ldr	r1, [r3, #4]
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	68db      	ldr	r3, [r3, #12]
 80099fa:	461a      	mov	r2, r3
 80099fc:	f000 fb5f 	bl	800a0be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	2160      	movs	r1, #96	; 0x60
 8009a06:	4618      	mov	r0, r3
 8009a08:	f000 fb89 	bl	800a11e <TIM_ITRx_SetConfig>
      break;
 8009a0c:	e01b      	b.n	8009a46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6818      	ldr	r0, [r3, #0]
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	6859      	ldr	r1, [r3, #4]
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	68db      	ldr	r3, [r3, #12]
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	f000 fb20 	bl	800a060 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2140      	movs	r1, #64	; 0x40
 8009a26:	4618      	mov	r0, r3
 8009a28:	f000 fb79 	bl	800a11e <TIM_ITRx_SetConfig>
      break;
 8009a2c:	e00b      	b.n	8009a46 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4619      	mov	r1, r3
 8009a38:	4610      	mov	r0, r2
 8009a3a:	f000 fb70 	bl	800a11e <TIM_ITRx_SetConfig>
        break;
 8009a3e:	e002      	b.n	8009a46 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009a40:	bf00      	nop
 8009a42:	e000      	b.n	8009a46 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009a44:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2201      	movs	r2, #1
 8009a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a56:	2300      	movs	r3, #0
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3710      	adds	r7, #16
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}
 8009a60:	fffeff88 	.word	0xfffeff88

08009a64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	4a40      	ldr	r2, [pc, #256]	; (8009b78 <TIM_Base_SetConfig+0x114>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d013      	beq.n	8009aa4 <TIM_Base_SetConfig+0x40>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a82:	d00f      	beq.n	8009aa4 <TIM_Base_SetConfig+0x40>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	4a3d      	ldr	r2, [pc, #244]	; (8009b7c <TIM_Base_SetConfig+0x118>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d00b      	beq.n	8009aa4 <TIM_Base_SetConfig+0x40>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4a3c      	ldr	r2, [pc, #240]	; (8009b80 <TIM_Base_SetConfig+0x11c>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d007      	beq.n	8009aa4 <TIM_Base_SetConfig+0x40>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	4a3b      	ldr	r2, [pc, #236]	; (8009b84 <TIM_Base_SetConfig+0x120>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d003      	beq.n	8009aa4 <TIM_Base_SetConfig+0x40>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4a3a      	ldr	r2, [pc, #232]	; (8009b88 <TIM_Base_SetConfig+0x124>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d108      	bne.n	8009ab6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	68fa      	ldr	r2, [r7, #12]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	4a2f      	ldr	r2, [pc, #188]	; (8009b78 <TIM_Base_SetConfig+0x114>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d02b      	beq.n	8009b16 <TIM_Base_SetConfig+0xb2>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ac4:	d027      	beq.n	8009b16 <TIM_Base_SetConfig+0xb2>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	4a2c      	ldr	r2, [pc, #176]	; (8009b7c <TIM_Base_SetConfig+0x118>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d023      	beq.n	8009b16 <TIM_Base_SetConfig+0xb2>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	4a2b      	ldr	r2, [pc, #172]	; (8009b80 <TIM_Base_SetConfig+0x11c>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d01f      	beq.n	8009b16 <TIM_Base_SetConfig+0xb2>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	4a2a      	ldr	r2, [pc, #168]	; (8009b84 <TIM_Base_SetConfig+0x120>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d01b      	beq.n	8009b16 <TIM_Base_SetConfig+0xb2>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	4a29      	ldr	r2, [pc, #164]	; (8009b88 <TIM_Base_SetConfig+0x124>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d017      	beq.n	8009b16 <TIM_Base_SetConfig+0xb2>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	4a28      	ldr	r2, [pc, #160]	; (8009b8c <TIM_Base_SetConfig+0x128>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d013      	beq.n	8009b16 <TIM_Base_SetConfig+0xb2>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4a27      	ldr	r2, [pc, #156]	; (8009b90 <TIM_Base_SetConfig+0x12c>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d00f      	beq.n	8009b16 <TIM_Base_SetConfig+0xb2>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	4a26      	ldr	r2, [pc, #152]	; (8009b94 <TIM_Base_SetConfig+0x130>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d00b      	beq.n	8009b16 <TIM_Base_SetConfig+0xb2>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	4a25      	ldr	r2, [pc, #148]	; (8009b98 <TIM_Base_SetConfig+0x134>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d007      	beq.n	8009b16 <TIM_Base_SetConfig+0xb2>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	4a24      	ldr	r2, [pc, #144]	; (8009b9c <TIM_Base_SetConfig+0x138>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d003      	beq.n	8009b16 <TIM_Base_SetConfig+0xb2>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	4a23      	ldr	r2, [pc, #140]	; (8009ba0 <TIM_Base_SetConfig+0x13c>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d108      	bne.n	8009b28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	68fa      	ldr	r2, [r7, #12]
 8009b24:	4313      	orrs	r3, r2
 8009b26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	695b      	ldr	r3, [r3, #20]
 8009b32:	4313      	orrs	r3, r2
 8009b34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	68fa      	ldr	r2, [r7, #12]
 8009b3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	689a      	ldr	r2, [r3, #8]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	4a0a      	ldr	r2, [pc, #40]	; (8009b78 <TIM_Base_SetConfig+0x114>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d003      	beq.n	8009b5c <TIM_Base_SetConfig+0xf8>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	4a0c      	ldr	r2, [pc, #48]	; (8009b88 <TIM_Base_SetConfig+0x124>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d103      	bne.n	8009b64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	691a      	ldr	r2, [r3, #16]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2201      	movs	r2, #1
 8009b68:	615a      	str	r2, [r3, #20]
}
 8009b6a:	bf00      	nop
 8009b6c:	3714      	adds	r7, #20
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr
 8009b76:	bf00      	nop
 8009b78:	40010000 	.word	0x40010000
 8009b7c:	40000400 	.word	0x40000400
 8009b80:	40000800 	.word	0x40000800
 8009b84:	40000c00 	.word	0x40000c00
 8009b88:	40010400 	.word	0x40010400
 8009b8c:	40014000 	.word	0x40014000
 8009b90:	40014400 	.word	0x40014400
 8009b94:	40014800 	.word	0x40014800
 8009b98:	40001800 	.word	0x40001800
 8009b9c:	40001c00 	.word	0x40001c00
 8009ba0:	40002000 	.word	0x40002000

08009ba4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b087      	sub	sp, #28
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6a1b      	ldr	r3, [r3, #32]
 8009bb2:	f023 0201 	bic.w	r2, r3, #1
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a1b      	ldr	r3, [r3, #32]
 8009bbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	699b      	ldr	r3, [r3, #24]
 8009bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009bcc:	68fa      	ldr	r2, [r7, #12]
 8009bce:	4b2b      	ldr	r3, [pc, #172]	; (8009c7c <TIM_OC1_SetConfig+0xd8>)
 8009bd0:	4013      	ands	r3, r2
 8009bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f023 0303 	bic.w	r3, r3, #3
 8009bda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	68fa      	ldr	r2, [r7, #12]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	f023 0302 	bic.w	r3, r3, #2
 8009bec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	689b      	ldr	r3, [r3, #8]
 8009bf2:	697a      	ldr	r2, [r7, #20]
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	4a21      	ldr	r2, [pc, #132]	; (8009c80 <TIM_OC1_SetConfig+0xdc>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d003      	beq.n	8009c08 <TIM_OC1_SetConfig+0x64>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	4a20      	ldr	r2, [pc, #128]	; (8009c84 <TIM_OC1_SetConfig+0xe0>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d10c      	bne.n	8009c22 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	f023 0308 	bic.w	r3, r3, #8
 8009c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	68db      	ldr	r3, [r3, #12]
 8009c14:	697a      	ldr	r2, [r7, #20]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	f023 0304 	bic.w	r3, r3, #4
 8009c20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4a16      	ldr	r2, [pc, #88]	; (8009c80 <TIM_OC1_SetConfig+0xdc>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d003      	beq.n	8009c32 <TIM_OC1_SetConfig+0x8e>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	4a15      	ldr	r2, [pc, #84]	; (8009c84 <TIM_OC1_SetConfig+0xe0>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d111      	bne.n	8009c56 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	695b      	ldr	r3, [r3, #20]
 8009c46:	693a      	ldr	r2, [r7, #16]
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	699b      	ldr	r3, [r3, #24]
 8009c50:	693a      	ldr	r2, [r7, #16]
 8009c52:	4313      	orrs	r3, r2
 8009c54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	693a      	ldr	r2, [r7, #16]
 8009c5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	68fa      	ldr	r2, [r7, #12]
 8009c60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	685a      	ldr	r2, [r3, #4]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	697a      	ldr	r2, [r7, #20]
 8009c6e:	621a      	str	r2, [r3, #32]
}
 8009c70:	bf00      	nop
 8009c72:	371c      	adds	r7, #28
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr
 8009c7c:	fffeff8f 	.word	0xfffeff8f
 8009c80:	40010000 	.word	0x40010000
 8009c84:	40010400 	.word	0x40010400

08009c88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b087      	sub	sp, #28
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6a1b      	ldr	r3, [r3, #32]
 8009c96:	f023 0210 	bic.w	r2, r3, #16
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6a1b      	ldr	r3, [r3, #32]
 8009ca2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	699b      	ldr	r3, [r3, #24]
 8009cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009cb0:	68fa      	ldr	r2, [r7, #12]
 8009cb2:	4b2e      	ldr	r3, [pc, #184]	; (8009d6c <TIM_OC2_SetConfig+0xe4>)
 8009cb4:	4013      	ands	r3, r2
 8009cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	021b      	lsls	r3, r3, #8
 8009cc6:	68fa      	ldr	r2, [r7, #12]
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	f023 0320 	bic.w	r3, r3, #32
 8009cd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	011b      	lsls	r3, r3, #4
 8009cda:	697a      	ldr	r2, [r7, #20]
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4a23      	ldr	r2, [pc, #140]	; (8009d70 <TIM_OC2_SetConfig+0xe8>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d003      	beq.n	8009cf0 <TIM_OC2_SetConfig+0x68>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	4a22      	ldr	r2, [pc, #136]	; (8009d74 <TIM_OC2_SetConfig+0xec>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d10d      	bne.n	8009d0c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	68db      	ldr	r3, [r3, #12]
 8009cfc:	011b      	lsls	r3, r3, #4
 8009cfe:	697a      	ldr	r2, [r7, #20]
 8009d00:	4313      	orrs	r3, r2
 8009d02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	4a18      	ldr	r2, [pc, #96]	; (8009d70 <TIM_OC2_SetConfig+0xe8>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d003      	beq.n	8009d1c <TIM_OC2_SetConfig+0x94>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	4a17      	ldr	r2, [pc, #92]	; (8009d74 <TIM_OC2_SetConfig+0xec>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d113      	bne.n	8009d44 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	695b      	ldr	r3, [r3, #20]
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	693a      	ldr	r2, [r7, #16]
 8009d34:	4313      	orrs	r3, r2
 8009d36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	699b      	ldr	r3, [r3, #24]
 8009d3c:	009b      	lsls	r3, r3, #2
 8009d3e:	693a      	ldr	r2, [r7, #16]
 8009d40:	4313      	orrs	r3, r2
 8009d42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	693a      	ldr	r2, [r7, #16]
 8009d48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	68fa      	ldr	r2, [r7, #12]
 8009d4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	685a      	ldr	r2, [r3, #4]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	697a      	ldr	r2, [r7, #20]
 8009d5c:	621a      	str	r2, [r3, #32]
}
 8009d5e:	bf00      	nop
 8009d60:	371c      	adds	r7, #28
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr
 8009d6a:	bf00      	nop
 8009d6c:	feff8fff 	.word	0xfeff8fff
 8009d70:	40010000 	.word	0x40010000
 8009d74:	40010400 	.word	0x40010400

08009d78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b087      	sub	sp, #28
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6a1b      	ldr	r3, [r3, #32]
 8009d86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6a1b      	ldr	r3, [r3, #32]
 8009d92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	69db      	ldr	r3, [r3, #28]
 8009d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009da0:	68fa      	ldr	r2, [r7, #12]
 8009da2:	4b2d      	ldr	r3, [pc, #180]	; (8009e58 <TIM_OC3_SetConfig+0xe0>)
 8009da4:	4013      	ands	r3, r2
 8009da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f023 0303 	bic.w	r3, r3, #3
 8009dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	68fa      	ldr	r2, [r7, #12]
 8009db6:	4313      	orrs	r3, r2
 8009db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009dc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	689b      	ldr	r3, [r3, #8]
 8009dc6:	021b      	lsls	r3, r3, #8
 8009dc8:	697a      	ldr	r2, [r7, #20]
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	4a22      	ldr	r2, [pc, #136]	; (8009e5c <TIM_OC3_SetConfig+0xe4>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d003      	beq.n	8009dde <TIM_OC3_SetConfig+0x66>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	4a21      	ldr	r2, [pc, #132]	; (8009e60 <TIM_OC3_SetConfig+0xe8>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d10d      	bne.n	8009dfa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009de4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	68db      	ldr	r3, [r3, #12]
 8009dea:	021b      	lsls	r3, r3, #8
 8009dec:	697a      	ldr	r2, [r7, #20]
 8009dee:	4313      	orrs	r3, r2
 8009df0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009df8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4a17      	ldr	r2, [pc, #92]	; (8009e5c <TIM_OC3_SetConfig+0xe4>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d003      	beq.n	8009e0a <TIM_OC3_SetConfig+0x92>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	4a16      	ldr	r2, [pc, #88]	; (8009e60 <TIM_OC3_SetConfig+0xe8>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d113      	bne.n	8009e32 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009e18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	695b      	ldr	r3, [r3, #20]
 8009e1e:	011b      	lsls	r3, r3, #4
 8009e20:	693a      	ldr	r2, [r7, #16]
 8009e22:	4313      	orrs	r3, r2
 8009e24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	699b      	ldr	r3, [r3, #24]
 8009e2a:	011b      	lsls	r3, r3, #4
 8009e2c:	693a      	ldr	r2, [r7, #16]
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	693a      	ldr	r2, [r7, #16]
 8009e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	68fa      	ldr	r2, [r7, #12]
 8009e3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	685a      	ldr	r2, [r3, #4]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	697a      	ldr	r2, [r7, #20]
 8009e4a:	621a      	str	r2, [r3, #32]
}
 8009e4c:	bf00      	nop
 8009e4e:	371c      	adds	r7, #28
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr
 8009e58:	fffeff8f 	.word	0xfffeff8f
 8009e5c:	40010000 	.word	0x40010000
 8009e60:	40010400 	.word	0x40010400

08009e64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b087      	sub	sp, #28
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6a1b      	ldr	r3, [r3, #32]
 8009e72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6a1b      	ldr	r3, [r3, #32]
 8009e7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	69db      	ldr	r3, [r3, #28]
 8009e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009e8c:	68fa      	ldr	r2, [r7, #12]
 8009e8e:	4b1e      	ldr	r3, [pc, #120]	; (8009f08 <TIM_OC4_SetConfig+0xa4>)
 8009e90:	4013      	ands	r3, r2
 8009e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	021b      	lsls	r3, r3, #8
 8009ea2:	68fa      	ldr	r2, [r7, #12]
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009eae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	031b      	lsls	r3, r3, #12
 8009eb6:	693a      	ldr	r2, [r7, #16]
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	4a13      	ldr	r2, [pc, #76]	; (8009f0c <TIM_OC4_SetConfig+0xa8>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d003      	beq.n	8009ecc <TIM_OC4_SetConfig+0x68>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	4a12      	ldr	r2, [pc, #72]	; (8009f10 <TIM_OC4_SetConfig+0xac>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d109      	bne.n	8009ee0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ed2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	695b      	ldr	r3, [r3, #20]
 8009ed8:	019b      	lsls	r3, r3, #6
 8009eda:	697a      	ldr	r2, [r7, #20]
 8009edc:	4313      	orrs	r3, r2
 8009ede:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	697a      	ldr	r2, [r7, #20]
 8009ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	68fa      	ldr	r2, [r7, #12]
 8009eea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	685a      	ldr	r2, [r3, #4]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	693a      	ldr	r2, [r7, #16]
 8009ef8:	621a      	str	r2, [r3, #32]
}
 8009efa:	bf00      	nop
 8009efc:	371c      	adds	r7, #28
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr
 8009f06:	bf00      	nop
 8009f08:	feff8fff 	.word	0xfeff8fff
 8009f0c:	40010000 	.word	0x40010000
 8009f10:	40010400 	.word	0x40010400

08009f14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b087      	sub	sp, #28
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6a1b      	ldr	r3, [r3, #32]
 8009f22:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6a1b      	ldr	r3, [r3, #32]
 8009f2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009f3c:	68fa      	ldr	r2, [r7, #12]
 8009f3e:	4b1b      	ldr	r3, [pc, #108]	; (8009fac <TIM_OC5_SetConfig+0x98>)
 8009f40:	4013      	ands	r3, r2
 8009f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	68fa      	ldr	r2, [r7, #12]
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009f54:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	041b      	lsls	r3, r3, #16
 8009f5c:	693a      	ldr	r2, [r7, #16]
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	4a12      	ldr	r2, [pc, #72]	; (8009fb0 <TIM_OC5_SetConfig+0x9c>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d003      	beq.n	8009f72 <TIM_OC5_SetConfig+0x5e>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4a11      	ldr	r2, [pc, #68]	; (8009fb4 <TIM_OC5_SetConfig+0xa0>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d109      	bne.n	8009f86 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	695b      	ldr	r3, [r3, #20]
 8009f7e:	021b      	lsls	r3, r3, #8
 8009f80:	697a      	ldr	r2, [r7, #20]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	697a      	ldr	r2, [r7, #20]
 8009f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	68fa      	ldr	r2, [r7, #12]
 8009f90:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	685a      	ldr	r2, [r3, #4]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	693a      	ldr	r2, [r7, #16]
 8009f9e:	621a      	str	r2, [r3, #32]
}
 8009fa0:	bf00      	nop
 8009fa2:	371c      	adds	r7, #28
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr
 8009fac:	fffeff8f 	.word	0xfffeff8f
 8009fb0:	40010000 	.word	0x40010000
 8009fb4:	40010400 	.word	0x40010400

08009fb8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b087      	sub	sp, #28
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6a1b      	ldr	r3, [r3, #32]
 8009fc6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6a1b      	ldr	r3, [r3, #32]
 8009fd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009fe0:	68fa      	ldr	r2, [r7, #12]
 8009fe2:	4b1c      	ldr	r3, [pc, #112]	; (800a054 <TIM_OC6_SetConfig+0x9c>)
 8009fe4:	4013      	ands	r3, r2
 8009fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	021b      	lsls	r3, r3, #8
 8009fee:	68fa      	ldr	r2, [r7, #12]
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ffa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	051b      	lsls	r3, r3, #20
 800a002:	693a      	ldr	r2, [r7, #16]
 800a004:	4313      	orrs	r3, r2
 800a006:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	4a13      	ldr	r2, [pc, #76]	; (800a058 <TIM_OC6_SetConfig+0xa0>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d003      	beq.n	800a018 <TIM_OC6_SetConfig+0x60>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	4a12      	ldr	r2, [pc, #72]	; (800a05c <TIM_OC6_SetConfig+0xa4>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d109      	bne.n	800a02c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a01e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	695b      	ldr	r3, [r3, #20]
 800a024:	029b      	lsls	r3, r3, #10
 800a026:	697a      	ldr	r2, [r7, #20]
 800a028:	4313      	orrs	r3, r2
 800a02a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	697a      	ldr	r2, [r7, #20]
 800a030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	68fa      	ldr	r2, [r7, #12]
 800a036:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	685a      	ldr	r2, [r3, #4]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	693a      	ldr	r2, [r7, #16]
 800a044:	621a      	str	r2, [r3, #32]
}
 800a046:	bf00      	nop
 800a048:	371c      	adds	r7, #28
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr
 800a052:	bf00      	nop
 800a054:	feff8fff 	.word	0xfeff8fff
 800a058:	40010000 	.word	0x40010000
 800a05c:	40010400 	.word	0x40010400

0800a060 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a060:	b480      	push	{r7}
 800a062:	b087      	sub	sp, #28
 800a064:	af00      	add	r7, sp, #0
 800a066:	60f8      	str	r0, [r7, #12]
 800a068:	60b9      	str	r1, [r7, #8]
 800a06a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	6a1b      	ldr	r3, [r3, #32]
 800a070:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6a1b      	ldr	r3, [r3, #32]
 800a076:	f023 0201 	bic.w	r2, r3, #1
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	699b      	ldr	r3, [r3, #24]
 800a082:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a08a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	011b      	lsls	r3, r3, #4
 800a090:	693a      	ldr	r2, [r7, #16]
 800a092:	4313      	orrs	r3, r2
 800a094:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	f023 030a 	bic.w	r3, r3, #10
 800a09c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a09e:	697a      	ldr	r2, [r7, #20]
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	693a      	ldr	r2, [r7, #16]
 800a0aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	697a      	ldr	r2, [r7, #20]
 800a0b0:	621a      	str	r2, [r3, #32]
}
 800a0b2:	bf00      	nop
 800a0b4:	371c      	adds	r7, #28
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0bc:	4770      	bx	lr

0800a0be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a0be:	b480      	push	{r7}
 800a0c0:	b087      	sub	sp, #28
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	60f8      	str	r0, [r7, #12]
 800a0c6:	60b9      	str	r1, [r7, #8]
 800a0c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	6a1b      	ldr	r3, [r3, #32]
 800a0ce:	f023 0210 	bic.w	r2, r3, #16
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	699b      	ldr	r3, [r3, #24]
 800a0da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	6a1b      	ldr	r3, [r3, #32]
 800a0e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a0e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	031b      	lsls	r3, r3, #12
 800a0ee:	697a      	ldr	r2, [r7, #20]
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a0fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	011b      	lsls	r3, r3, #4
 800a100:	693a      	ldr	r2, [r7, #16]
 800a102:	4313      	orrs	r3, r2
 800a104:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	697a      	ldr	r2, [r7, #20]
 800a10a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	693a      	ldr	r2, [r7, #16]
 800a110:	621a      	str	r2, [r3, #32]
}
 800a112:	bf00      	nop
 800a114:	371c      	adds	r7, #28
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr

0800a11e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a11e:	b480      	push	{r7}
 800a120:	b085      	sub	sp, #20
 800a122:	af00      	add	r7, sp, #0
 800a124:	6078      	str	r0, [r7, #4]
 800a126:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	689b      	ldr	r3, [r3, #8]
 800a12c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a134:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a136:	683a      	ldr	r2, [r7, #0]
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	4313      	orrs	r3, r2
 800a13c:	f043 0307 	orr.w	r3, r3, #7
 800a140:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	68fa      	ldr	r2, [r7, #12]
 800a146:	609a      	str	r2, [r3, #8]
}
 800a148:	bf00      	nop
 800a14a:	3714      	adds	r7, #20
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a154:	b480      	push	{r7}
 800a156:	b087      	sub	sp, #28
 800a158:	af00      	add	r7, sp, #0
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	60b9      	str	r1, [r7, #8]
 800a15e:	607a      	str	r2, [r7, #4]
 800a160:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	689b      	ldr	r3, [r3, #8]
 800a166:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a16e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	021a      	lsls	r2, r3, #8
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	431a      	orrs	r2, r3
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	4313      	orrs	r3, r2
 800a17c:	697a      	ldr	r2, [r7, #20]
 800a17e:	4313      	orrs	r3, r2
 800a180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	697a      	ldr	r2, [r7, #20]
 800a186:	609a      	str	r2, [r3, #8]
}
 800a188:	bf00      	nop
 800a18a:	371c      	adds	r7, #28
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr

0800a194 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a194:	b480      	push	{r7}
 800a196:	b085      	sub	sp, #20
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d101      	bne.n	800a1ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a1a8:	2302      	movs	r3, #2
 800a1aa:	e06d      	b.n	800a288 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2202      	movs	r2, #2
 800a1b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	689b      	ldr	r3, [r3, #8]
 800a1ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a30      	ldr	r2, [pc, #192]	; (800a294 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d004      	beq.n	800a1e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a2f      	ldr	r2, [pc, #188]	; (800a298 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d108      	bne.n	800a1f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a1e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	68fa      	ldr	r2, [r7, #12]
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	68fa      	ldr	r2, [r7, #12]
 800a200:	4313      	orrs	r3, r2
 800a202:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	68fa      	ldr	r2, [r7, #12]
 800a20a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a20      	ldr	r2, [pc, #128]	; (800a294 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d022      	beq.n	800a25c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a21e:	d01d      	beq.n	800a25c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4a1d      	ldr	r2, [pc, #116]	; (800a29c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d018      	beq.n	800a25c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a1c      	ldr	r2, [pc, #112]	; (800a2a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d013      	beq.n	800a25c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a1a      	ldr	r2, [pc, #104]	; (800a2a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d00e      	beq.n	800a25c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4a15      	ldr	r2, [pc, #84]	; (800a298 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a244:	4293      	cmp	r3, r2
 800a246:	d009      	beq.n	800a25c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a16      	ldr	r2, [pc, #88]	; (800a2a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d004      	beq.n	800a25c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4a15      	ldr	r2, [pc, #84]	; (800a2ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d10c      	bne.n	800a276 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a262:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	689b      	ldr	r3, [r3, #8]
 800a268:	68ba      	ldr	r2, [r7, #8]
 800a26a:	4313      	orrs	r3, r2
 800a26c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	68ba      	ldr	r2, [r7, #8]
 800a274:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2201      	movs	r2, #1
 800a27a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a286:	2300      	movs	r3, #0
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3714      	adds	r7, #20
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr
 800a294:	40010000 	.word	0x40010000
 800a298:	40010400 	.word	0x40010400
 800a29c:	40000400 	.word	0x40000400
 800a2a0:	40000800 	.word	0x40000800
 800a2a4:	40000c00 	.word	0x40000c00
 800a2a8:	40014000 	.word	0x40014000
 800a2ac:	40001800 	.word	0x40001800

0800a2b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d101      	bne.n	800a2c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	e040      	b.n	800a344 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d106      	bne.n	800a2d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f7f8 faea 	bl	80028ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2224      	movs	r2, #36	; 0x24
 800a2dc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f022 0201 	bic.w	r2, r2, #1
 800a2ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 f82c 	bl	800a34c <UART_SetConfig>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d101      	bne.n	800a2fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	e022      	b.n	800a344 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a302:	2b00      	cmp	r3, #0
 800a304:	d002      	beq.n	800a30c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 fa82 	bl	800a810 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	685a      	ldr	r2, [r3, #4]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a31a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	689a      	ldr	r2, [r3, #8]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a32a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f042 0201 	orr.w	r2, r2, #1
 800a33a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f000 fb09 	bl	800a954 <UART_CheckIdleState>
 800a342:	4603      	mov	r3, r0
}
 800a344:	4618      	mov	r0, r3
 800a346:	3708      	adds	r7, #8
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b088      	sub	sp, #32
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a354:	2300      	movs	r3, #0
 800a356:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	689a      	ldr	r2, [r3, #8]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	691b      	ldr	r3, [r3, #16]
 800a360:	431a      	orrs	r2, r3
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	695b      	ldr	r3, [r3, #20]
 800a366:	431a      	orrs	r2, r3
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	69db      	ldr	r3, [r3, #28]
 800a36c:	4313      	orrs	r3, r2
 800a36e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	681a      	ldr	r2, [r3, #0]
 800a376:	4ba7      	ldr	r3, [pc, #668]	; (800a614 <UART_SetConfig+0x2c8>)
 800a378:	4013      	ands	r3, r2
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	6812      	ldr	r2, [r2, #0]
 800a37e:	6979      	ldr	r1, [r7, #20]
 800a380:	430b      	orrs	r3, r1
 800a382:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	68da      	ldr	r2, [r3, #12]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	430a      	orrs	r2, r1
 800a398:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	699b      	ldr	r3, [r3, #24]
 800a39e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6a1b      	ldr	r3, [r3, #32]
 800a3a4:	697a      	ldr	r2, [r7, #20]
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	689b      	ldr	r3, [r3, #8]
 800a3b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	697a      	ldr	r2, [r7, #20]
 800a3ba:	430a      	orrs	r2, r1
 800a3bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4a95      	ldr	r2, [pc, #596]	; (800a618 <UART_SetConfig+0x2cc>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d120      	bne.n	800a40a <UART_SetConfig+0xbe>
 800a3c8:	4b94      	ldr	r3, [pc, #592]	; (800a61c <UART_SetConfig+0x2d0>)
 800a3ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3ce:	f003 0303 	and.w	r3, r3, #3
 800a3d2:	2b03      	cmp	r3, #3
 800a3d4:	d816      	bhi.n	800a404 <UART_SetConfig+0xb8>
 800a3d6:	a201      	add	r2, pc, #4	; (adr r2, 800a3dc <UART_SetConfig+0x90>)
 800a3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3dc:	0800a3ed 	.word	0x0800a3ed
 800a3e0:	0800a3f9 	.word	0x0800a3f9
 800a3e4:	0800a3f3 	.word	0x0800a3f3
 800a3e8:	0800a3ff 	.word	0x0800a3ff
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	77fb      	strb	r3, [r7, #31]
 800a3f0:	e14f      	b.n	800a692 <UART_SetConfig+0x346>
 800a3f2:	2302      	movs	r3, #2
 800a3f4:	77fb      	strb	r3, [r7, #31]
 800a3f6:	e14c      	b.n	800a692 <UART_SetConfig+0x346>
 800a3f8:	2304      	movs	r3, #4
 800a3fa:	77fb      	strb	r3, [r7, #31]
 800a3fc:	e149      	b.n	800a692 <UART_SetConfig+0x346>
 800a3fe:	2308      	movs	r3, #8
 800a400:	77fb      	strb	r3, [r7, #31]
 800a402:	e146      	b.n	800a692 <UART_SetConfig+0x346>
 800a404:	2310      	movs	r3, #16
 800a406:	77fb      	strb	r3, [r7, #31]
 800a408:	e143      	b.n	800a692 <UART_SetConfig+0x346>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4a84      	ldr	r2, [pc, #528]	; (800a620 <UART_SetConfig+0x2d4>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d132      	bne.n	800a47a <UART_SetConfig+0x12e>
 800a414:	4b81      	ldr	r3, [pc, #516]	; (800a61c <UART_SetConfig+0x2d0>)
 800a416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a41a:	f003 030c 	and.w	r3, r3, #12
 800a41e:	2b0c      	cmp	r3, #12
 800a420:	d828      	bhi.n	800a474 <UART_SetConfig+0x128>
 800a422:	a201      	add	r2, pc, #4	; (adr r2, 800a428 <UART_SetConfig+0xdc>)
 800a424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a428:	0800a45d 	.word	0x0800a45d
 800a42c:	0800a475 	.word	0x0800a475
 800a430:	0800a475 	.word	0x0800a475
 800a434:	0800a475 	.word	0x0800a475
 800a438:	0800a469 	.word	0x0800a469
 800a43c:	0800a475 	.word	0x0800a475
 800a440:	0800a475 	.word	0x0800a475
 800a444:	0800a475 	.word	0x0800a475
 800a448:	0800a463 	.word	0x0800a463
 800a44c:	0800a475 	.word	0x0800a475
 800a450:	0800a475 	.word	0x0800a475
 800a454:	0800a475 	.word	0x0800a475
 800a458:	0800a46f 	.word	0x0800a46f
 800a45c:	2300      	movs	r3, #0
 800a45e:	77fb      	strb	r3, [r7, #31]
 800a460:	e117      	b.n	800a692 <UART_SetConfig+0x346>
 800a462:	2302      	movs	r3, #2
 800a464:	77fb      	strb	r3, [r7, #31]
 800a466:	e114      	b.n	800a692 <UART_SetConfig+0x346>
 800a468:	2304      	movs	r3, #4
 800a46a:	77fb      	strb	r3, [r7, #31]
 800a46c:	e111      	b.n	800a692 <UART_SetConfig+0x346>
 800a46e:	2308      	movs	r3, #8
 800a470:	77fb      	strb	r3, [r7, #31]
 800a472:	e10e      	b.n	800a692 <UART_SetConfig+0x346>
 800a474:	2310      	movs	r3, #16
 800a476:	77fb      	strb	r3, [r7, #31]
 800a478:	e10b      	b.n	800a692 <UART_SetConfig+0x346>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a69      	ldr	r2, [pc, #420]	; (800a624 <UART_SetConfig+0x2d8>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d120      	bne.n	800a4c6 <UART_SetConfig+0x17a>
 800a484:	4b65      	ldr	r3, [pc, #404]	; (800a61c <UART_SetConfig+0x2d0>)
 800a486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a48a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a48e:	2b30      	cmp	r3, #48	; 0x30
 800a490:	d013      	beq.n	800a4ba <UART_SetConfig+0x16e>
 800a492:	2b30      	cmp	r3, #48	; 0x30
 800a494:	d814      	bhi.n	800a4c0 <UART_SetConfig+0x174>
 800a496:	2b20      	cmp	r3, #32
 800a498:	d009      	beq.n	800a4ae <UART_SetConfig+0x162>
 800a49a:	2b20      	cmp	r3, #32
 800a49c:	d810      	bhi.n	800a4c0 <UART_SetConfig+0x174>
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d002      	beq.n	800a4a8 <UART_SetConfig+0x15c>
 800a4a2:	2b10      	cmp	r3, #16
 800a4a4:	d006      	beq.n	800a4b4 <UART_SetConfig+0x168>
 800a4a6:	e00b      	b.n	800a4c0 <UART_SetConfig+0x174>
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	77fb      	strb	r3, [r7, #31]
 800a4ac:	e0f1      	b.n	800a692 <UART_SetConfig+0x346>
 800a4ae:	2302      	movs	r3, #2
 800a4b0:	77fb      	strb	r3, [r7, #31]
 800a4b2:	e0ee      	b.n	800a692 <UART_SetConfig+0x346>
 800a4b4:	2304      	movs	r3, #4
 800a4b6:	77fb      	strb	r3, [r7, #31]
 800a4b8:	e0eb      	b.n	800a692 <UART_SetConfig+0x346>
 800a4ba:	2308      	movs	r3, #8
 800a4bc:	77fb      	strb	r3, [r7, #31]
 800a4be:	e0e8      	b.n	800a692 <UART_SetConfig+0x346>
 800a4c0:	2310      	movs	r3, #16
 800a4c2:	77fb      	strb	r3, [r7, #31]
 800a4c4:	e0e5      	b.n	800a692 <UART_SetConfig+0x346>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4a57      	ldr	r2, [pc, #348]	; (800a628 <UART_SetConfig+0x2dc>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d120      	bne.n	800a512 <UART_SetConfig+0x1c6>
 800a4d0:	4b52      	ldr	r3, [pc, #328]	; (800a61c <UART_SetConfig+0x2d0>)
 800a4d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a4da:	2bc0      	cmp	r3, #192	; 0xc0
 800a4dc:	d013      	beq.n	800a506 <UART_SetConfig+0x1ba>
 800a4de:	2bc0      	cmp	r3, #192	; 0xc0
 800a4e0:	d814      	bhi.n	800a50c <UART_SetConfig+0x1c0>
 800a4e2:	2b80      	cmp	r3, #128	; 0x80
 800a4e4:	d009      	beq.n	800a4fa <UART_SetConfig+0x1ae>
 800a4e6:	2b80      	cmp	r3, #128	; 0x80
 800a4e8:	d810      	bhi.n	800a50c <UART_SetConfig+0x1c0>
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d002      	beq.n	800a4f4 <UART_SetConfig+0x1a8>
 800a4ee:	2b40      	cmp	r3, #64	; 0x40
 800a4f0:	d006      	beq.n	800a500 <UART_SetConfig+0x1b4>
 800a4f2:	e00b      	b.n	800a50c <UART_SetConfig+0x1c0>
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	77fb      	strb	r3, [r7, #31]
 800a4f8:	e0cb      	b.n	800a692 <UART_SetConfig+0x346>
 800a4fa:	2302      	movs	r3, #2
 800a4fc:	77fb      	strb	r3, [r7, #31]
 800a4fe:	e0c8      	b.n	800a692 <UART_SetConfig+0x346>
 800a500:	2304      	movs	r3, #4
 800a502:	77fb      	strb	r3, [r7, #31]
 800a504:	e0c5      	b.n	800a692 <UART_SetConfig+0x346>
 800a506:	2308      	movs	r3, #8
 800a508:	77fb      	strb	r3, [r7, #31]
 800a50a:	e0c2      	b.n	800a692 <UART_SetConfig+0x346>
 800a50c:	2310      	movs	r3, #16
 800a50e:	77fb      	strb	r3, [r7, #31]
 800a510:	e0bf      	b.n	800a692 <UART_SetConfig+0x346>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4a45      	ldr	r2, [pc, #276]	; (800a62c <UART_SetConfig+0x2e0>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d125      	bne.n	800a568 <UART_SetConfig+0x21c>
 800a51c:	4b3f      	ldr	r3, [pc, #252]	; (800a61c <UART_SetConfig+0x2d0>)
 800a51e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a526:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a52a:	d017      	beq.n	800a55c <UART_SetConfig+0x210>
 800a52c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a530:	d817      	bhi.n	800a562 <UART_SetConfig+0x216>
 800a532:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a536:	d00b      	beq.n	800a550 <UART_SetConfig+0x204>
 800a538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a53c:	d811      	bhi.n	800a562 <UART_SetConfig+0x216>
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d003      	beq.n	800a54a <UART_SetConfig+0x1fe>
 800a542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a546:	d006      	beq.n	800a556 <UART_SetConfig+0x20a>
 800a548:	e00b      	b.n	800a562 <UART_SetConfig+0x216>
 800a54a:	2300      	movs	r3, #0
 800a54c:	77fb      	strb	r3, [r7, #31]
 800a54e:	e0a0      	b.n	800a692 <UART_SetConfig+0x346>
 800a550:	2302      	movs	r3, #2
 800a552:	77fb      	strb	r3, [r7, #31]
 800a554:	e09d      	b.n	800a692 <UART_SetConfig+0x346>
 800a556:	2304      	movs	r3, #4
 800a558:	77fb      	strb	r3, [r7, #31]
 800a55a:	e09a      	b.n	800a692 <UART_SetConfig+0x346>
 800a55c:	2308      	movs	r3, #8
 800a55e:	77fb      	strb	r3, [r7, #31]
 800a560:	e097      	b.n	800a692 <UART_SetConfig+0x346>
 800a562:	2310      	movs	r3, #16
 800a564:	77fb      	strb	r3, [r7, #31]
 800a566:	e094      	b.n	800a692 <UART_SetConfig+0x346>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4a30      	ldr	r2, [pc, #192]	; (800a630 <UART_SetConfig+0x2e4>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	d125      	bne.n	800a5be <UART_SetConfig+0x272>
 800a572:	4b2a      	ldr	r3, [pc, #168]	; (800a61c <UART_SetConfig+0x2d0>)
 800a574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a578:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a57c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a580:	d017      	beq.n	800a5b2 <UART_SetConfig+0x266>
 800a582:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a586:	d817      	bhi.n	800a5b8 <UART_SetConfig+0x26c>
 800a588:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a58c:	d00b      	beq.n	800a5a6 <UART_SetConfig+0x25a>
 800a58e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a592:	d811      	bhi.n	800a5b8 <UART_SetConfig+0x26c>
 800a594:	2b00      	cmp	r3, #0
 800a596:	d003      	beq.n	800a5a0 <UART_SetConfig+0x254>
 800a598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a59c:	d006      	beq.n	800a5ac <UART_SetConfig+0x260>
 800a59e:	e00b      	b.n	800a5b8 <UART_SetConfig+0x26c>
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	77fb      	strb	r3, [r7, #31]
 800a5a4:	e075      	b.n	800a692 <UART_SetConfig+0x346>
 800a5a6:	2302      	movs	r3, #2
 800a5a8:	77fb      	strb	r3, [r7, #31]
 800a5aa:	e072      	b.n	800a692 <UART_SetConfig+0x346>
 800a5ac:	2304      	movs	r3, #4
 800a5ae:	77fb      	strb	r3, [r7, #31]
 800a5b0:	e06f      	b.n	800a692 <UART_SetConfig+0x346>
 800a5b2:	2308      	movs	r3, #8
 800a5b4:	77fb      	strb	r3, [r7, #31]
 800a5b6:	e06c      	b.n	800a692 <UART_SetConfig+0x346>
 800a5b8:	2310      	movs	r3, #16
 800a5ba:	77fb      	strb	r3, [r7, #31]
 800a5bc:	e069      	b.n	800a692 <UART_SetConfig+0x346>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a1c      	ldr	r2, [pc, #112]	; (800a634 <UART_SetConfig+0x2e8>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d137      	bne.n	800a638 <UART_SetConfig+0x2ec>
 800a5c8:	4b14      	ldr	r3, [pc, #80]	; (800a61c <UART_SetConfig+0x2d0>)
 800a5ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5ce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a5d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a5d6:	d017      	beq.n	800a608 <UART_SetConfig+0x2bc>
 800a5d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a5dc:	d817      	bhi.n	800a60e <UART_SetConfig+0x2c2>
 800a5de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5e2:	d00b      	beq.n	800a5fc <UART_SetConfig+0x2b0>
 800a5e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5e8:	d811      	bhi.n	800a60e <UART_SetConfig+0x2c2>
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d003      	beq.n	800a5f6 <UART_SetConfig+0x2aa>
 800a5ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5f2:	d006      	beq.n	800a602 <UART_SetConfig+0x2b6>
 800a5f4:	e00b      	b.n	800a60e <UART_SetConfig+0x2c2>
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	77fb      	strb	r3, [r7, #31]
 800a5fa:	e04a      	b.n	800a692 <UART_SetConfig+0x346>
 800a5fc:	2302      	movs	r3, #2
 800a5fe:	77fb      	strb	r3, [r7, #31]
 800a600:	e047      	b.n	800a692 <UART_SetConfig+0x346>
 800a602:	2304      	movs	r3, #4
 800a604:	77fb      	strb	r3, [r7, #31]
 800a606:	e044      	b.n	800a692 <UART_SetConfig+0x346>
 800a608:	2308      	movs	r3, #8
 800a60a:	77fb      	strb	r3, [r7, #31]
 800a60c:	e041      	b.n	800a692 <UART_SetConfig+0x346>
 800a60e:	2310      	movs	r3, #16
 800a610:	77fb      	strb	r3, [r7, #31]
 800a612:	e03e      	b.n	800a692 <UART_SetConfig+0x346>
 800a614:	efff69f3 	.word	0xefff69f3
 800a618:	40011000 	.word	0x40011000
 800a61c:	40023800 	.word	0x40023800
 800a620:	40004400 	.word	0x40004400
 800a624:	40004800 	.word	0x40004800
 800a628:	40004c00 	.word	0x40004c00
 800a62c:	40005000 	.word	0x40005000
 800a630:	40011400 	.word	0x40011400
 800a634:	40007800 	.word	0x40007800
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a71      	ldr	r2, [pc, #452]	; (800a804 <UART_SetConfig+0x4b8>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d125      	bne.n	800a68e <UART_SetConfig+0x342>
 800a642:	4b71      	ldr	r3, [pc, #452]	; (800a808 <UART_SetConfig+0x4bc>)
 800a644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a648:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a64c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a650:	d017      	beq.n	800a682 <UART_SetConfig+0x336>
 800a652:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a656:	d817      	bhi.n	800a688 <UART_SetConfig+0x33c>
 800a658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a65c:	d00b      	beq.n	800a676 <UART_SetConfig+0x32a>
 800a65e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a662:	d811      	bhi.n	800a688 <UART_SetConfig+0x33c>
 800a664:	2b00      	cmp	r3, #0
 800a666:	d003      	beq.n	800a670 <UART_SetConfig+0x324>
 800a668:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a66c:	d006      	beq.n	800a67c <UART_SetConfig+0x330>
 800a66e:	e00b      	b.n	800a688 <UART_SetConfig+0x33c>
 800a670:	2300      	movs	r3, #0
 800a672:	77fb      	strb	r3, [r7, #31]
 800a674:	e00d      	b.n	800a692 <UART_SetConfig+0x346>
 800a676:	2302      	movs	r3, #2
 800a678:	77fb      	strb	r3, [r7, #31]
 800a67a:	e00a      	b.n	800a692 <UART_SetConfig+0x346>
 800a67c:	2304      	movs	r3, #4
 800a67e:	77fb      	strb	r3, [r7, #31]
 800a680:	e007      	b.n	800a692 <UART_SetConfig+0x346>
 800a682:	2308      	movs	r3, #8
 800a684:	77fb      	strb	r3, [r7, #31]
 800a686:	e004      	b.n	800a692 <UART_SetConfig+0x346>
 800a688:	2310      	movs	r3, #16
 800a68a:	77fb      	strb	r3, [r7, #31]
 800a68c:	e001      	b.n	800a692 <UART_SetConfig+0x346>
 800a68e:	2310      	movs	r3, #16
 800a690:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	69db      	ldr	r3, [r3, #28]
 800a696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a69a:	d15b      	bne.n	800a754 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800a69c:	7ffb      	ldrb	r3, [r7, #31]
 800a69e:	2b08      	cmp	r3, #8
 800a6a0:	d827      	bhi.n	800a6f2 <UART_SetConfig+0x3a6>
 800a6a2:	a201      	add	r2, pc, #4	; (adr r2, 800a6a8 <UART_SetConfig+0x35c>)
 800a6a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6a8:	0800a6cd 	.word	0x0800a6cd
 800a6ac:	0800a6d5 	.word	0x0800a6d5
 800a6b0:	0800a6dd 	.word	0x0800a6dd
 800a6b4:	0800a6f3 	.word	0x0800a6f3
 800a6b8:	0800a6e3 	.word	0x0800a6e3
 800a6bc:	0800a6f3 	.word	0x0800a6f3
 800a6c0:	0800a6f3 	.word	0x0800a6f3
 800a6c4:	0800a6f3 	.word	0x0800a6f3
 800a6c8:	0800a6eb 	.word	0x0800a6eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6cc:	f7fc fbb0 	bl	8006e30 <HAL_RCC_GetPCLK1Freq>
 800a6d0:	61b8      	str	r0, [r7, #24]
        break;
 800a6d2:	e013      	b.n	800a6fc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6d4:	f7fc fbc0 	bl	8006e58 <HAL_RCC_GetPCLK2Freq>
 800a6d8:	61b8      	str	r0, [r7, #24]
        break;
 800a6da:	e00f      	b.n	800a6fc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a6dc:	4b4b      	ldr	r3, [pc, #300]	; (800a80c <UART_SetConfig+0x4c0>)
 800a6de:	61bb      	str	r3, [r7, #24]
        break;
 800a6e0:	e00c      	b.n	800a6fc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a6e2:	f7fc fae3 	bl	8006cac <HAL_RCC_GetSysClockFreq>
 800a6e6:	61b8      	str	r0, [r7, #24]
        break;
 800a6e8:	e008      	b.n	800a6fc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6ee:	61bb      	str	r3, [r7, #24]
        break;
 800a6f0:	e004      	b.n	800a6fc <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	77bb      	strb	r3, [r7, #30]
        break;
 800a6fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a6fc:	69bb      	ldr	r3, [r7, #24]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d074      	beq.n	800a7ec <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a702:	69bb      	ldr	r3, [r7, #24]
 800a704:	005a      	lsls	r2, r3, #1
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	085b      	lsrs	r3, r3, #1
 800a70c:	441a      	add	r2, r3
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	fbb2 f3f3 	udiv	r3, r2, r3
 800a716:	b29b      	uxth	r3, r3
 800a718:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	2b0f      	cmp	r3, #15
 800a71e:	d916      	bls.n	800a74e <UART_SetConfig+0x402>
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a726:	d212      	bcs.n	800a74e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	f023 030f 	bic.w	r3, r3, #15
 800a730:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	085b      	lsrs	r3, r3, #1
 800a736:	b29b      	uxth	r3, r3
 800a738:	f003 0307 	and.w	r3, r3, #7
 800a73c:	b29a      	uxth	r2, r3
 800a73e:	89fb      	ldrh	r3, [r7, #14]
 800a740:	4313      	orrs	r3, r2
 800a742:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	89fa      	ldrh	r2, [r7, #14]
 800a74a:	60da      	str	r2, [r3, #12]
 800a74c:	e04e      	b.n	800a7ec <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800a74e:	2301      	movs	r3, #1
 800a750:	77bb      	strb	r3, [r7, #30]
 800a752:	e04b      	b.n	800a7ec <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a754:	7ffb      	ldrb	r3, [r7, #31]
 800a756:	2b08      	cmp	r3, #8
 800a758:	d827      	bhi.n	800a7aa <UART_SetConfig+0x45e>
 800a75a:	a201      	add	r2, pc, #4	; (adr r2, 800a760 <UART_SetConfig+0x414>)
 800a75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a760:	0800a785 	.word	0x0800a785
 800a764:	0800a78d 	.word	0x0800a78d
 800a768:	0800a795 	.word	0x0800a795
 800a76c:	0800a7ab 	.word	0x0800a7ab
 800a770:	0800a79b 	.word	0x0800a79b
 800a774:	0800a7ab 	.word	0x0800a7ab
 800a778:	0800a7ab 	.word	0x0800a7ab
 800a77c:	0800a7ab 	.word	0x0800a7ab
 800a780:	0800a7a3 	.word	0x0800a7a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a784:	f7fc fb54 	bl	8006e30 <HAL_RCC_GetPCLK1Freq>
 800a788:	61b8      	str	r0, [r7, #24]
        break;
 800a78a:	e013      	b.n	800a7b4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a78c:	f7fc fb64 	bl	8006e58 <HAL_RCC_GetPCLK2Freq>
 800a790:	61b8      	str	r0, [r7, #24]
        break;
 800a792:	e00f      	b.n	800a7b4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a794:	4b1d      	ldr	r3, [pc, #116]	; (800a80c <UART_SetConfig+0x4c0>)
 800a796:	61bb      	str	r3, [r7, #24]
        break;
 800a798:	e00c      	b.n	800a7b4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a79a:	f7fc fa87 	bl	8006cac <HAL_RCC_GetSysClockFreq>
 800a79e:	61b8      	str	r0, [r7, #24]
        break;
 800a7a0:	e008      	b.n	800a7b4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7a6:	61bb      	str	r3, [r7, #24]
        break;
 800a7a8:	e004      	b.n	800a7b4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	77bb      	strb	r3, [r7, #30]
        break;
 800a7b2:	bf00      	nop
    }

    if (pclk != 0U)
 800a7b4:	69bb      	ldr	r3, [r7, #24]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d018      	beq.n	800a7ec <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	085a      	lsrs	r2, r3, #1
 800a7c0:	69bb      	ldr	r3, [r7, #24]
 800a7c2:	441a      	add	r2, r3
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	2b0f      	cmp	r3, #15
 800a7d4:	d908      	bls.n	800a7e8 <UART_SetConfig+0x49c>
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7dc:	d204      	bcs.n	800a7e8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	693a      	ldr	r2, [r7, #16]
 800a7e4:	60da      	str	r2, [r3, #12]
 800a7e6:	e001      	b.n	800a7ec <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a7f8:	7fbb      	ldrb	r3, [r7, #30]
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3720      	adds	r7, #32
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}
 800a802:	bf00      	nop
 800a804:	40007c00 	.word	0x40007c00
 800a808:	40023800 	.word	0x40023800
 800a80c:	00f42400 	.word	0x00f42400

0800a810 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a810:	b480      	push	{r7}
 800a812:	b083      	sub	sp, #12
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81c:	f003 0301 	and.w	r3, r3, #1
 800a820:	2b00      	cmp	r3, #0
 800a822:	d00a      	beq.n	800a83a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	430a      	orrs	r2, r1
 800a838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83e:	f003 0302 	and.w	r3, r3, #2
 800a842:	2b00      	cmp	r3, #0
 800a844:	d00a      	beq.n	800a85c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	430a      	orrs	r2, r1
 800a85a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a860:	f003 0304 	and.w	r3, r3, #4
 800a864:	2b00      	cmp	r3, #0
 800a866:	d00a      	beq.n	800a87e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	430a      	orrs	r2, r1
 800a87c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a882:	f003 0308 	and.w	r3, r3, #8
 800a886:	2b00      	cmp	r3, #0
 800a888:	d00a      	beq.n	800a8a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	430a      	orrs	r2, r1
 800a89e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a4:	f003 0310 	and.w	r3, r3, #16
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d00a      	beq.n	800a8c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	689b      	ldr	r3, [r3, #8]
 800a8b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	430a      	orrs	r2, r1
 800a8c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c6:	f003 0320 	and.w	r3, r3, #32
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d00a      	beq.n	800a8e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	430a      	orrs	r2, r1
 800a8e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d01a      	beq.n	800a926 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	430a      	orrs	r2, r1
 800a904:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a90a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a90e:	d10a      	bne.n	800a926 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	685b      	ldr	r3, [r3, #4]
 800a916:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	430a      	orrs	r2, r1
 800a924:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a92a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d00a      	beq.n	800a948 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	430a      	orrs	r2, r1
 800a946:	605a      	str	r2, [r3, #4]
  }
}
 800a948:	bf00      	nop
 800a94a:	370c      	adds	r7, #12
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr

0800a954 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b086      	sub	sp, #24
 800a958:	af02      	add	r7, sp, #8
 800a95a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a964:	f7f9 fb10 	bl	8003f88 <HAL_GetTick>
 800a968:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f003 0308 	and.w	r3, r3, #8
 800a974:	2b08      	cmp	r3, #8
 800a976:	d10e      	bne.n	800a996 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a978:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a97c:	9300      	str	r3, [sp, #0]
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2200      	movs	r2, #0
 800a982:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 f817 	bl	800a9ba <UART_WaitOnFlagUntilTimeout>
 800a98c:	4603      	mov	r3, r0
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d001      	beq.n	800a996 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a992:	2303      	movs	r3, #3
 800a994:	e00d      	b.n	800a9b2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2220      	movs	r2, #32
 800a99a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2220      	movs	r2, #32
 800a9a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a9b0:	2300      	movs	r3, #0
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3710      	adds	r7, #16
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}

0800a9ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a9ba:	b580      	push	{r7, lr}
 800a9bc:	b084      	sub	sp, #16
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	60f8      	str	r0, [r7, #12]
 800a9c2:	60b9      	str	r1, [r7, #8]
 800a9c4:	603b      	str	r3, [r7, #0]
 800a9c6:	4613      	mov	r3, r2
 800a9c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9ca:	e05e      	b.n	800aa8a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9cc:	69bb      	ldr	r3, [r7, #24]
 800a9ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9d2:	d05a      	beq.n	800aa8a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9d4:	f7f9 fad8 	bl	8003f88 <HAL_GetTick>
 800a9d8:	4602      	mov	r2, r0
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	1ad3      	subs	r3, r2, r3
 800a9de:	69ba      	ldr	r2, [r7, #24]
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d302      	bcc.n	800a9ea <UART_WaitOnFlagUntilTimeout+0x30>
 800a9e4:	69bb      	ldr	r3, [r7, #24]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d11b      	bne.n	800aa22 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a9f8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	689a      	ldr	r2, [r3, #8]
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f022 0201 	bic.w	r2, r2, #1
 800aa08:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2220      	movs	r2, #32
 800aa0e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2220      	movs	r2, #32
 800aa14:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800aa1e:	2303      	movs	r3, #3
 800aa20:	e043      	b.n	800aaaa <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f003 0304 	and.w	r3, r3, #4
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d02c      	beq.n	800aa8a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	69db      	ldr	r3, [r3, #28]
 800aa36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa3e:	d124      	bne.n	800aa8a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa48:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	681a      	ldr	r2, [r3, #0]
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800aa58:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	689a      	ldr	r2, [r3, #8]
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f022 0201 	bic.w	r2, r2, #1
 800aa68:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2220      	movs	r2, #32
 800aa6e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2220      	movs	r2, #32
 800aa74:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2220      	movs	r2, #32
 800aa7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	2200      	movs	r2, #0
 800aa82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800aa86:	2303      	movs	r3, #3
 800aa88:	e00f      	b.n	800aaaa <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	69da      	ldr	r2, [r3, #28]
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	4013      	ands	r3, r2
 800aa94:	68ba      	ldr	r2, [r7, #8]
 800aa96:	429a      	cmp	r2, r3
 800aa98:	bf0c      	ite	eq
 800aa9a:	2301      	moveq	r3, #1
 800aa9c:	2300      	movne	r3, #0
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	79fb      	ldrb	r3, [r7, #7]
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d091      	beq.n	800a9cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aaa8:	2300      	movs	r3, #0
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3710      	adds	r7, #16
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
	...

0800aab4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b085      	sub	sp, #20
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800aabe:	2300      	movs	r3, #0
 800aac0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800aac2:	2300      	movs	r3, #0
 800aac4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d027      	beq.n	800ab1e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800aad4:	68fa      	ldr	r2, [r7, #12]
 800aad6:	4b2f      	ldr	r3, [pc, #188]	; (800ab94 <FMC_SDRAM_Init+0xe0>)
 800aad8:	4013      	ands	r3, r2
 800aada:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800aae4:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800aaea:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800aaf0:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800aaf6:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800aafc:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800ab02:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800ab08:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ab0e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ab10:	68fa      	ldr	r2, [r7, #12]
 800ab12:	4313      	orrs	r3, r2
 800ab14:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	68fa      	ldr	r2, [r7, #12]
 800ab1a:	601a      	str	r2, [r3, #0]
 800ab1c:	e032      	b.n	800ab84 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ab2a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ab34:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ab3a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ab3c:	68fa      	ldr	r2, [r7, #12]
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ab48:	68ba      	ldr	r2, [r7, #8]
 800ab4a:	4b12      	ldr	r3, [pc, #72]	; (800ab94 <FMC_SDRAM_Init+0xe0>)
 800ab4c:	4013      	ands	r3, r2
 800ab4e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ab58:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800ab5e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800ab64:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800ab6a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800ab70:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ab72:	68ba      	ldr	r2, [r7, #8]
 800ab74:	4313      	orrs	r3, r2
 800ab76:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	68fa      	ldr	r2, [r7, #12]
 800ab7c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	68ba      	ldr	r2, [r7, #8]
 800ab82:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800ab84:	2300      	movs	r3, #0
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3714      	adds	r7, #20
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr
 800ab92:	bf00      	nop
 800ab94:	ffff8000 	.word	0xffff8000

0800ab98 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b087      	sub	sp, #28
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	60f8      	str	r0, [r7, #12]
 800aba0:	60b9      	str	r1, [r7, #8]
 800aba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800aba4:	2300      	movs	r3, #0
 800aba6:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800aba8:	2300      	movs	r3, #0
 800abaa:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d02e      	beq.n	800ac10 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	689b      	ldr	r3, [r3, #8]
 800abb6:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800abbe:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	3b01      	subs	r3, #1
 800abcc:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800abce:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	689b      	ldr	r3, [r3, #8]
 800abd4:	3b01      	subs	r3, #1
 800abd6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800abd8:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	68db      	ldr	r3, [r3, #12]
 800abde:	3b01      	subs	r3, #1
 800abe0:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800abe2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	691b      	ldr	r3, [r3, #16]
 800abe8:	3b01      	subs	r3, #1
 800abea:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800abec:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	695b      	ldr	r3, [r3, #20]
 800abf2:	3b01      	subs	r3, #1
 800abf4:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800abf6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	699b      	ldr	r3, [r3, #24]
 800abfc:	3b01      	subs	r3, #1
 800abfe:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ac00:	4313      	orrs	r3, r2
 800ac02:	697a      	ldr	r2, [r7, #20]
 800ac04:	4313      	orrs	r3, r2
 800ac06:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	697a      	ldr	r2, [r7, #20]
 800ac0c:	609a      	str	r2, [r3, #8]
 800ac0e:	e039      	b.n	800ac84 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	689b      	ldr	r3, [r3, #8]
 800ac14:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800ac16:	697a      	ldr	r2, [r7, #20]
 800ac18:	4b1e      	ldr	r3, [pc, #120]	; (800ac94 <FMC_SDRAM_Timing_Init+0xfc>)
 800ac1a:	4013      	ands	r3, r2
 800ac1c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	68db      	ldr	r3, [r3, #12]
 800ac22:	3b01      	subs	r3, #1
 800ac24:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	695b      	ldr	r3, [r3, #20]
 800ac2a:	3b01      	subs	r3, #1
 800ac2c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	697a      	ldr	r2, [r7, #20]
 800ac32:	4313      	orrs	r3, r2
 800ac34:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	68db      	ldr	r3, [r3, #12]
 800ac3a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ac42:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	3b01      	subs	r3, #1
 800ac50:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ac52:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	689b      	ldr	r3, [r3, #8]
 800ac58:	3b01      	subs	r3, #1
 800ac5a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800ac5c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	691b      	ldr	r3, [r3, #16]
 800ac62:	3b01      	subs	r3, #1
 800ac64:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800ac66:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	699b      	ldr	r3, [r3, #24]
 800ac6c:	3b01      	subs	r3, #1
 800ac6e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ac70:	4313      	orrs	r3, r2
 800ac72:	693a      	ldr	r2, [r7, #16]
 800ac74:	4313      	orrs	r3, r2
 800ac76:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	697a      	ldr	r2, [r7, #20]
 800ac7c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	693a      	ldr	r2, [r7, #16]
 800ac82:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800ac84:	2300      	movs	r3, #0
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	371c      	adds	r7, #28
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr
 800ac92:	bf00      	nop
 800ac94:	ff0f0fff 	.word	0xff0f0fff

0800ac98 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 800ac98:	b480      	push	{r7}
 800ac9a:	b085      	sub	sp, #20
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	60f8      	str	r0, [r7, #12]
 800aca0:	60b9      	str	r1, [r7, #8]
 800aca2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	691a      	ldr	r2, [r3, #16]
 800aca8:	4b0c      	ldr	r3, [pc, #48]	; (800acdc <FMC_SDRAM_SendCommand+0x44>)
 800acaa:	4013      	ands	r3, r2
 800acac:	68ba      	ldr	r2, [r7, #8]
 800acae:	6811      	ldr	r1, [r2, #0]
 800acb0:	68ba      	ldr	r2, [r7, #8]
 800acb2:	6852      	ldr	r2, [r2, #4]
 800acb4:	4311      	orrs	r1, r2
 800acb6:	68ba      	ldr	r2, [r7, #8]
 800acb8:	6892      	ldr	r2, [r2, #8]
 800acba:	3a01      	subs	r2, #1
 800acbc:	0152      	lsls	r2, r2, #5
 800acbe:	4311      	orrs	r1, r2
 800acc0:	68ba      	ldr	r2, [r7, #8]
 800acc2:	68d2      	ldr	r2, [r2, #12]
 800acc4:	0252      	lsls	r2, r2, #9
 800acc6:	430a      	orrs	r2, r1
 800acc8:	431a      	orrs	r2, r3
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 800acce:	2300      	movs	r3, #0
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3714      	adds	r7, #20
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr
 800acdc:	ffc00000 	.word	0xffc00000

0800ace0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b083      	sub	sp, #12
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	695a      	ldr	r2, [r3, #20]
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	005b      	lsls	r3, r3, #1
 800acf2:	431a      	orrs	r2, r3
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800acf8:	2300      	movs	r3, #0
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	370c      	adds	r7, #12
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr
	...

0800ad08 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ad08:	b084      	sub	sp, #16
 800ad0a:	b480      	push	{r7}
 800ad0c:	b085      	sub	sp, #20
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
 800ad12:	f107 001c 	add.w	r0, r7, #28
 800ad16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ad1e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800ad20:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ad22:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800ad24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800ad26:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ad28:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800ad2a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ad2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800ad2e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ad30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800ad32:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ad34:	68fa      	ldr	r2, [r7, #12]
 800ad36:	4313      	orrs	r3, r2
 800ad38:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	685a      	ldr	r2, [r3, #4]
 800ad3e:	4b07      	ldr	r3, [pc, #28]	; (800ad5c <SDMMC_Init+0x54>)
 800ad40:	4013      	ands	r3, r2
 800ad42:	68fa      	ldr	r2, [r7, #12]
 800ad44:	431a      	orrs	r2, r3
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ad4a:	2300      	movs	r3, #0
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3714      	adds	r7, #20
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	b004      	add	sp, #16
 800ad58:	4770      	bx	lr
 800ad5a:	bf00      	nop
 800ad5c:	ffff8100 	.word	0xffff8100

0800ad60 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b083      	sub	sp, #12
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	370c      	adds	r7, #12
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr

0800ad7a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800ad7a:	b480      	push	{r7}
 800ad7c:	b083      	sub	sp, #12
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	6078      	str	r0, [r7, #4]
 800ad82:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ad8e:	2300      	movs	r3, #0
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	370c      	adds	r7, #12
 800ad94:	46bd      	mov	sp, r7
 800ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9a:	4770      	bx	lr

0800ad9c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b082      	sub	sp, #8
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2203      	movs	r2, #3
 800ada8:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800adaa:	2002      	movs	r0, #2
 800adac:	f7f9 f8f8 	bl	8003fa0 <HAL_Delay>
  
  return HAL_OK;
 800adb0:	2300      	movs	r3, #0
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3708      	adds	r7, #8
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}

0800adba <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800adba:	b480      	push	{r7}
 800adbc:	b083      	sub	sp, #12
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f003 0303 	and.w	r3, r3, #3
}
 800adca:	4618      	mov	r0, r3
 800adcc:	370c      	adds	r7, #12
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr
	...

0800add8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800add8:	b480      	push	{r7}
 800adda:	b085      	sub	sp, #20
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ade2:	2300      	movs	r3, #0
 800ade4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	681a      	ldr	r2, [r3, #0]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800adf6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800adfc:	431a      	orrs	r2, r3
                       Command->CPSM);
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ae02:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ae04:	68fa      	ldr	r2, [r7, #12]
 800ae06:	4313      	orrs	r3, r2
 800ae08:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	68da      	ldr	r2, [r3, #12]
 800ae0e:	4b06      	ldr	r3, [pc, #24]	; (800ae28 <SDMMC_SendCommand+0x50>)
 800ae10:	4013      	ands	r3, r2
 800ae12:	68fa      	ldr	r2, [r7, #12]
 800ae14:	431a      	orrs	r2, r3
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ae1a:	2300      	movs	r3, #0
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3714      	adds	r7, #20
 800ae20:	46bd      	mov	sp, r7
 800ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae26:	4770      	bx	lr
 800ae28:	fffff000 	.word	0xfffff000

0800ae2c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b083      	sub	sp, #12
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	691b      	ldr	r3, [r3, #16]
 800ae38:	b2db      	uxtb	r3, r3
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	370c      	adds	r7, #12
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr

0800ae46 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ae46:	b480      	push	{r7}
 800ae48:	b085      	sub	sp, #20
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	6078      	str	r0, [r7, #4]
 800ae4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	3314      	adds	r3, #20
 800ae54:	461a      	mov	r2, r3
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	4413      	add	r3, r2
 800ae5a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
}  
 800ae60:	4618      	mov	r0, r3
 800ae62:	3714      	adds	r7, #20
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ae76:	2300      	movs	r3, #0
 800ae78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	681a      	ldr	r2, [r3, #0]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	685a      	ldr	r2, [r3, #4]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ae92:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ae98:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ae9e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aea0:	68fa      	ldr	r2, [r7, #12]
 800aea2:	4313      	orrs	r3, r2
 800aea4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeaa:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	431a      	orrs	r2, r3
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800aeb6:	2300      	movs	r3, #0

}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3714      	adds	r7, #20
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr

0800aec4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b088      	sub	sp, #32
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800aed2:	2310      	movs	r3, #16
 800aed4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aed6:	2340      	movs	r3, #64	; 0x40
 800aed8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aeda:	2300      	movs	r3, #0
 800aedc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aee2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aee4:	f107 0308 	add.w	r3, r7, #8
 800aee8:	4619      	mov	r1, r3
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f7ff ff74 	bl	800add8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800aef0:	f241 3288 	movw	r2, #5000	; 0x1388
 800aef4:	2110      	movs	r1, #16
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 fa46 	bl	800b388 <SDMMC_GetCmdResp1>
 800aefc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aefe:	69fb      	ldr	r3, [r7, #28]
}
 800af00:	4618      	mov	r0, r3
 800af02:	3720      	adds	r7, #32
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b088      	sub	sp, #32
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800af16:	2311      	movs	r3, #17
 800af18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af1a:	2340      	movs	r3, #64	; 0x40
 800af1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af1e:	2300      	movs	r3, #0
 800af20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af28:	f107 0308 	add.w	r3, r7, #8
 800af2c:	4619      	mov	r1, r3
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f7ff ff52 	bl	800add8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800af34:	f241 3288 	movw	r2, #5000	; 0x1388
 800af38:	2111      	movs	r1, #17
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 fa24 	bl	800b388 <SDMMC_GetCmdResp1>
 800af40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af42:	69fb      	ldr	r3, [r7, #28]
}
 800af44:	4618      	mov	r0, r3
 800af46:	3720      	adds	r7, #32
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}

0800af4c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b088      	sub	sp, #32
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
 800af54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800af5a:	2312      	movs	r3, #18
 800af5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af5e:	2340      	movs	r3, #64	; 0x40
 800af60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af62:	2300      	movs	r3, #0
 800af64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af6c:	f107 0308 	add.w	r3, r7, #8
 800af70:	4619      	mov	r1, r3
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f7ff ff30 	bl	800add8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800af78:	f241 3288 	movw	r2, #5000	; 0x1388
 800af7c:	2112      	movs	r1, #18
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 fa02 	bl	800b388 <SDMMC_GetCmdResp1>
 800af84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af86:	69fb      	ldr	r3, [r7, #28]
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3720      	adds	r7, #32
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b088      	sub	sp, #32
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800af9e:	2318      	movs	r3, #24
 800afa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afa2:	2340      	movs	r3, #64	; 0x40
 800afa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afa6:	2300      	movs	r3, #0
 800afa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afb0:	f107 0308 	add.w	r3, r7, #8
 800afb4:	4619      	mov	r1, r3
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f7ff ff0e 	bl	800add8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800afbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800afc0:	2118      	movs	r1, #24
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 f9e0 	bl	800b388 <SDMMC_GetCmdResp1>
 800afc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afca:	69fb      	ldr	r3, [r7, #28]
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3720      	adds	r7, #32
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}

0800afd4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b088      	sub	sp, #32
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800afe2:	2319      	movs	r3, #25
 800afe4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afe6:	2340      	movs	r3, #64	; 0x40
 800afe8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afea:	2300      	movs	r3, #0
 800afec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aff2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aff4:	f107 0308 	add.w	r3, r7, #8
 800aff8:	4619      	mov	r1, r3
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f7ff feec 	bl	800add8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b000:	f241 3288 	movw	r2, #5000	; 0x1388
 800b004:	2119      	movs	r1, #25
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f000 f9be 	bl	800b388 <SDMMC_GetCmdResp1>
 800b00c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b00e:	69fb      	ldr	r3, [r7, #28]
}
 800b010:	4618      	mov	r0, r3
 800b012:	3720      	adds	r7, #32
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}

0800b018 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b088      	sub	sp, #32
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b020:	2300      	movs	r3, #0
 800b022:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b024:	230c      	movs	r3, #12
 800b026:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b028:	2340      	movs	r3, #64	; 0x40
 800b02a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b02c:	2300      	movs	r3, #0
 800b02e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b030:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b034:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b036:	f107 0308 	add.w	r3, r7, #8
 800b03a:	4619      	mov	r1, r3
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f7ff fecb 	bl	800add8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b042:	4a05      	ldr	r2, [pc, #20]	; (800b058 <SDMMC_CmdStopTransfer+0x40>)
 800b044:	210c      	movs	r1, #12
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f000 f99e 	bl	800b388 <SDMMC_GetCmdResp1>
 800b04c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b04e:	69fb      	ldr	r3, [r7, #28]
}
 800b050:	4618      	mov	r0, r3
 800b052:	3720      	adds	r7, #32
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}
 800b058:	05f5e100 	.word	0x05f5e100

0800b05c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b08a      	sub	sp, #40	; 0x28
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b06c:	2307      	movs	r3, #7
 800b06e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b070:	2340      	movs	r3, #64	; 0x40
 800b072:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b074:	2300      	movs	r3, #0
 800b076:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b078:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b07c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b07e:	f107 0310 	add.w	r3, r7, #16
 800b082:	4619      	mov	r1, r3
 800b084:	68f8      	ldr	r0, [r7, #12]
 800b086:	f7ff fea7 	bl	800add8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b08a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b08e:	2107      	movs	r1, #7
 800b090:	68f8      	ldr	r0, [r7, #12]
 800b092:	f000 f979 	bl	800b388 <SDMMC_GetCmdResp1>
 800b096:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3728      	adds	r7, #40	; 0x28
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}

0800b0a2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b0a2:	b580      	push	{r7, lr}
 800b0a4:	b088      	sub	sp, #32
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0c0:	f107 0308 	add.w	r3, r7, #8
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f7ff fe86 	bl	800add8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 f92f 	bl	800b330 <SDMMC_GetCmdError>
 800b0d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0d4:	69fb      	ldr	r3, [r7, #28]
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3720      	adds	r7, #32
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}

0800b0de <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b0de:	b580      	push	{r7, lr}
 800b0e0:	b088      	sub	sp, #32
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b0e6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b0ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b0ec:	2308      	movs	r3, #8
 800b0ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0f0:	2340      	movs	r3, #64	; 0x40
 800b0f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0fe:	f107 0308 	add.w	r3, r7, #8
 800b102:	4619      	mov	r1, r3
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f7ff fe67 	bl	800add8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 fb26 	bl	800b75c <SDMMC_GetCmdResp7>
 800b110:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b112:	69fb      	ldr	r3, [r7, #28]
}
 800b114:	4618      	mov	r0, r3
 800b116:	3720      	adds	r7, #32
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b088      	sub	sp, #32
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b12a:	2337      	movs	r3, #55	; 0x37
 800b12c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b12e:	2340      	movs	r3, #64	; 0x40
 800b130:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b132:	2300      	movs	r3, #0
 800b134:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b136:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b13a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b13c:	f107 0308 	add.w	r3, r7, #8
 800b140:	4619      	mov	r1, r3
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f7ff fe48 	bl	800add8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b148:	f241 3288 	movw	r2, #5000	; 0x1388
 800b14c:	2137      	movs	r1, #55	; 0x37
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f000 f91a 	bl	800b388 <SDMMC_GetCmdResp1>
 800b154:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b156:	69fb      	ldr	r3, [r7, #28]
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3720      	adds	r7, #32
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b088      	sub	sp, #32
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b16a:	683a      	ldr	r2, [r7, #0]
 800b16c:	4b0d      	ldr	r3, [pc, #52]	; (800b1a4 <SDMMC_CmdAppOperCommand+0x44>)
 800b16e:	4313      	orrs	r3, r2
 800b170:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b172:	2329      	movs	r3, #41	; 0x29
 800b174:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b176:	2340      	movs	r3, #64	; 0x40
 800b178:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b17a:	2300      	movs	r3, #0
 800b17c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b17e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b182:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b184:	f107 0308 	add.w	r3, r7, #8
 800b188:	4619      	mov	r1, r3
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f7ff fe24 	bl	800add8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f000 fa2f 	bl	800b5f4 <SDMMC_GetCmdResp3>
 800b196:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b198:	69fb      	ldr	r3, [r7, #28]
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3720      	adds	r7, #32
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	80100000 	.word	0x80100000

0800b1a8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b088      	sub	sp, #32
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b1b6:	2306      	movs	r3, #6
 800b1b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b1ba:	2340      	movs	r3, #64	; 0x40
 800b1bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b1c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b1c8:	f107 0308 	add.w	r3, r7, #8
 800b1cc:	4619      	mov	r1, r3
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f7ff fe02 	bl	800add8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b1d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1d8:	2106      	movs	r1, #6
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f000 f8d4 	bl	800b388 <SDMMC_GetCmdResp1>
 800b1e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1e2:	69fb      	ldr	r3, [r7, #28]
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3720      	adds	r7, #32
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b088      	sub	sp, #32
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b1f8:	2333      	movs	r3, #51	; 0x33
 800b1fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b1fc:	2340      	movs	r3, #64	; 0x40
 800b1fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b200:	2300      	movs	r3, #0
 800b202:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b208:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b20a:	f107 0308 	add.w	r3, r7, #8
 800b20e:	4619      	mov	r1, r3
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f7ff fde1 	bl	800add8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b216:	f241 3288 	movw	r2, #5000	; 0x1388
 800b21a:	2133      	movs	r1, #51	; 0x33
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f000 f8b3 	bl	800b388 <SDMMC_GetCmdResp1>
 800b222:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b224:	69fb      	ldr	r3, [r7, #28]
}
 800b226:	4618      	mov	r0, r3
 800b228:	3720      	adds	r7, #32
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}

0800b22e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b22e:	b580      	push	{r7, lr}
 800b230:	b088      	sub	sp, #32
 800b232:	af00      	add	r7, sp, #0
 800b234:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b236:	2300      	movs	r3, #0
 800b238:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b23a:	2302      	movs	r3, #2
 800b23c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b23e:	23c0      	movs	r3, #192	; 0xc0
 800b240:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b242:	2300      	movs	r3, #0
 800b244:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b24a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b24c:	f107 0308 	add.w	r3, r7, #8
 800b250:	4619      	mov	r1, r3
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f7ff fdc0 	bl	800add8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f000 f983 	bl	800b564 <SDMMC_GetCmdResp2>
 800b25e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b260:	69fb      	ldr	r3, [r7, #28]
}
 800b262:	4618      	mov	r0, r3
 800b264:	3720      	adds	r7, #32
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}

0800b26a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b26a:	b580      	push	{r7, lr}
 800b26c:	b088      	sub	sp, #32
 800b26e:	af00      	add	r7, sp, #0
 800b270:	6078      	str	r0, [r7, #4]
 800b272:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b278:	2309      	movs	r3, #9
 800b27a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b27c:	23c0      	movs	r3, #192	; 0xc0
 800b27e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b280:	2300      	movs	r3, #0
 800b282:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b288:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b28a:	f107 0308 	add.w	r3, r7, #8
 800b28e:	4619      	mov	r1, r3
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f7ff fda1 	bl	800add8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 f964 	bl	800b564 <SDMMC_GetCmdResp2>
 800b29c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b29e:	69fb      	ldr	r3, [r7, #28]
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3720      	adds	r7, #32
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}

0800b2a8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b088      	sub	sp, #32
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b2b6:	2303      	movs	r3, #3
 800b2b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2ba:	2340      	movs	r3, #64	; 0x40
 800b2bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2c8:	f107 0308 	add.w	r3, r7, #8
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f7ff fd82 	bl	800add8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b2d4:	683a      	ldr	r2, [r7, #0]
 800b2d6:	2103      	movs	r1, #3
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f000 f9c9 	bl	800b670 <SDMMC_GetCmdResp6>
 800b2de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2e0:	69fb      	ldr	r3, [r7, #28]
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3720      	adds	r7, #32
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b2ea:	b580      	push	{r7, lr}
 800b2ec:	b088      	sub	sp, #32
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
 800b2f2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b2f8:	230d      	movs	r3, #13
 800b2fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2fc:	2340      	movs	r3, #64	; 0x40
 800b2fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b300:	2300      	movs	r3, #0
 800b302:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b304:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b308:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b30a:	f107 0308 	add.w	r3, r7, #8
 800b30e:	4619      	mov	r1, r3
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f7ff fd61 	bl	800add8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b316:	f241 3288 	movw	r2, #5000	; 0x1388
 800b31a:	210d      	movs	r1, #13
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 f833 	bl	800b388 <SDMMC_GetCmdResp1>
 800b322:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b324:	69fb      	ldr	r3, [r7, #28]
}
 800b326:	4618      	mov	r0, r3
 800b328:	3720      	adds	r7, #32
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
	...

0800b330 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b330:	b480      	push	{r7}
 800b332:	b085      	sub	sp, #20
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b338:	4b11      	ldr	r3, [pc, #68]	; (800b380 <SDMMC_GetCmdError+0x50>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4a11      	ldr	r2, [pc, #68]	; (800b384 <SDMMC_GetCmdError+0x54>)
 800b33e:	fba2 2303 	umull	r2, r3, r2, r3
 800b342:	0a5b      	lsrs	r3, r3, #9
 800b344:	f241 3288 	movw	r2, #5000	; 0x1388
 800b348:	fb02 f303 	mul.w	r3, r2, r3
 800b34c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	1e5a      	subs	r2, r3, #1
 800b352:	60fa      	str	r2, [r7, #12]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d102      	bne.n	800b35e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b358:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b35c:	e009      	b.n	800b372 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b366:	2b00      	cmp	r3, #0
 800b368:	d0f1      	beq.n	800b34e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	22c5      	movs	r2, #197	; 0xc5
 800b36e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b370:	2300      	movs	r3, #0
}
 800b372:	4618      	mov	r0, r3
 800b374:	3714      	adds	r7, #20
 800b376:	46bd      	mov	sp, r7
 800b378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37c:	4770      	bx	lr
 800b37e:	bf00      	nop
 800b380:	20000004 	.word	0x20000004
 800b384:	10624dd3 	.word	0x10624dd3

0800b388 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b088      	sub	sp, #32
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	460b      	mov	r3, r1
 800b392:	607a      	str	r2, [r7, #4]
 800b394:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b396:	4b70      	ldr	r3, [pc, #448]	; (800b558 <SDMMC_GetCmdResp1+0x1d0>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	4a70      	ldr	r2, [pc, #448]	; (800b55c <SDMMC_GetCmdResp1+0x1d4>)
 800b39c:	fba2 2303 	umull	r2, r3, r2, r3
 800b3a0:	0a5a      	lsrs	r2, r3, #9
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	fb02 f303 	mul.w	r3, r2, r3
 800b3a8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b3aa:	69fb      	ldr	r3, [r7, #28]
 800b3ac:	1e5a      	subs	r2, r3, #1
 800b3ae:	61fa      	str	r2, [r7, #28]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d102      	bne.n	800b3ba <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b3b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b3b8:	e0c9      	b.n	800b54e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3be:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3c0:	69bb      	ldr	r3, [r7, #24]
 800b3c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d0ef      	beq.n	800b3aa <SDMMC_GetCmdResp1+0x22>
 800b3ca:	69bb      	ldr	r3, [r7, #24]
 800b3cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d1ea      	bne.n	800b3aa <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3d8:	f003 0304 	and.w	r3, r3, #4
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d004      	beq.n	800b3ea <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2204      	movs	r2, #4
 800b3e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b3e6:	2304      	movs	r3, #4
 800b3e8:	e0b1      	b.n	800b54e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ee:	f003 0301 	and.w	r3, r3, #1
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d004      	beq.n	800b400 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2201      	movs	r2, #1
 800b3fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	e0a6      	b.n	800b54e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	22c5      	movs	r2, #197	; 0xc5
 800b404:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b406:	68f8      	ldr	r0, [r7, #12]
 800b408:	f7ff fd10 	bl	800ae2c <SDMMC_GetCommandResponse>
 800b40c:	4603      	mov	r3, r0
 800b40e:	461a      	mov	r2, r3
 800b410:	7afb      	ldrb	r3, [r7, #11]
 800b412:	4293      	cmp	r3, r2
 800b414:	d001      	beq.n	800b41a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b416:	2301      	movs	r3, #1
 800b418:	e099      	b.n	800b54e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b41a:	2100      	movs	r1, #0
 800b41c:	68f8      	ldr	r0, [r7, #12]
 800b41e:	f7ff fd12 	bl	800ae46 <SDMMC_GetResponse>
 800b422:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b424:	697a      	ldr	r2, [r7, #20]
 800b426:	4b4e      	ldr	r3, [pc, #312]	; (800b560 <SDMMC_GetCmdResp1+0x1d8>)
 800b428:	4013      	ands	r3, r2
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d101      	bne.n	800b432 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b42e:	2300      	movs	r3, #0
 800b430:	e08d      	b.n	800b54e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	2b00      	cmp	r3, #0
 800b436:	da02      	bge.n	800b43e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b438:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b43c:	e087      	b.n	800b54e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b444:	2b00      	cmp	r3, #0
 800b446:	d001      	beq.n	800b44c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b448:	2340      	movs	r3, #64	; 0x40
 800b44a:	e080      	b.n	800b54e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b452:	2b00      	cmp	r3, #0
 800b454:	d001      	beq.n	800b45a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b456:	2380      	movs	r3, #128	; 0x80
 800b458:	e079      	b.n	800b54e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b460:	2b00      	cmp	r3, #0
 800b462:	d002      	beq.n	800b46a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b464:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b468:	e071      	b.n	800b54e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b470:	2b00      	cmp	r3, #0
 800b472:	d002      	beq.n	800b47a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b474:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b478:	e069      	b.n	800b54e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b480:	2b00      	cmp	r3, #0
 800b482:	d002      	beq.n	800b48a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b488:	e061      	b.n	800b54e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b490:	2b00      	cmp	r3, #0
 800b492:	d002      	beq.n	800b49a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b494:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b498:	e059      	b.n	800b54e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d002      	beq.n	800b4aa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b4a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4a8:	e051      	b.n	800b54e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d002      	beq.n	800b4ba <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b4b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b4b8:	e049      	b.n	800b54e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d002      	beq.n	800b4ca <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b4c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b4c8:	e041      	b.n	800b54e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d002      	beq.n	800b4da <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b4d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b4d8:	e039      	b.n	800b54e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d002      	beq.n	800b4ea <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b4e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b4e8:	e031      	b.n	800b54e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d002      	beq.n	800b4fa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b4f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b4f8:	e029      	b.n	800b54e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b500:	2b00      	cmp	r3, #0
 800b502:	d002      	beq.n	800b50a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b504:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b508:	e021      	b.n	800b54e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b510:	2b00      	cmp	r3, #0
 800b512:	d002      	beq.n	800b51a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b514:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b518:	e019      	b.n	800b54e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b520:	2b00      	cmp	r3, #0
 800b522:	d002      	beq.n	800b52a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b524:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b528:	e011      	b.n	800b54e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b530:	2b00      	cmp	r3, #0
 800b532:	d002      	beq.n	800b53a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b534:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b538:	e009      	b.n	800b54e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	f003 0308 	and.w	r3, r3, #8
 800b540:	2b00      	cmp	r3, #0
 800b542:	d002      	beq.n	800b54a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b544:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b548:	e001      	b.n	800b54e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b54a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3720      	adds	r7, #32
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop
 800b558:	20000004 	.word	0x20000004
 800b55c:	10624dd3 	.word	0x10624dd3
 800b560:	fdffe008 	.word	0xfdffe008

0800b564 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b564:	b480      	push	{r7}
 800b566:	b085      	sub	sp, #20
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b56c:	4b1f      	ldr	r3, [pc, #124]	; (800b5ec <SDMMC_GetCmdResp2+0x88>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4a1f      	ldr	r2, [pc, #124]	; (800b5f0 <SDMMC_GetCmdResp2+0x8c>)
 800b572:	fba2 2303 	umull	r2, r3, r2, r3
 800b576:	0a5b      	lsrs	r3, r3, #9
 800b578:	f241 3288 	movw	r2, #5000	; 0x1388
 800b57c:	fb02 f303 	mul.w	r3, r2, r3
 800b580:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	1e5a      	subs	r2, r3, #1
 800b586:	60fa      	str	r2, [r7, #12]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d102      	bne.n	800b592 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b58c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b590:	e026      	b.n	800b5e0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b596:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d0ef      	beq.n	800b582 <SDMMC_GetCmdResp2+0x1e>
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d1ea      	bne.n	800b582 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5b0:	f003 0304 	and.w	r3, r3, #4
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d004      	beq.n	800b5c2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2204      	movs	r2, #4
 800b5bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b5be:	2304      	movs	r3, #4
 800b5c0:	e00e      	b.n	800b5e0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5c6:	f003 0301 	and.w	r3, r3, #1
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d004      	beq.n	800b5d8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	e003      	b.n	800b5e0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	22c5      	movs	r2, #197	; 0xc5
 800b5dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b5de:	2300      	movs	r3, #0
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3714      	adds	r7, #20
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr
 800b5ec:	20000004 	.word	0x20000004
 800b5f0:	10624dd3 	.word	0x10624dd3

0800b5f4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b085      	sub	sp, #20
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b5fc:	4b1a      	ldr	r3, [pc, #104]	; (800b668 <SDMMC_GetCmdResp3+0x74>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4a1a      	ldr	r2, [pc, #104]	; (800b66c <SDMMC_GetCmdResp3+0x78>)
 800b602:	fba2 2303 	umull	r2, r3, r2, r3
 800b606:	0a5b      	lsrs	r3, r3, #9
 800b608:	f241 3288 	movw	r2, #5000	; 0x1388
 800b60c:	fb02 f303 	mul.w	r3, r2, r3
 800b610:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	1e5a      	subs	r2, r3, #1
 800b616:	60fa      	str	r2, [r7, #12]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d102      	bne.n	800b622 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b61c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b620:	e01b      	b.n	800b65a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b626:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d0ef      	beq.n	800b612 <SDMMC_GetCmdResp3+0x1e>
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d1ea      	bne.n	800b612 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b640:	f003 0304 	and.w	r3, r3, #4
 800b644:	2b00      	cmp	r3, #0
 800b646:	d004      	beq.n	800b652 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2204      	movs	r2, #4
 800b64c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b64e:	2304      	movs	r3, #4
 800b650:	e003      	b.n	800b65a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	22c5      	movs	r2, #197	; 0xc5
 800b656:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b658:	2300      	movs	r3, #0
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3714      	adds	r7, #20
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr
 800b666:	bf00      	nop
 800b668:	20000004 	.word	0x20000004
 800b66c:	10624dd3 	.word	0x10624dd3

0800b670 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b088      	sub	sp, #32
 800b674:	af00      	add	r7, sp, #0
 800b676:	60f8      	str	r0, [r7, #12]
 800b678:	460b      	mov	r3, r1
 800b67a:	607a      	str	r2, [r7, #4]
 800b67c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b67e:	4b35      	ldr	r3, [pc, #212]	; (800b754 <SDMMC_GetCmdResp6+0xe4>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4a35      	ldr	r2, [pc, #212]	; (800b758 <SDMMC_GetCmdResp6+0xe8>)
 800b684:	fba2 2303 	umull	r2, r3, r2, r3
 800b688:	0a5b      	lsrs	r3, r3, #9
 800b68a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b68e:	fb02 f303 	mul.w	r3, r2, r3
 800b692:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b694:	69fb      	ldr	r3, [r7, #28]
 800b696:	1e5a      	subs	r2, r3, #1
 800b698:	61fa      	str	r2, [r7, #28]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d102      	bne.n	800b6a4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b69e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b6a2:	e052      	b.n	800b74a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6a8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b6aa:	69bb      	ldr	r3, [r7, #24]
 800b6ac:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d0ef      	beq.n	800b694 <SDMMC_GetCmdResp6+0x24>
 800b6b4:	69bb      	ldr	r3, [r7, #24]
 800b6b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d1ea      	bne.n	800b694 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6c2:	f003 0304 	and.w	r3, r3, #4
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d004      	beq.n	800b6d4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2204      	movs	r2, #4
 800b6ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b6d0:	2304      	movs	r3, #4
 800b6d2:	e03a      	b.n	800b74a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6d8:	f003 0301 	and.w	r3, r3, #1
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d004      	beq.n	800b6ea <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	e02f      	b.n	800b74a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b6ea:	68f8      	ldr	r0, [r7, #12]
 800b6ec:	f7ff fb9e 	bl	800ae2c <SDMMC_GetCommandResponse>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	7afb      	ldrb	r3, [r7, #11]
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	d001      	beq.n	800b6fe <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	e025      	b.n	800b74a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	22c5      	movs	r2, #197	; 0xc5
 800b702:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b704:	2100      	movs	r1, #0
 800b706:	68f8      	ldr	r0, [r7, #12]
 800b708:	f7ff fb9d 	bl	800ae46 <SDMMC_GetResponse>
 800b70c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b714:	2b00      	cmp	r3, #0
 800b716:	d106      	bne.n	800b726 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	0c1b      	lsrs	r3, r3, #16
 800b71c:	b29a      	uxth	r2, r3
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b722:	2300      	movs	r3, #0
 800b724:	e011      	b.n	800b74a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d002      	beq.n	800b736 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b730:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b734:	e009      	b.n	800b74a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d002      	beq.n	800b746 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b744:	e001      	b.n	800b74a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b746:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3720      	adds	r7, #32
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}
 800b752:	bf00      	nop
 800b754:	20000004 	.word	0x20000004
 800b758:	10624dd3 	.word	0x10624dd3

0800b75c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b085      	sub	sp, #20
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b764:	4b22      	ldr	r3, [pc, #136]	; (800b7f0 <SDMMC_GetCmdResp7+0x94>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	4a22      	ldr	r2, [pc, #136]	; (800b7f4 <SDMMC_GetCmdResp7+0x98>)
 800b76a:	fba2 2303 	umull	r2, r3, r2, r3
 800b76e:	0a5b      	lsrs	r3, r3, #9
 800b770:	f241 3288 	movw	r2, #5000	; 0x1388
 800b774:	fb02 f303 	mul.w	r3, r2, r3
 800b778:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	1e5a      	subs	r2, r3, #1
 800b77e:	60fa      	str	r2, [r7, #12]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d102      	bne.n	800b78a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b784:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b788:	e02c      	b.n	800b7e4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b78e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b796:	2b00      	cmp	r3, #0
 800b798:	d0ef      	beq.n	800b77a <SDMMC_GetCmdResp7+0x1e>
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d1ea      	bne.n	800b77a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7a8:	f003 0304 	and.w	r3, r3, #4
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d004      	beq.n	800b7ba <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2204      	movs	r2, #4
 800b7b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b7b6:	2304      	movs	r3, #4
 800b7b8:	e014      	b.n	800b7e4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7be:	f003 0301 	and.w	r3, r3, #1
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d004      	beq.n	800b7d0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	e009      	b.n	800b7e4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d002      	beq.n	800b7e2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2240      	movs	r2, #64	; 0x40
 800b7e0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b7e2:	2300      	movs	r3, #0
  
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3714      	adds	r7, #20
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr
 800b7f0:	20000004 	.word	0x20000004
 800b7f4:	10624dd3 	.word	0x10624dd3

0800b7f8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b084      	sub	sp, #16
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	4603      	mov	r3, r0
 800b800:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b802:	79fb      	ldrb	r3, [r7, #7]
 800b804:	4a08      	ldr	r2, [pc, #32]	; (800b828 <disk_status+0x30>)
 800b806:	009b      	lsls	r3, r3, #2
 800b808:	4413      	add	r3, r2
 800b80a:	685b      	ldr	r3, [r3, #4]
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	79fa      	ldrb	r2, [r7, #7]
 800b810:	4905      	ldr	r1, [pc, #20]	; (800b828 <disk_status+0x30>)
 800b812:	440a      	add	r2, r1
 800b814:	7b12      	ldrb	r2, [r2, #12]
 800b816:	4610      	mov	r0, r2
 800b818:	4798      	blx	r3
 800b81a:	4603      	mov	r3, r0
 800b81c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b81e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b820:	4618      	mov	r0, r3
 800b822:	3710      	adds	r7, #16
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}
 800b828:	20000798 	.word	0x20000798

0800b82c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
 800b832:	4603      	mov	r3, r0
 800b834:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b836:	2300      	movs	r3, #0
 800b838:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b83a:	79fb      	ldrb	r3, [r7, #7]
 800b83c:	4a0d      	ldr	r2, [pc, #52]	; (800b874 <disk_initialize+0x48>)
 800b83e:	5cd3      	ldrb	r3, [r2, r3]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d111      	bne.n	800b868 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b844:	79fb      	ldrb	r3, [r7, #7]
 800b846:	4a0b      	ldr	r2, [pc, #44]	; (800b874 <disk_initialize+0x48>)
 800b848:	2101      	movs	r1, #1
 800b84a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b84c:	79fb      	ldrb	r3, [r7, #7]
 800b84e:	4a09      	ldr	r2, [pc, #36]	; (800b874 <disk_initialize+0x48>)
 800b850:	009b      	lsls	r3, r3, #2
 800b852:	4413      	add	r3, r2
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	79fa      	ldrb	r2, [r7, #7]
 800b85a:	4906      	ldr	r1, [pc, #24]	; (800b874 <disk_initialize+0x48>)
 800b85c:	440a      	add	r2, r1
 800b85e:	7b12      	ldrb	r2, [r2, #12]
 800b860:	4610      	mov	r0, r2
 800b862:	4798      	blx	r3
 800b864:	4603      	mov	r3, r0
 800b866:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b868:	7bfb      	ldrb	r3, [r7, #15]
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3710      	adds	r7, #16
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	20000798 	.word	0x20000798

0800b878 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b878:	b590      	push	{r4, r7, lr}
 800b87a:	b087      	sub	sp, #28
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	60b9      	str	r1, [r7, #8]
 800b880:	607a      	str	r2, [r7, #4]
 800b882:	603b      	str	r3, [r7, #0]
 800b884:	4603      	mov	r3, r0
 800b886:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b888:	7bfb      	ldrb	r3, [r7, #15]
 800b88a:	4a0a      	ldr	r2, [pc, #40]	; (800b8b4 <disk_read+0x3c>)
 800b88c:	009b      	lsls	r3, r3, #2
 800b88e:	4413      	add	r3, r2
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	689c      	ldr	r4, [r3, #8]
 800b894:	7bfb      	ldrb	r3, [r7, #15]
 800b896:	4a07      	ldr	r2, [pc, #28]	; (800b8b4 <disk_read+0x3c>)
 800b898:	4413      	add	r3, r2
 800b89a:	7b18      	ldrb	r0, [r3, #12]
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	687a      	ldr	r2, [r7, #4]
 800b8a0:	68b9      	ldr	r1, [r7, #8]
 800b8a2:	47a0      	blx	r4
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	75fb      	strb	r3, [r7, #23]
  return res;
 800b8a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	371c      	adds	r7, #28
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd90      	pop	{r4, r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	20000798 	.word	0x20000798

0800b8b8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b8b8:	b590      	push	{r4, r7, lr}
 800b8ba:	b087      	sub	sp, #28
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	60b9      	str	r1, [r7, #8]
 800b8c0:	607a      	str	r2, [r7, #4]
 800b8c2:	603b      	str	r3, [r7, #0]
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b8c8:	7bfb      	ldrb	r3, [r7, #15]
 800b8ca:	4a0a      	ldr	r2, [pc, #40]	; (800b8f4 <disk_write+0x3c>)
 800b8cc:	009b      	lsls	r3, r3, #2
 800b8ce:	4413      	add	r3, r2
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	68dc      	ldr	r4, [r3, #12]
 800b8d4:	7bfb      	ldrb	r3, [r7, #15]
 800b8d6:	4a07      	ldr	r2, [pc, #28]	; (800b8f4 <disk_write+0x3c>)
 800b8d8:	4413      	add	r3, r2
 800b8da:	7b18      	ldrb	r0, [r3, #12]
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	68b9      	ldr	r1, [r7, #8]
 800b8e2:	47a0      	blx	r4
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	75fb      	strb	r3, [r7, #23]
  return res;
 800b8e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	371c      	adds	r7, #28
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd90      	pop	{r4, r7, pc}
 800b8f2:	bf00      	nop
 800b8f4:	20000798 	.word	0x20000798

0800b8f8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b085      	sub	sp, #20
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	3301      	adds	r3, #1
 800b904:	781b      	ldrb	r3, [r3, #0]
 800b906:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b908:	89fb      	ldrh	r3, [r7, #14]
 800b90a:	021b      	lsls	r3, r3, #8
 800b90c:	b21a      	sxth	r2, r3
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	781b      	ldrb	r3, [r3, #0]
 800b912:	b21b      	sxth	r3, r3
 800b914:	4313      	orrs	r3, r2
 800b916:	b21b      	sxth	r3, r3
 800b918:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b91a:	89fb      	ldrh	r3, [r7, #14]
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	3714      	adds	r7, #20
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr

0800b928 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b928:	b480      	push	{r7}
 800b92a:	b085      	sub	sp, #20
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	3303      	adds	r3, #3
 800b934:	781b      	ldrb	r3, [r3, #0]
 800b936:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	021b      	lsls	r3, r3, #8
 800b93c:	687a      	ldr	r2, [r7, #4]
 800b93e:	3202      	adds	r2, #2
 800b940:	7812      	ldrb	r2, [r2, #0]
 800b942:	4313      	orrs	r3, r2
 800b944:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	021b      	lsls	r3, r3, #8
 800b94a:	687a      	ldr	r2, [r7, #4]
 800b94c:	3201      	adds	r2, #1
 800b94e:	7812      	ldrb	r2, [r2, #0]
 800b950:	4313      	orrs	r3, r2
 800b952:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	021b      	lsls	r3, r3, #8
 800b958:	687a      	ldr	r2, [r7, #4]
 800b95a:	7812      	ldrb	r2, [r2, #0]
 800b95c:	4313      	orrs	r3, r2
 800b95e:	60fb      	str	r3, [r7, #12]
	return rv;
 800b960:	68fb      	ldr	r3, [r7, #12]
}
 800b962:	4618      	mov	r0, r3
 800b964:	3714      	adds	r7, #20
 800b966:	46bd      	mov	sp, r7
 800b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96c:	4770      	bx	lr

0800b96e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b96e:	b480      	push	{r7}
 800b970:	b083      	sub	sp, #12
 800b972:	af00      	add	r7, sp, #0
 800b974:	6078      	str	r0, [r7, #4]
 800b976:	460b      	mov	r3, r1
 800b978:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	1c5a      	adds	r2, r3, #1
 800b97e:	607a      	str	r2, [r7, #4]
 800b980:	887a      	ldrh	r2, [r7, #2]
 800b982:	b2d2      	uxtb	r2, r2
 800b984:	701a      	strb	r2, [r3, #0]
 800b986:	887b      	ldrh	r3, [r7, #2]
 800b988:	0a1b      	lsrs	r3, r3, #8
 800b98a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	1c5a      	adds	r2, r3, #1
 800b990:	607a      	str	r2, [r7, #4]
 800b992:	887a      	ldrh	r2, [r7, #2]
 800b994:	b2d2      	uxtb	r2, r2
 800b996:	701a      	strb	r2, [r3, #0]
}
 800b998:	bf00      	nop
 800b99a:	370c      	adds	r7, #12
 800b99c:	46bd      	mov	sp, r7
 800b99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a2:	4770      	bx	lr

0800b9a4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b083      	sub	sp, #12
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	1c5a      	adds	r2, r3, #1
 800b9b2:	607a      	str	r2, [r7, #4]
 800b9b4:	683a      	ldr	r2, [r7, #0]
 800b9b6:	b2d2      	uxtb	r2, r2
 800b9b8:	701a      	strb	r2, [r3, #0]
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	0a1b      	lsrs	r3, r3, #8
 800b9be:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	1c5a      	adds	r2, r3, #1
 800b9c4:	607a      	str	r2, [r7, #4]
 800b9c6:	683a      	ldr	r2, [r7, #0]
 800b9c8:	b2d2      	uxtb	r2, r2
 800b9ca:	701a      	strb	r2, [r3, #0]
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	0a1b      	lsrs	r3, r3, #8
 800b9d0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	1c5a      	adds	r2, r3, #1
 800b9d6:	607a      	str	r2, [r7, #4]
 800b9d8:	683a      	ldr	r2, [r7, #0]
 800b9da:	b2d2      	uxtb	r2, r2
 800b9dc:	701a      	strb	r2, [r3, #0]
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	0a1b      	lsrs	r3, r3, #8
 800b9e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	1c5a      	adds	r2, r3, #1
 800b9e8:	607a      	str	r2, [r7, #4]
 800b9ea:	683a      	ldr	r2, [r7, #0]
 800b9ec:	b2d2      	uxtb	r2, r2
 800b9ee:	701a      	strb	r2, [r3, #0]
}
 800b9f0:	bf00      	nop
 800b9f2:	370c      	adds	r7, #12
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr

0800b9fc <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b9fc:	b480      	push	{r7}
 800b9fe:	b087      	sub	sp, #28
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	60f8      	str	r0, [r7, #12]
 800ba04:	60b9      	str	r1, [r7, #8]
 800ba06:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	1c5a      	adds	r2, r3, #1
 800ba10:	617a      	str	r2, [r7, #20]
 800ba12:	68ba      	ldr	r2, [r7, #8]
 800ba14:	b2d2      	uxtb	r2, r2
 800ba16:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	3b01      	subs	r3, #1
 800ba1c:	607b      	str	r3, [r7, #4]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d1f3      	bne.n	800ba0c <mem_set+0x10>
}
 800ba24:	bf00      	nop
 800ba26:	bf00      	nop
 800ba28:	371c      	adds	r7, #28
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba30:	4770      	bx	lr

0800ba32 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ba32:	b480      	push	{r7}
 800ba34:	b089      	sub	sp, #36	; 0x24
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	60f8      	str	r0, [r7, #12]
 800ba3a:	60b9      	str	r1, [r7, #8]
 800ba3c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	61fb      	str	r3, [r7, #28]
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ba46:	2300      	movs	r3, #0
 800ba48:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ba4a:	69fb      	ldr	r3, [r7, #28]
 800ba4c:	1c5a      	adds	r2, r3, #1
 800ba4e:	61fa      	str	r2, [r7, #28]
 800ba50:	781b      	ldrb	r3, [r3, #0]
 800ba52:	4619      	mov	r1, r3
 800ba54:	69bb      	ldr	r3, [r7, #24]
 800ba56:	1c5a      	adds	r2, r3, #1
 800ba58:	61ba      	str	r2, [r7, #24]
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	1acb      	subs	r3, r1, r3
 800ba5e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	3b01      	subs	r3, #1
 800ba64:	607b      	str	r3, [r7, #4]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d002      	beq.n	800ba72 <mem_cmp+0x40>
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d0eb      	beq.n	800ba4a <mem_cmp+0x18>

	return r;
 800ba72:	697b      	ldr	r3, [r7, #20]
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3724      	adds	r7, #36	; 0x24
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7e:	4770      	bx	lr

0800ba80 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ba80:	b480      	push	{r7}
 800ba82:	b083      	sub	sp, #12
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ba8a:	e002      	b.n	800ba92 <chk_chr+0x12>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	3301      	adds	r3, #1
 800ba90:	607b      	str	r3, [r7, #4]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	781b      	ldrb	r3, [r3, #0]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d005      	beq.n	800baa6 <chk_chr+0x26>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	461a      	mov	r2, r3
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d1f2      	bne.n	800ba8c <chk_chr+0xc>
	return *str;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	781b      	ldrb	r3, [r3, #0]
}
 800baaa:	4618      	mov	r0, r3
 800baac:	370c      	adds	r7, #12
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr

0800bab6 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800bab6:	b580      	push	{r7, lr}
 800bab8:	b082      	sub	sp, #8
 800baba:	af00      	add	r7, sp, #0
 800babc:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d009      	beq.n	800bad8 <lock_fs+0x22>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	691b      	ldr	r3, [r3, #16]
 800bac8:	4618      	mov	r0, r3
 800baca:	f001 ffc6 	bl	800da5a <ff_req_grant>
 800bace:	4603      	mov	r3, r0
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d001      	beq.n	800bad8 <lock_fs+0x22>
 800bad4:	2301      	movs	r3, #1
 800bad6:	e000      	b.n	800bada <lock_fs+0x24>
 800bad8:	2300      	movs	r3, #0
}
 800bada:	4618      	mov	r0, r3
 800badc:	3708      	adds	r7, #8
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}

0800bae2 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800bae2:	b580      	push	{r7, lr}
 800bae4:	b082      	sub	sp, #8
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	6078      	str	r0, [r7, #4]
 800baea:	460b      	mov	r3, r1
 800baec:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d00d      	beq.n	800bb10 <unlock_fs+0x2e>
 800baf4:	78fb      	ldrb	r3, [r7, #3]
 800baf6:	2b0c      	cmp	r3, #12
 800baf8:	d00a      	beq.n	800bb10 <unlock_fs+0x2e>
 800bafa:	78fb      	ldrb	r3, [r7, #3]
 800bafc:	2b0b      	cmp	r3, #11
 800bafe:	d007      	beq.n	800bb10 <unlock_fs+0x2e>
 800bb00:	78fb      	ldrb	r3, [r7, #3]
 800bb02:	2b0f      	cmp	r3, #15
 800bb04:	d004      	beq.n	800bb10 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	691b      	ldr	r3, [r3, #16]
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f001 ffba 	bl	800da84 <ff_rel_grant>
	}
}
 800bb10:	bf00      	nop
 800bb12:	3708      	adds	r7, #8
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b085      	sub	sp, #20
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bb22:	2300      	movs	r3, #0
 800bb24:	60fb      	str	r3, [r7, #12]
 800bb26:	e01f      	b.n	800bb68 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bb28:	4a41      	ldr	r2, [pc, #260]	; (800bc30 <inc_lock+0x118>)
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	011b      	lsls	r3, r3, #4
 800bb2e:	4413      	add	r3, r2
 800bb30:	681a      	ldr	r2, [r3, #0]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d113      	bne.n	800bb62 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bb3a:	4a3d      	ldr	r2, [pc, #244]	; (800bc30 <inc_lock+0x118>)
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	011b      	lsls	r3, r3, #4
 800bb40:	4413      	add	r3, r2
 800bb42:	3304      	adds	r3, #4
 800bb44:	681a      	ldr	r2, [r3, #0]
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d109      	bne.n	800bb62 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bb4e:	4a38      	ldr	r2, [pc, #224]	; (800bc30 <inc_lock+0x118>)
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	011b      	lsls	r3, r3, #4
 800bb54:	4413      	add	r3, r2
 800bb56:	3308      	adds	r3, #8
 800bb58:	681a      	ldr	r2, [r3, #0]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	d006      	beq.n	800bb70 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	3301      	adds	r3, #1
 800bb66:	60fb      	str	r3, [r7, #12]
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2b01      	cmp	r3, #1
 800bb6c:	d9dc      	bls.n	800bb28 <inc_lock+0x10>
 800bb6e:	e000      	b.n	800bb72 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bb70:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2b02      	cmp	r3, #2
 800bb76:	d132      	bne.n	800bbde <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	60fb      	str	r3, [r7, #12]
 800bb7c:	e002      	b.n	800bb84 <inc_lock+0x6c>
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	3301      	adds	r3, #1
 800bb82:	60fb      	str	r3, [r7, #12]
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	2b01      	cmp	r3, #1
 800bb88:	d806      	bhi.n	800bb98 <inc_lock+0x80>
 800bb8a:	4a29      	ldr	r2, [pc, #164]	; (800bc30 <inc_lock+0x118>)
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	011b      	lsls	r3, r3, #4
 800bb90:	4413      	add	r3, r2
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d1f2      	bne.n	800bb7e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2b02      	cmp	r3, #2
 800bb9c:	d101      	bne.n	800bba2 <inc_lock+0x8a>
 800bb9e:	2300      	movs	r3, #0
 800bba0:	e040      	b.n	800bc24 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681a      	ldr	r2, [r3, #0]
 800bba6:	4922      	ldr	r1, [pc, #136]	; (800bc30 <inc_lock+0x118>)
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	011b      	lsls	r3, r3, #4
 800bbac:	440b      	add	r3, r1
 800bbae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	689a      	ldr	r2, [r3, #8]
 800bbb4:	491e      	ldr	r1, [pc, #120]	; (800bc30 <inc_lock+0x118>)
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	011b      	lsls	r3, r3, #4
 800bbba:	440b      	add	r3, r1
 800bbbc:	3304      	adds	r3, #4
 800bbbe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	695a      	ldr	r2, [r3, #20]
 800bbc4:	491a      	ldr	r1, [pc, #104]	; (800bc30 <inc_lock+0x118>)
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	011b      	lsls	r3, r3, #4
 800bbca:	440b      	add	r3, r1
 800bbcc:	3308      	adds	r3, #8
 800bbce:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bbd0:	4a17      	ldr	r2, [pc, #92]	; (800bc30 <inc_lock+0x118>)
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	011b      	lsls	r3, r3, #4
 800bbd6:	4413      	add	r3, r2
 800bbd8:	330c      	adds	r3, #12
 800bbda:	2200      	movs	r2, #0
 800bbdc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d009      	beq.n	800bbf8 <inc_lock+0xe0>
 800bbe4:	4a12      	ldr	r2, [pc, #72]	; (800bc30 <inc_lock+0x118>)
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	011b      	lsls	r3, r3, #4
 800bbea:	4413      	add	r3, r2
 800bbec:	330c      	adds	r3, #12
 800bbee:	881b      	ldrh	r3, [r3, #0]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d001      	beq.n	800bbf8 <inc_lock+0xe0>
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	e015      	b.n	800bc24 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d108      	bne.n	800bc10 <inc_lock+0xf8>
 800bbfe:	4a0c      	ldr	r2, [pc, #48]	; (800bc30 <inc_lock+0x118>)
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	011b      	lsls	r3, r3, #4
 800bc04:	4413      	add	r3, r2
 800bc06:	330c      	adds	r3, #12
 800bc08:	881b      	ldrh	r3, [r3, #0]
 800bc0a:	3301      	adds	r3, #1
 800bc0c:	b29a      	uxth	r2, r3
 800bc0e:	e001      	b.n	800bc14 <inc_lock+0xfc>
 800bc10:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bc14:	4906      	ldr	r1, [pc, #24]	; (800bc30 <inc_lock+0x118>)
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	011b      	lsls	r3, r3, #4
 800bc1a:	440b      	add	r3, r1
 800bc1c:	330c      	adds	r3, #12
 800bc1e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	3301      	adds	r3, #1
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3714      	adds	r7, #20
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr
 800bc30:	20000778 	.word	0x20000778

0800bc34 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b085      	sub	sp, #20
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	3b01      	subs	r3, #1
 800bc40:	607b      	str	r3, [r7, #4]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2b01      	cmp	r3, #1
 800bc46:	d825      	bhi.n	800bc94 <dec_lock+0x60>
		n = Files[i].ctr;
 800bc48:	4a17      	ldr	r2, [pc, #92]	; (800bca8 <dec_lock+0x74>)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	011b      	lsls	r3, r3, #4
 800bc4e:	4413      	add	r3, r2
 800bc50:	330c      	adds	r3, #12
 800bc52:	881b      	ldrh	r3, [r3, #0]
 800bc54:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bc56:	89fb      	ldrh	r3, [r7, #14]
 800bc58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc5c:	d101      	bne.n	800bc62 <dec_lock+0x2e>
 800bc5e:	2300      	movs	r3, #0
 800bc60:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bc62:	89fb      	ldrh	r3, [r7, #14]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d002      	beq.n	800bc6e <dec_lock+0x3a>
 800bc68:	89fb      	ldrh	r3, [r7, #14]
 800bc6a:	3b01      	subs	r3, #1
 800bc6c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bc6e:	4a0e      	ldr	r2, [pc, #56]	; (800bca8 <dec_lock+0x74>)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	011b      	lsls	r3, r3, #4
 800bc74:	4413      	add	r3, r2
 800bc76:	330c      	adds	r3, #12
 800bc78:	89fa      	ldrh	r2, [r7, #14]
 800bc7a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bc7c:	89fb      	ldrh	r3, [r7, #14]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d105      	bne.n	800bc8e <dec_lock+0x5a>
 800bc82:	4a09      	ldr	r2, [pc, #36]	; (800bca8 <dec_lock+0x74>)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	011b      	lsls	r3, r3, #4
 800bc88:	4413      	add	r3, r2
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	737b      	strb	r3, [r7, #13]
 800bc92:	e001      	b.n	800bc98 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bc94:	2302      	movs	r3, #2
 800bc96:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bc98:	7b7b      	ldrb	r3, [r7, #13]
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3714      	adds	r7, #20
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr
 800bca6:	bf00      	nop
 800bca8:	20000778 	.word	0x20000778

0800bcac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b085      	sub	sp, #20
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	60fb      	str	r3, [r7, #12]
 800bcb8:	e010      	b.n	800bcdc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bcba:	4a0d      	ldr	r2, [pc, #52]	; (800bcf0 <clear_lock+0x44>)
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	011b      	lsls	r3, r3, #4
 800bcc0:	4413      	add	r3, r2
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	d105      	bne.n	800bcd6 <clear_lock+0x2a>
 800bcca:	4a09      	ldr	r2, [pc, #36]	; (800bcf0 <clear_lock+0x44>)
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	011b      	lsls	r3, r3, #4
 800bcd0:	4413      	add	r3, r2
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	3301      	adds	r3, #1
 800bcda:	60fb      	str	r3, [r7, #12]
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2b01      	cmp	r3, #1
 800bce0:	d9eb      	bls.n	800bcba <clear_lock+0xe>
	}
}
 800bce2:	bf00      	nop
 800bce4:	bf00      	nop
 800bce6:	3714      	adds	r7, #20
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr
 800bcf0:	20000778 	.word	0x20000778

0800bcf4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b086      	sub	sp, #24
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	78db      	ldrb	r3, [r3, #3]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d034      	beq.n	800bd72 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd0c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	7858      	ldrb	r0, [r3, #1]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bd18:	2301      	movs	r3, #1
 800bd1a:	697a      	ldr	r2, [r7, #20]
 800bd1c:	f7ff fdcc 	bl	800b8b8 <disk_write>
 800bd20:	4603      	mov	r3, r0
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d002      	beq.n	800bd2c <sync_window+0x38>
			res = FR_DISK_ERR;
 800bd26:	2301      	movs	r3, #1
 800bd28:	73fb      	strb	r3, [r7, #15]
 800bd2a:	e022      	b.n	800bd72 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd36:	697a      	ldr	r2, [r7, #20]
 800bd38:	1ad2      	subs	r2, r2, r3
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6a1b      	ldr	r3, [r3, #32]
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d217      	bcs.n	800bd72 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	789b      	ldrb	r3, [r3, #2]
 800bd46:	613b      	str	r3, [r7, #16]
 800bd48:	e010      	b.n	800bd6c <sync_window+0x78>
					wsect += fs->fsize;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6a1b      	ldr	r3, [r3, #32]
 800bd4e:	697a      	ldr	r2, [r7, #20]
 800bd50:	4413      	add	r3, r2
 800bd52:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	7858      	ldrb	r0, [r3, #1]
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bd5e:	2301      	movs	r3, #1
 800bd60:	697a      	ldr	r2, [r7, #20]
 800bd62:	f7ff fda9 	bl	800b8b8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	3b01      	subs	r3, #1
 800bd6a:	613b      	str	r3, [r7, #16]
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	2b01      	cmp	r3, #1
 800bd70:	d8eb      	bhi.n	800bd4a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bd72:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3718      	adds	r7, #24
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b084      	sub	sp, #16
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bd86:	2300      	movs	r3, #0
 800bd88:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd8e:	683a      	ldr	r2, [r7, #0]
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d01b      	beq.n	800bdcc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f7ff ffad 	bl	800bcf4 <sync_window>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bd9e:	7bfb      	ldrb	r3, [r7, #15]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d113      	bne.n	800bdcc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	7858      	ldrb	r0, [r3, #1]
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bdae:	2301      	movs	r3, #1
 800bdb0:	683a      	ldr	r2, [r7, #0]
 800bdb2:	f7ff fd61 	bl	800b878 <disk_read>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d004      	beq.n	800bdc6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bdbc:	f04f 33ff 	mov.w	r3, #4294967295
 800bdc0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	683a      	ldr	r2, [r7, #0]
 800bdca:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800bdcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3710      	adds	r7, #16
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}

0800bdd6 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bdd6:	b480      	push	{r7}
 800bdd8:	b083      	sub	sp, #12
 800bdda:	af00      	add	r7, sp, #0
 800bddc:	6078      	str	r0, [r7, #4]
 800bdde:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	3b02      	subs	r3, #2
 800bde4:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	69db      	ldr	r3, [r3, #28]
 800bdea:	3b02      	subs	r3, #2
 800bdec:	683a      	ldr	r2, [r7, #0]
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d301      	bcc.n	800bdf6 <clust2sect+0x20>
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	e008      	b.n	800be08 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	895b      	ldrh	r3, [r3, #10]
 800bdfa:	461a      	mov	r2, r3
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	fb03 f202 	mul.w	r2, r3, r2
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be06:	4413      	add	r3, r2
}
 800be08:	4618      	mov	r0, r3
 800be0a:	370c      	adds	r7, #12
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr

0800be14 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b086      	sub	sp, #24
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	2b01      	cmp	r3, #1
 800be28:	d904      	bls.n	800be34 <get_fat+0x20>
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	69db      	ldr	r3, [r3, #28]
 800be2e:	683a      	ldr	r2, [r7, #0]
 800be30:	429a      	cmp	r2, r3
 800be32:	d302      	bcc.n	800be3a <get_fat+0x26>
		val = 1;	/* Internal error */
 800be34:	2301      	movs	r3, #1
 800be36:	617b      	str	r3, [r7, #20]
 800be38:	e08f      	b.n	800bf5a <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800be3a:	f04f 33ff 	mov.w	r3, #4294967295
 800be3e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	2b03      	cmp	r3, #3
 800be46:	d062      	beq.n	800bf0e <get_fat+0xfa>
 800be48:	2b03      	cmp	r3, #3
 800be4a:	dc7c      	bgt.n	800bf46 <get_fat+0x132>
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d002      	beq.n	800be56 <get_fat+0x42>
 800be50:	2b02      	cmp	r3, #2
 800be52:	d042      	beq.n	800beda <get_fat+0xc6>
 800be54:	e077      	b.n	800bf46 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	60fb      	str	r3, [r7, #12]
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	085b      	lsrs	r3, r3, #1
 800be5e:	68fa      	ldr	r2, [r7, #12]
 800be60:	4413      	add	r3, r2
 800be62:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	0a5b      	lsrs	r3, r3, #9
 800be6c:	4413      	add	r3, r2
 800be6e:	4619      	mov	r1, r3
 800be70:	6938      	ldr	r0, [r7, #16]
 800be72:	f7ff ff83 	bl	800bd7c <move_window>
 800be76:	4603      	mov	r3, r0
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d167      	bne.n	800bf4c <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	1c5a      	adds	r2, r3, #1
 800be80:	60fa      	str	r2, [r7, #12]
 800be82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be86:	693a      	ldr	r2, [r7, #16]
 800be88:	4413      	add	r3, r2
 800be8a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800be8e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	0a5b      	lsrs	r3, r3, #9
 800be98:	4413      	add	r3, r2
 800be9a:	4619      	mov	r1, r3
 800be9c:	6938      	ldr	r0, [r7, #16]
 800be9e:	f7ff ff6d 	bl	800bd7c <move_window>
 800bea2:	4603      	mov	r3, r0
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d153      	bne.n	800bf50 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beae:	693a      	ldr	r2, [r7, #16]
 800beb0:	4413      	add	r3, r2
 800beb2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800beb6:	021b      	lsls	r3, r3, #8
 800beb8:	461a      	mov	r2, r3
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	4313      	orrs	r3, r2
 800bebe:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	f003 0301 	and.w	r3, r3, #1
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d002      	beq.n	800bed0 <get_fat+0xbc>
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	091b      	lsrs	r3, r3, #4
 800bece:	e002      	b.n	800bed6 <get_fat+0xc2>
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bed6:	617b      	str	r3, [r7, #20]
			break;
 800bed8:	e03f      	b.n	800bf5a <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	0a1b      	lsrs	r3, r3, #8
 800bee2:	4413      	add	r3, r2
 800bee4:	4619      	mov	r1, r3
 800bee6:	6938      	ldr	r0, [r7, #16]
 800bee8:	f7ff ff48 	bl	800bd7c <move_window>
 800beec:	4603      	mov	r3, r0
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d130      	bne.n	800bf54 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	005b      	lsls	r3, r3, #1
 800befc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800bf00:	4413      	add	r3, r2
 800bf02:	4618      	mov	r0, r3
 800bf04:	f7ff fcf8 	bl	800b8f8 <ld_word>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	617b      	str	r3, [r7, #20]
			break;
 800bf0c:	e025      	b.n	800bf5a <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	09db      	lsrs	r3, r3, #7
 800bf16:	4413      	add	r3, r2
 800bf18:	4619      	mov	r1, r3
 800bf1a:	6938      	ldr	r0, [r7, #16]
 800bf1c:	f7ff ff2e 	bl	800bd7c <move_window>
 800bf20:	4603      	mov	r3, r0
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d118      	bne.n	800bf58 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	009b      	lsls	r3, r3, #2
 800bf30:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bf34:	4413      	add	r3, r2
 800bf36:	4618      	mov	r0, r3
 800bf38:	f7ff fcf6 	bl	800b928 <ld_dword>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bf42:	617b      	str	r3, [r7, #20]
			break;
 800bf44:	e009      	b.n	800bf5a <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bf46:	2301      	movs	r3, #1
 800bf48:	617b      	str	r3, [r7, #20]
 800bf4a:	e006      	b.n	800bf5a <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bf4c:	bf00      	nop
 800bf4e:	e004      	b.n	800bf5a <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bf50:	bf00      	nop
 800bf52:	e002      	b.n	800bf5a <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bf54:	bf00      	nop
 800bf56:	e000      	b.n	800bf5a <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bf58:	bf00      	nop
		}
	}

	return val;
 800bf5a:	697b      	ldr	r3, [r7, #20]
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3718      	adds	r7, #24
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}

0800bf64 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bf64:	b590      	push	{r4, r7, lr}
 800bf66:	b089      	sub	sp, #36	; 0x24
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	60f8      	str	r0, [r7, #12]
 800bf6c:	60b9      	str	r1, [r7, #8]
 800bf6e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bf70:	2302      	movs	r3, #2
 800bf72:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	2b01      	cmp	r3, #1
 800bf78:	f240 80d2 	bls.w	800c120 <put_fat+0x1bc>
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	69db      	ldr	r3, [r3, #28]
 800bf80:	68ba      	ldr	r2, [r7, #8]
 800bf82:	429a      	cmp	r2, r3
 800bf84:	f080 80cc 	bcs.w	800c120 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	781b      	ldrb	r3, [r3, #0]
 800bf8c:	2b03      	cmp	r3, #3
 800bf8e:	f000 8096 	beq.w	800c0be <put_fat+0x15a>
 800bf92:	2b03      	cmp	r3, #3
 800bf94:	f300 80cd 	bgt.w	800c132 <put_fat+0x1ce>
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	d002      	beq.n	800bfa2 <put_fat+0x3e>
 800bf9c:	2b02      	cmp	r3, #2
 800bf9e:	d06e      	beq.n	800c07e <put_fat+0x11a>
 800bfa0:	e0c7      	b.n	800c132 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	61bb      	str	r3, [r7, #24]
 800bfa6:	69bb      	ldr	r3, [r7, #24]
 800bfa8:	085b      	lsrs	r3, r3, #1
 800bfaa:	69ba      	ldr	r2, [r7, #24]
 800bfac:	4413      	add	r3, r2
 800bfae:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bfb4:	69bb      	ldr	r3, [r7, #24]
 800bfb6:	0a5b      	lsrs	r3, r3, #9
 800bfb8:	4413      	add	r3, r2
 800bfba:	4619      	mov	r1, r3
 800bfbc:	68f8      	ldr	r0, [r7, #12]
 800bfbe:	f7ff fedd 	bl	800bd7c <move_window>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bfc6:	7ffb      	ldrb	r3, [r7, #31]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	f040 80ab 	bne.w	800c124 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800bfd4:	69bb      	ldr	r3, [r7, #24]
 800bfd6:	1c59      	adds	r1, r3, #1
 800bfd8:	61b9      	str	r1, [r7, #24]
 800bfda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfde:	4413      	add	r3, r2
 800bfe0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	f003 0301 	and.w	r3, r3, #1
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d00d      	beq.n	800c008 <put_fat+0xa4>
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	781b      	ldrb	r3, [r3, #0]
 800bff0:	b25b      	sxtb	r3, r3
 800bff2:	f003 030f 	and.w	r3, r3, #15
 800bff6:	b25a      	sxtb	r2, r3
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	b2db      	uxtb	r3, r3
 800bffc:	011b      	lsls	r3, r3, #4
 800bffe:	b25b      	sxtb	r3, r3
 800c000:	4313      	orrs	r3, r2
 800c002:	b25b      	sxtb	r3, r3
 800c004:	b2db      	uxtb	r3, r3
 800c006:	e001      	b.n	800c00c <put_fat+0xa8>
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	b2db      	uxtb	r3, r3
 800c00c:	697a      	ldr	r2, [r7, #20]
 800c00e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	2201      	movs	r2, #1
 800c014:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c01a:	69bb      	ldr	r3, [r7, #24]
 800c01c:	0a5b      	lsrs	r3, r3, #9
 800c01e:	4413      	add	r3, r2
 800c020:	4619      	mov	r1, r3
 800c022:	68f8      	ldr	r0, [r7, #12]
 800c024:	f7ff feaa 	bl	800bd7c <move_window>
 800c028:	4603      	mov	r3, r0
 800c02a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c02c:	7ffb      	ldrb	r3, [r7, #31]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d17a      	bne.n	800c128 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c038:	69bb      	ldr	r3, [r7, #24]
 800c03a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c03e:	4413      	add	r3, r2
 800c040:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	f003 0301 	and.w	r3, r3, #1
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d003      	beq.n	800c054 <put_fat+0xf0>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	091b      	lsrs	r3, r3, #4
 800c050:	b2db      	uxtb	r3, r3
 800c052:	e00e      	b.n	800c072 <put_fat+0x10e>
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	781b      	ldrb	r3, [r3, #0]
 800c058:	b25b      	sxtb	r3, r3
 800c05a:	f023 030f 	bic.w	r3, r3, #15
 800c05e:	b25a      	sxtb	r2, r3
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	0a1b      	lsrs	r3, r3, #8
 800c064:	b25b      	sxtb	r3, r3
 800c066:	f003 030f 	and.w	r3, r3, #15
 800c06a:	b25b      	sxtb	r3, r3
 800c06c:	4313      	orrs	r3, r2
 800c06e:	b25b      	sxtb	r3, r3
 800c070:	b2db      	uxtb	r3, r3
 800c072:	697a      	ldr	r2, [r7, #20]
 800c074:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	2201      	movs	r2, #1
 800c07a:	70da      	strb	r2, [r3, #3]
			break;
 800c07c:	e059      	b.n	800c132 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	0a1b      	lsrs	r3, r3, #8
 800c086:	4413      	add	r3, r2
 800c088:	4619      	mov	r1, r3
 800c08a:	68f8      	ldr	r0, [r7, #12]
 800c08c:	f7ff fe76 	bl	800bd7c <move_window>
 800c090:	4603      	mov	r3, r0
 800c092:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c094:	7ffb      	ldrb	r3, [r7, #31]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d148      	bne.n	800c12c <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	005b      	lsls	r3, r3, #1
 800c0a4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c0a8:	4413      	add	r3, r2
 800c0aa:	687a      	ldr	r2, [r7, #4]
 800c0ac:	b292      	uxth	r2, r2
 800c0ae:	4611      	mov	r1, r2
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f7ff fc5c 	bl	800b96e <st_word>
			fs->wflag = 1;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	70da      	strb	r2, [r3, #3]
			break;
 800c0bc:	e039      	b.n	800c132 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	09db      	lsrs	r3, r3, #7
 800c0c6:	4413      	add	r3, r2
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	68f8      	ldr	r0, [r7, #12]
 800c0cc:	f7ff fe56 	bl	800bd7c <move_window>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c0d4:	7ffb      	ldrb	r3, [r7, #31]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d12a      	bne.n	800c130 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	009b      	lsls	r3, r3, #2
 800c0ea:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c0ee:	4413      	add	r3, r2
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f7ff fc19 	bl	800b928 <ld_dword>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c0fc:	4323      	orrs	r3, r4
 800c0fe:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	009b      	lsls	r3, r3, #2
 800c10a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c10e:	4413      	add	r3, r2
 800c110:	6879      	ldr	r1, [r7, #4]
 800c112:	4618      	mov	r0, r3
 800c114:	f7ff fc46 	bl	800b9a4 <st_dword>
			fs->wflag = 1;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	2201      	movs	r2, #1
 800c11c:	70da      	strb	r2, [r3, #3]
			break;
 800c11e:	e008      	b.n	800c132 <put_fat+0x1ce>
		}
	}
 800c120:	bf00      	nop
 800c122:	e006      	b.n	800c132 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c124:	bf00      	nop
 800c126:	e004      	b.n	800c132 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c128:	bf00      	nop
 800c12a:	e002      	b.n	800c132 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c12c:	bf00      	nop
 800c12e:	e000      	b.n	800c132 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c130:	bf00      	nop
	return res;
 800c132:	7ffb      	ldrb	r3, [r7, #31]
}
 800c134:	4618      	mov	r0, r3
 800c136:	3724      	adds	r7, #36	; 0x24
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd90      	pop	{r4, r7, pc}

0800c13c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b088      	sub	sp, #32
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d10d      	bne.n	800c16e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c152:	693b      	ldr	r3, [r7, #16]
 800c154:	695b      	ldr	r3, [r3, #20]
 800c156:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c158:	69bb      	ldr	r3, [r7, #24]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d004      	beq.n	800c168 <create_chain+0x2c>
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	69db      	ldr	r3, [r3, #28]
 800c162:	69ba      	ldr	r2, [r7, #24]
 800c164:	429a      	cmp	r2, r3
 800c166:	d31b      	bcc.n	800c1a0 <create_chain+0x64>
 800c168:	2301      	movs	r3, #1
 800c16a:	61bb      	str	r3, [r7, #24]
 800c16c:	e018      	b.n	800c1a0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c16e:	6839      	ldr	r1, [r7, #0]
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f7ff fe4f 	bl	800be14 <get_fat>
 800c176:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2b01      	cmp	r3, #1
 800c17c:	d801      	bhi.n	800c182 <create_chain+0x46>
 800c17e:	2301      	movs	r3, #1
 800c180:	e070      	b.n	800c264 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c188:	d101      	bne.n	800c18e <create_chain+0x52>
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	e06a      	b.n	800c264 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	69db      	ldr	r3, [r3, #28]
 800c192:	68fa      	ldr	r2, [r7, #12]
 800c194:	429a      	cmp	r2, r3
 800c196:	d201      	bcs.n	800c19c <create_chain+0x60>
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	e063      	b.n	800c264 <create_chain+0x128>
		scl = clst;
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c1a0:	69bb      	ldr	r3, [r7, #24]
 800c1a2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c1a4:	69fb      	ldr	r3, [r7, #28]
 800c1a6:	3301      	adds	r3, #1
 800c1a8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	69db      	ldr	r3, [r3, #28]
 800c1ae:	69fa      	ldr	r2, [r7, #28]
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d307      	bcc.n	800c1c4 <create_chain+0x88>
				ncl = 2;
 800c1b4:	2302      	movs	r3, #2
 800c1b6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c1b8:	69fa      	ldr	r2, [r7, #28]
 800c1ba:	69bb      	ldr	r3, [r7, #24]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d901      	bls.n	800c1c4 <create_chain+0x88>
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	e04f      	b.n	800c264 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c1c4:	69f9      	ldr	r1, [r7, #28]
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f7ff fe24 	bl	800be14 <get_fat>
 800c1cc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d00e      	beq.n	800c1f2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2b01      	cmp	r3, #1
 800c1d8:	d003      	beq.n	800c1e2 <create_chain+0xa6>
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1e0:	d101      	bne.n	800c1e6 <create_chain+0xaa>
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	e03e      	b.n	800c264 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c1e6:	69fa      	ldr	r2, [r7, #28]
 800c1e8:	69bb      	ldr	r3, [r7, #24]
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d1da      	bne.n	800c1a4 <create_chain+0x68>
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	e038      	b.n	800c264 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c1f2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c1f4:	f04f 32ff 	mov.w	r2, #4294967295
 800c1f8:	69f9      	ldr	r1, [r7, #28]
 800c1fa:	6938      	ldr	r0, [r7, #16]
 800c1fc:	f7ff feb2 	bl	800bf64 <put_fat>
 800c200:	4603      	mov	r3, r0
 800c202:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c204:	7dfb      	ldrb	r3, [r7, #23]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d109      	bne.n	800c21e <create_chain+0xe2>
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d006      	beq.n	800c21e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c210:	69fa      	ldr	r2, [r7, #28]
 800c212:	6839      	ldr	r1, [r7, #0]
 800c214:	6938      	ldr	r0, [r7, #16]
 800c216:	f7ff fea5 	bl	800bf64 <put_fat>
 800c21a:	4603      	mov	r3, r0
 800c21c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c21e:	7dfb      	ldrb	r3, [r7, #23]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d116      	bne.n	800c252 <create_chain+0x116>
		fs->last_clst = ncl;
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	69fa      	ldr	r2, [r7, #28]
 800c228:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c22a:	693b      	ldr	r3, [r7, #16]
 800c22c:	699a      	ldr	r2, [r3, #24]
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	69db      	ldr	r3, [r3, #28]
 800c232:	3b02      	subs	r3, #2
 800c234:	429a      	cmp	r2, r3
 800c236:	d804      	bhi.n	800c242 <create_chain+0x106>
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	699b      	ldr	r3, [r3, #24]
 800c23c:	1e5a      	subs	r2, r3, #1
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	791b      	ldrb	r3, [r3, #4]
 800c246:	f043 0301 	orr.w	r3, r3, #1
 800c24a:	b2da      	uxtb	r2, r3
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	711a      	strb	r2, [r3, #4]
 800c250:	e007      	b.n	800c262 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c252:	7dfb      	ldrb	r3, [r7, #23]
 800c254:	2b01      	cmp	r3, #1
 800c256:	d102      	bne.n	800c25e <create_chain+0x122>
 800c258:	f04f 33ff 	mov.w	r3, #4294967295
 800c25c:	e000      	b.n	800c260 <create_chain+0x124>
 800c25e:	2301      	movs	r3, #1
 800c260:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c262:	69fb      	ldr	r3, [r7, #28]
}
 800c264:	4618      	mov	r0, r3
 800c266:	3720      	adds	r7, #32
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}

0800c26c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b086      	sub	sp, #24
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c282:	d204      	bcs.n	800c28e <dir_sdi+0x22>
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	f003 031f 	and.w	r3, r3, #31
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d001      	beq.n	800c292 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c28e:	2302      	movs	r3, #2
 800c290:	e063      	b.n	800c35a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	683a      	ldr	r2, [r7, #0]
 800c296:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	689b      	ldr	r3, [r3, #8]
 800c29c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d106      	bne.n	800c2b2 <dir_sdi+0x46>
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	2b02      	cmp	r3, #2
 800c2aa:	d902      	bls.n	800c2b2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2b0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d10c      	bne.n	800c2d2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	095b      	lsrs	r3, r3, #5
 800c2bc:	693a      	ldr	r2, [r7, #16]
 800c2be:	8912      	ldrh	r2, [r2, #8]
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d301      	bcc.n	800c2c8 <dir_sdi+0x5c>
 800c2c4:	2302      	movs	r3, #2
 800c2c6:	e048      	b.n	800c35a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	61da      	str	r2, [r3, #28]
 800c2d0:	e029      	b.n	800c326 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	895b      	ldrh	r3, [r3, #10]
 800c2d6:	025b      	lsls	r3, r3, #9
 800c2d8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c2da:	e019      	b.n	800c310 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	6979      	ldr	r1, [r7, #20]
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f7ff fd97 	bl	800be14 <get_fat>
 800c2e6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ee:	d101      	bne.n	800c2f4 <dir_sdi+0x88>
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	e032      	b.n	800c35a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c2f4:	697b      	ldr	r3, [r7, #20]
 800c2f6:	2b01      	cmp	r3, #1
 800c2f8:	d904      	bls.n	800c304 <dir_sdi+0x98>
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	69db      	ldr	r3, [r3, #28]
 800c2fe:	697a      	ldr	r2, [r7, #20]
 800c300:	429a      	cmp	r2, r3
 800c302:	d301      	bcc.n	800c308 <dir_sdi+0x9c>
 800c304:	2302      	movs	r3, #2
 800c306:	e028      	b.n	800c35a <dir_sdi+0xee>
			ofs -= csz;
 800c308:	683a      	ldr	r2, [r7, #0]
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	1ad3      	subs	r3, r2, r3
 800c30e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c310:	683a      	ldr	r2, [r7, #0]
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	429a      	cmp	r2, r3
 800c316:	d2e1      	bcs.n	800c2dc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c318:	6979      	ldr	r1, [r7, #20]
 800c31a:	6938      	ldr	r0, [r7, #16]
 800c31c:	f7ff fd5b 	bl	800bdd6 <clust2sect>
 800c320:	4602      	mov	r2, r0
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	697a      	ldr	r2, [r7, #20]
 800c32a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	69db      	ldr	r3, [r3, #28]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d101      	bne.n	800c338 <dir_sdi+0xcc>
 800c334:	2302      	movs	r3, #2
 800c336:	e010      	b.n	800c35a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	69da      	ldr	r2, [r3, #28]
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	0a5b      	lsrs	r3, r3, #9
 800c340:	441a      	add	r2, r3
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c352:	441a      	add	r2, r3
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c358:	2300      	movs	r3, #0
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3718      	adds	r7, #24
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}

0800c362 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c362:	b580      	push	{r7, lr}
 800c364:	b086      	sub	sp, #24
 800c366:	af00      	add	r7, sp, #0
 800c368:	6078      	str	r0, [r7, #4]
 800c36a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	695b      	ldr	r3, [r3, #20]
 800c376:	3320      	adds	r3, #32
 800c378:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	69db      	ldr	r3, [r3, #28]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d003      	beq.n	800c38a <dir_next+0x28>
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c388:	d301      	bcc.n	800c38e <dir_next+0x2c>
 800c38a:	2304      	movs	r3, #4
 800c38c:	e0aa      	b.n	800c4e4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c394:	2b00      	cmp	r3, #0
 800c396:	f040 8098 	bne.w	800c4ca <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	69db      	ldr	r3, [r3, #28]
 800c39e:	1c5a      	adds	r2, r3, #1
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	699b      	ldr	r3, [r3, #24]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d10b      	bne.n	800c3c4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	095b      	lsrs	r3, r3, #5
 800c3b0:	68fa      	ldr	r2, [r7, #12]
 800c3b2:	8912      	ldrh	r2, [r2, #8]
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	f0c0 8088 	bcc.w	800c4ca <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	61da      	str	r2, [r3, #28]
 800c3c0:	2304      	movs	r3, #4
 800c3c2:	e08f      	b.n	800c4e4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	0a5b      	lsrs	r3, r3, #9
 800c3c8:	68fa      	ldr	r2, [r7, #12]
 800c3ca:	8952      	ldrh	r2, [r2, #10]
 800c3cc:	3a01      	subs	r2, #1
 800c3ce:	4013      	ands	r3, r2
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d17a      	bne.n	800c4ca <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c3d4:	687a      	ldr	r2, [r7, #4]
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	699b      	ldr	r3, [r3, #24]
 800c3da:	4619      	mov	r1, r3
 800c3dc:	4610      	mov	r0, r2
 800c3de:	f7ff fd19 	bl	800be14 <get_fat>
 800c3e2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	2b01      	cmp	r3, #1
 800c3e8:	d801      	bhi.n	800c3ee <dir_next+0x8c>
 800c3ea:	2302      	movs	r3, #2
 800c3ec:	e07a      	b.n	800c4e4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3f4:	d101      	bne.n	800c3fa <dir_next+0x98>
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	e074      	b.n	800c4e4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	69db      	ldr	r3, [r3, #28]
 800c3fe:	697a      	ldr	r2, [r7, #20]
 800c400:	429a      	cmp	r2, r3
 800c402:	d358      	bcc.n	800c4b6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d104      	bne.n	800c414 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2200      	movs	r2, #0
 800c40e:	61da      	str	r2, [r3, #28]
 800c410:	2304      	movs	r3, #4
 800c412:	e067      	b.n	800c4e4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c414:	687a      	ldr	r2, [r7, #4]
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	699b      	ldr	r3, [r3, #24]
 800c41a:	4619      	mov	r1, r3
 800c41c:	4610      	mov	r0, r2
 800c41e:	f7ff fe8d 	bl	800c13c <create_chain>
 800c422:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c424:	697b      	ldr	r3, [r7, #20]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d101      	bne.n	800c42e <dir_next+0xcc>
 800c42a:	2307      	movs	r3, #7
 800c42c:	e05a      	b.n	800c4e4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	2b01      	cmp	r3, #1
 800c432:	d101      	bne.n	800c438 <dir_next+0xd6>
 800c434:	2302      	movs	r3, #2
 800c436:	e055      	b.n	800c4e4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c43e:	d101      	bne.n	800c444 <dir_next+0xe2>
 800c440:	2301      	movs	r3, #1
 800c442:	e04f      	b.n	800c4e4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c444:	68f8      	ldr	r0, [r7, #12]
 800c446:	f7ff fc55 	bl	800bcf4 <sync_window>
 800c44a:	4603      	mov	r3, r0
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d001      	beq.n	800c454 <dir_next+0xf2>
 800c450:	2301      	movs	r3, #1
 800c452:	e047      	b.n	800c4e4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	3338      	adds	r3, #56	; 0x38
 800c458:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c45c:	2100      	movs	r1, #0
 800c45e:	4618      	mov	r0, r3
 800c460:	f7ff facc 	bl	800b9fc <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c464:	2300      	movs	r3, #0
 800c466:	613b      	str	r3, [r7, #16]
 800c468:	6979      	ldr	r1, [r7, #20]
 800c46a:	68f8      	ldr	r0, [r7, #12]
 800c46c:	f7ff fcb3 	bl	800bdd6 <clust2sect>
 800c470:	4602      	mov	r2, r0
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	635a      	str	r2, [r3, #52]	; 0x34
 800c476:	e012      	b.n	800c49e <dir_next+0x13c>
						fs->wflag = 1;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	2201      	movs	r2, #1
 800c47c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c47e:	68f8      	ldr	r0, [r7, #12]
 800c480:	f7ff fc38 	bl	800bcf4 <sync_window>
 800c484:	4603      	mov	r3, r0
 800c486:	2b00      	cmp	r3, #0
 800c488:	d001      	beq.n	800c48e <dir_next+0x12c>
 800c48a:	2301      	movs	r3, #1
 800c48c:	e02a      	b.n	800c4e4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	3301      	adds	r3, #1
 800c492:	613b      	str	r3, [r7, #16]
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c498:	1c5a      	adds	r2, r3, #1
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	635a      	str	r2, [r3, #52]	; 0x34
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	895b      	ldrh	r3, [r3, #10]
 800c4a2:	461a      	mov	r2, r3
 800c4a4:	693b      	ldr	r3, [r7, #16]
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d3e6      	bcc.n	800c478 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	1ad2      	subs	r2, r2, r3
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	697a      	ldr	r2, [r7, #20]
 800c4ba:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c4bc:	6979      	ldr	r1, [r7, #20]
 800c4be:	68f8      	ldr	r0, [r7, #12]
 800c4c0:	f7ff fc89 	bl	800bdd6 <clust2sect>
 800c4c4:	4602      	mov	r2, r0
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	68ba      	ldr	r2, [r7, #8]
 800c4ce:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4dc:	441a      	add	r2, r3
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c4e2:	2300      	movs	r3, #0
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3718      	adds	r7, #24
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}

0800c4ec <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b084      	sub	sp, #16
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	331a      	adds	r3, #26
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f7ff f9fc 	bl	800b8f8 <ld_word>
 800c500:	4603      	mov	r3, r0
 800c502:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	781b      	ldrb	r3, [r3, #0]
 800c508:	2b03      	cmp	r3, #3
 800c50a:	d109      	bne.n	800c520 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	3314      	adds	r3, #20
 800c510:	4618      	mov	r0, r3
 800c512:	f7ff f9f1 	bl	800b8f8 <ld_word>
 800c516:	4603      	mov	r3, r0
 800c518:	041b      	lsls	r3, r3, #16
 800c51a:	68fa      	ldr	r2, [r7, #12]
 800c51c:	4313      	orrs	r3, r2
 800c51e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c520:	68fb      	ldr	r3, [r7, #12]
}
 800c522:	4618      	mov	r0, r3
 800c524:	3710      	adds	r7, #16
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
	...

0800c52c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c52c:	b590      	push	{r4, r7, lr}
 800c52e:	b087      	sub	sp, #28
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	331a      	adds	r3, #26
 800c53a:	4618      	mov	r0, r3
 800c53c:	f7ff f9dc 	bl	800b8f8 <ld_word>
 800c540:	4603      	mov	r3, r0
 800c542:	2b00      	cmp	r3, #0
 800c544:	d001      	beq.n	800c54a <cmp_lfn+0x1e>
 800c546:	2300      	movs	r3, #0
 800c548:	e059      	b.n	800c5fe <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	781b      	ldrb	r3, [r3, #0]
 800c54e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c552:	1e5a      	subs	r2, r3, #1
 800c554:	4613      	mov	r3, r2
 800c556:	005b      	lsls	r3, r3, #1
 800c558:	4413      	add	r3, r2
 800c55a:	009b      	lsls	r3, r3, #2
 800c55c:	4413      	add	r3, r2
 800c55e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c560:	2301      	movs	r3, #1
 800c562:	81fb      	strh	r3, [r7, #14]
 800c564:	2300      	movs	r3, #0
 800c566:	613b      	str	r3, [r7, #16]
 800c568:	e033      	b.n	800c5d2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c56a:	4a27      	ldr	r2, [pc, #156]	; (800c608 <cmp_lfn+0xdc>)
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	4413      	add	r3, r2
 800c570:	781b      	ldrb	r3, [r3, #0]
 800c572:	461a      	mov	r2, r3
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	4413      	add	r3, r2
 800c578:	4618      	mov	r0, r3
 800c57a:	f7ff f9bd 	bl	800b8f8 <ld_word>
 800c57e:	4603      	mov	r3, r0
 800c580:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c582:	89fb      	ldrh	r3, [r7, #14]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d01a      	beq.n	800c5be <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	2bfe      	cmp	r3, #254	; 0xfe
 800c58c:	d812      	bhi.n	800c5b4 <cmp_lfn+0x88>
 800c58e:	89bb      	ldrh	r3, [r7, #12]
 800c590:	4618      	mov	r0, r3
 800c592:	f001 fad5 	bl	800db40 <ff_wtoupper>
 800c596:	4603      	mov	r3, r0
 800c598:	461c      	mov	r4, r3
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	1c5a      	adds	r2, r3, #1
 800c59e:	617a      	str	r2, [r7, #20]
 800c5a0:	005b      	lsls	r3, r3, #1
 800c5a2:	687a      	ldr	r2, [r7, #4]
 800c5a4:	4413      	add	r3, r2
 800c5a6:	881b      	ldrh	r3, [r3, #0]
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f001 fac9 	bl	800db40 <ff_wtoupper>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	429c      	cmp	r4, r3
 800c5b2:	d001      	beq.n	800c5b8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	e022      	b.n	800c5fe <cmp_lfn+0xd2>
			}
			wc = uc;
 800c5b8:	89bb      	ldrh	r3, [r7, #12]
 800c5ba:	81fb      	strh	r3, [r7, #14]
 800c5bc:	e006      	b.n	800c5cc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c5be:	89bb      	ldrh	r3, [r7, #12]
 800c5c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d001      	beq.n	800c5cc <cmp_lfn+0xa0>
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	e018      	b.n	800c5fe <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	3301      	adds	r3, #1
 800c5d0:	613b      	str	r3, [r7, #16]
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	2b0c      	cmp	r3, #12
 800c5d6:	d9c8      	bls.n	800c56a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	781b      	ldrb	r3, [r3, #0]
 800c5dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d00b      	beq.n	800c5fc <cmp_lfn+0xd0>
 800c5e4:	89fb      	ldrh	r3, [r7, #14]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d008      	beq.n	800c5fc <cmp_lfn+0xd0>
 800c5ea:	697b      	ldr	r3, [r7, #20]
 800c5ec:	005b      	lsls	r3, r3, #1
 800c5ee:	687a      	ldr	r2, [r7, #4]
 800c5f0:	4413      	add	r3, r2
 800c5f2:	881b      	ldrh	r3, [r3, #0]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d001      	beq.n	800c5fc <cmp_lfn+0xd0>
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	e000      	b.n	800c5fe <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c5fc:	2301      	movs	r3, #1
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	371c      	adds	r7, #28
 800c602:	46bd      	mov	sp, r7
 800c604:	bd90      	pop	{r4, r7, pc}
 800c606:	bf00      	nop
 800c608:	08013ad8 	.word	0x08013ad8

0800c60c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b086      	sub	sp, #24
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	331a      	adds	r3, #26
 800c61a:	4618      	mov	r0, r3
 800c61c:	f7ff f96c 	bl	800b8f8 <ld_word>
 800c620:	4603      	mov	r3, r0
 800c622:	2b00      	cmp	r3, #0
 800c624:	d001      	beq.n	800c62a <pick_lfn+0x1e>
 800c626:	2300      	movs	r3, #0
 800c628:	e04d      	b.n	800c6c6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	781b      	ldrb	r3, [r3, #0]
 800c62e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c632:	1e5a      	subs	r2, r3, #1
 800c634:	4613      	mov	r3, r2
 800c636:	005b      	lsls	r3, r3, #1
 800c638:	4413      	add	r3, r2
 800c63a:	009b      	lsls	r3, r3, #2
 800c63c:	4413      	add	r3, r2
 800c63e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c640:	2301      	movs	r3, #1
 800c642:	81fb      	strh	r3, [r7, #14]
 800c644:	2300      	movs	r3, #0
 800c646:	613b      	str	r3, [r7, #16]
 800c648:	e028      	b.n	800c69c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c64a:	4a21      	ldr	r2, [pc, #132]	; (800c6d0 <pick_lfn+0xc4>)
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	4413      	add	r3, r2
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	461a      	mov	r2, r3
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	4413      	add	r3, r2
 800c658:	4618      	mov	r0, r3
 800c65a:	f7ff f94d 	bl	800b8f8 <ld_word>
 800c65e:	4603      	mov	r3, r0
 800c660:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c662:	89fb      	ldrh	r3, [r7, #14]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d00f      	beq.n	800c688 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	2bfe      	cmp	r3, #254	; 0xfe
 800c66c:	d901      	bls.n	800c672 <pick_lfn+0x66>
 800c66e:	2300      	movs	r3, #0
 800c670:	e029      	b.n	800c6c6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800c672:	89bb      	ldrh	r3, [r7, #12]
 800c674:	81fb      	strh	r3, [r7, #14]
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	1c5a      	adds	r2, r3, #1
 800c67a:	617a      	str	r2, [r7, #20]
 800c67c:	005b      	lsls	r3, r3, #1
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	4413      	add	r3, r2
 800c682:	89fa      	ldrh	r2, [r7, #14]
 800c684:	801a      	strh	r2, [r3, #0]
 800c686:	e006      	b.n	800c696 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c688:	89bb      	ldrh	r3, [r7, #12]
 800c68a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c68e:	4293      	cmp	r3, r2
 800c690:	d001      	beq.n	800c696 <pick_lfn+0x8a>
 800c692:	2300      	movs	r3, #0
 800c694:	e017      	b.n	800c6c6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	3301      	adds	r3, #1
 800c69a:	613b      	str	r3, [r7, #16]
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	2b0c      	cmp	r3, #12
 800c6a0:	d9d3      	bls.n	800c64a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	781b      	ldrb	r3, [r3, #0]
 800c6a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d00a      	beq.n	800c6c4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	2bfe      	cmp	r3, #254	; 0xfe
 800c6b2:	d901      	bls.n	800c6b8 <pick_lfn+0xac>
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	e006      	b.n	800c6c6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	005b      	lsls	r3, r3, #1
 800c6bc:	687a      	ldr	r2, [r7, #4]
 800c6be:	4413      	add	r3, r2
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800c6c4:	2301      	movs	r3, #1
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3718      	adds	r7, #24
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
 800c6ce:	bf00      	nop
 800c6d0:	08013ad8 	.word	0x08013ad8

0800c6d4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b085      	sub	sp, #20
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c6e0:	230b      	movs	r3, #11
 800c6e2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c6e4:	7bfb      	ldrb	r3, [r7, #15]
 800c6e6:	b2da      	uxtb	r2, r3
 800c6e8:	0852      	lsrs	r2, r2, #1
 800c6ea:	01db      	lsls	r3, r3, #7
 800c6ec:	4313      	orrs	r3, r2
 800c6ee:	b2da      	uxtb	r2, r3
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	1c59      	adds	r1, r3, #1
 800c6f4:	6079      	str	r1, [r7, #4]
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	4413      	add	r3, r2
 800c6fa:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	3b01      	subs	r3, #1
 800c700:	60bb      	str	r3, [r7, #8]
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d1ed      	bne.n	800c6e4 <sum_sfn+0x10>
	return sum;
 800c708:	7bfb      	ldrb	r3, [r7, #15]
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3714      	adds	r7, #20
 800c70e:	46bd      	mov	sp, r7
 800c710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c714:	4770      	bx	lr

0800c716 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800c716:	b580      	push	{r7, lr}
 800c718:	b086      	sub	sp, #24
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	6078      	str	r0, [r7, #4]
 800c71e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800c720:	2304      	movs	r3, #4
 800c722:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800c72a:	23ff      	movs	r3, #255	; 0xff
 800c72c:	757b      	strb	r3, [r7, #21]
 800c72e:	23ff      	movs	r3, #255	; 0xff
 800c730:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800c732:	e081      	b.n	800c838 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	69db      	ldr	r3, [r3, #28]
 800c738:	4619      	mov	r1, r3
 800c73a:	6938      	ldr	r0, [r7, #16]
 800c73c:	f7ff fb1e 	bl	800bd7c <move_window>
 800c740:	4603      	mov	r3, r0
 800c742:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c744:	7dfb      	ldrb	r3, [r7, #23]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d17c      	bne.n	800c844 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6a1b      	ldr	r3, [r3, #32]
 800c74e:	781b      	ldrb	r3, [r3, #0]
 800c750:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800c752:	7dbb      	ldrb	r3, [r7, #22]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d102      	bne.n	800c75e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800c758:	2304      	movs	r3, #4
 800c75a:	75fb      	strb	r3, [r7, #23]
 800c75c:	e077      	b.n	800c84e <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6a1b      	ldr	r3, [r3, #32]
 800c762:	330b      	adds	r3, #11
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c76a:	73fb      	strb	r3, [r7, #15]
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	7bfa      	ldrb	r2, [r7, #15]
 800c770:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800c772:	7dbb      	ldrb	r3, [r7, #22]
 800c774:	2be5      	cmp	r3, #229	; 0xe5
 800c776:	d00e      	beq.n	800c796 <dir_read+0x80>
 800c778:	7dbb      	ldrb	r3, [r7, #22]
 800c77a:	2b2e      	cmp	r3, #46	; 0x2e
 800c77c:	d00b      	beq.n	800c796 <dir_read+0x80>
 800c77e:	7bfb      	ldrb	r3, [r7, #15]
 800c780:	f023 0320 	bic.w	r3, r3, #32
 800c784:	2b08      	cmp	r3, #8
 800c786:	bf0c      	ite	eq
 800c788:	2301      	moveq	r3, #1
 800c78a:	2300      	movne	r3, #0
 800c78c:	b2db      	uxtb	r3, r3
 800c78e:	461a      	mov	r2, r3
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	4293      	cmp	r3, r2
 800c794:	d002      	beq.n	800c79c <dir_read+0x86>
				ord = 0xFF;
 800c796:	23ff      	movs	r3, #255	; 0xff
 800c798:	757b      	strb	r3, [r7, #21]
 800c79a:	e044      	b.n	800c826 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800c79c:	7bfb      	ldrb	r3, [r7, #15]
 800c79e:	2b0f      	cmp	r3, #15
 800c7a0:	d12f      	bne.n	800c802 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800c7a2:	7dbb      	ldrb	r3, [r7, #22]
 800c7a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d00d      	beq.n	800c7c8 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6a1b      	ldr	r3, [r3, #32]
 800c7b0:	7b5b      	ldrb	r3, [r3, #13]
 800c7b2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800c7b4:	7dbb      	ldrb	r3, [r7, #22]
 800c7b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7ba:	75bb      	strb	r3, [r7, #22]
 800c7bc:	7dbb      	ldrb	r3, [r7, #22]
 800c7be:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	695a      	ldr	r2, [r3, #20]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c7c8:	7dba      	ldrb	r2, [r7, #22]
 800c7ca:	7d7b      	ldrb	r3, [r7, #21]
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d115      	bne.n	800c7fc <dir_read+0xe6>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	6a1b      	ldr	r3, [r3, #32]
 800c7d4:	330d      	adds	r3, #13
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	7d3a      	ldrb	r2, [r7, #20]
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	d10e      	bne.n	800c7fc <dir_read+0xe6>
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	68da      	ldr	r2, [r3, #12]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6a1b      	ldr	r3, [r3, #32]
 800c7e6:	4619      	mov	r1, r3
 800c7e8:	4610      	mov	r0, r2
 800c7ea:	f7ff ff0f 	bl	800c60c <pick_lfn>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d003      	beq.n	800c7fc <dir_read+0xe6>
 800c7f4:	7d7b      	ldrb	r3, [r7, #21]
 800c7f6:	3b01      	subs	r3, #1
 800c7f8:	b2db      	uxtb	r3, r3
 800c7fa:	e000      	b.n	800c7fe <dir_read+0xe8>
 800c7fc:	23ff      	movs	r3, #255	; 0xff
 800c7fe:	757b      	strb	r3, [r7, #21]
 800c800:	e011      	b.n	800c826 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800c802:	7d7b      	ldrb	r3, [r7, #21]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d109      	bne.n	800c81c <dir_read+0x106>
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6a1b      	ldr	r3, [r3, #32]
 800c80c:	4618      	mov	r0, r3
 800c80e:	f7ff ff61 	bl	800c6d4 <sum_sfn>
 800c812:	4603      	mov	r3, r0
 800c814:	461a      	mov	r2, r3
 800c816:	7d3b      	ldrb	r3, [r7, #20]
 800c818:	4293      	cmp	r3, r2
 800c81a:	d015      	beq.n	800c848 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f04f 32ff 	mov.w	r2, #4294967295
 800c822:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800c824:	e010      	b.n	800c848 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800c826:	2100      	movs	r1, #0
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f7ff fd9a 	bl	800c362 <dir_next>
 800c82e:	4603      	mov	r3, r0
 800c830:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c832:	7dfb      	ldrb	r3, [r7, #23]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d109      	bne.n	800c84c <dir_read+0x136>
	while (dp->sect) {
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	69db      	ldr	r3, [r3, #28]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	f47f af79 	bne.w	800c734 <dir_read+0x1e>
 800c842:	e004      	b.n	800c84e <dir_read+0x138>
		if (res != FR_OK) break;
 800c844:	bf00      	nop
 800c846:	e002      	b.n	800c84e <dir_read+0x138>
					break;
 800c848:	bf00      	nop
 800c84a:	e000      	b.n	800c84e <dir_read+0x138>
		if (res != FR_OK) break;
 800c84c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800c84e:	7dfb      	ldrb	r3, [r7, #23]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d002      	beq.n	800c85a <dir_read+0x144>
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2200      	movs	r2, #0
 800c858:	61da      	str	r2, [r3, #28]
	return res;
 800c85a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	3718      	adds	r7, #24
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}

0800c864 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b086      	sub	sp, #24
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c872:	2100      	movs	r1, #0
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f7ff fcf9 	bl	800c26c <dir_sdi>
 800c87a:	4603      	mov	r3, r0
 800c87c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c87e:	7dfb      	ldrb	r3, [r7, #23]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d001      	beq.n	800c888 <dir_find+0x24>
 800c884:	7dfb      	ldrb	r3, [r7, #23]
 800c886:	e0a9      	b.n	800c9dc <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c888:	23ff      	movs	r3, #255	; 0xff
 800c88a:	753b      	strb	r3, [r7, #20]
 800c88c:	7d3b      	ldrb	r3, [r7, #20]
 800c88e:	757b      	strb	r3, [r7, #21]
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f04f 32ff 	mov.w	r2, #4294967295
 800c896:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	69db      	ldr	r3, [r3, #28]
 800c89c:	4619      	mov	r1, r3
 800c89e:	6938      	ldr	r0, [r7, #16]
 800c8a0:	f7ff fa6c 	bl	800bd7c <move_window>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c8a8:	7dfb      	ldrb	r3, [r7, #23]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	f040 8090 	bne.w	800c9d0 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6a1b      	ldr	r3, [r3, #32]
 800c8b4:	781b      	ldrb	r3, [r3, #0]
 800c8b6:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c8b8:	7dbb      	ldrb	r3, [r7, #22]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d102      	bne.n	800c8c4 <dir_find+0x60>
 800c8be:	2304      	movs	r3, #4
 800c8c0:	75fb      	strb	r3, [r7, #23]
 800c8c2:	e08a      	b.n	800c9da <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6a1b      	ldr	r3, [r3, #32]
 800c8c8:	330b      	adds	r3, #11
 800c8ca:	781b      	ldrb	r3, [r3, #0]
 800c8cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8d0:	73fb      	strb	r3, [r7, #15]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	7bfa      	ldrb	r2, [r7, #15]
 800c8d6:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c8d8:	7dbb      	ldrb	r3, [r7, #22]
 800c8da:	2be5      	cmp	r3, #229	; 0xe5
 800c8dc:	d007      	beq.n	800c8ee <dir_find+0x8a>
 800c8de:	7bfb      	ldrb	r3, [r7, #15]
 800c8e0:	f003 0308 	and.w	r3, r3, #8
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d009      	beq.n	800c8fc <dir_find+0x98>
 800c8e8:	7bfb      	ldrb	r3, [r7, #15]
 800c8ea:	2b0f      	cmp	r3, #15
 800c8ec:	d006      	beq.n	800c8fc <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c8ee:	23ff      	movs	r3, #255	; 0xff
 800c8f0:	757b      	strb	r3, [r7, #21]
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f04f 32ff 	mov.w	r2, #4294967295
 800c8f8:	631a      	str	r2, [r3, #48]	; 0x30
 800c8fa:	e05e      	b.n	800c9ba <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c8fc:	7bfb      	ldrb	r3, [r7, #15]
 800c8fe:	2b0f      	cmp	r3, #15
 800c900:	d136      	bne.n	800c970 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d154      	bne.n	800c9ba <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c910:	7dbb      	ldrb	r3, [r7, #22]
 800c912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c916:	2b00      	cmp	r3, #0
 800c918:	d00d      	beq.n	800c936 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6a1b      	ldr	r3, [r3, #32]
 800c91e:	7b5b      	ldrb	r3, [r3, #13]
 800c920:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c922:	7dbb      	ldrb	r3, [r7, #22]
 800c924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c928:	75bb      	strb	r3, [r7, #22]
 800c92a:	7dbb      	ldrb	r3, [r7, #22]
 800c92c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	695a      	ldr	r2, [r3, #20]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c936:	7dba      	ldrb	r2, [r7, #22]
 800c938:	7d7b      	ldrb	r3, [r7, #21]
 800c93a:	429a      	cmp	r2, r3
 800c93c:	d115      	bne.n	800c96a <dir_find+0x106>
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6a1b      	ldr	r3, [r3, #32]
 800c942:	330d      	adds	r3, #13
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	7d3a      	ldrb	r2, [r7, #20]
 800c948:	429a      	cmp	r2, r3
 800c94a:	d10e      	bne.n	800c96a <dir_find+0x106>
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	68da      	ldr	r2, [r3, #12]
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	6a1b      	ldr	r3, [r3, #32]
 800c954:	4619      	mov	r1, r3
 800c956:	4610      	mov	r0, r2
 800c958:	f7ff fde8 	bl	800c52c <cmp_lfn>
 800c95c:	4603      	mov	r3, r0
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d003      	beq.n	800c96a <dir_find+0x106>
 800c962:	7d7b      	ldrb	r3, [r7, #21]
 800c964:	3b01      	subs	r3, #1
 800c966:	b2db      	uxtb	r3, r3
 800c968:	e000      	b.n	800c96c <dir_find+0x108>
 800c96a:	23ff      	movs	r3, #255	; 0xff
 800c96c:	757b      	strb	r3, [r7, #21]
 800c96e:	e024      	b.n	800c9ba <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c970:	7d7b      	ldrb	r3, [r7, #21]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d109      	bne.n	800c98a <dir_find+0x126>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6a1b      	ldr	r3, [r3, #32]
 800c97a:	4618      	mov	r0, r3
 800c97c:	f7ff feaa 	bl	800c6d4 <sum_sfn>
 800c980:	4603      	mov	r3, r0
 800c982:	461a      	mov	r2, r3
 800c984:	7d3b      	ldrb	r3, [r7, #20]
 800c986:	4293      	cmp	r3, r2
 800c988:	d024      	beq.n	800c9d4 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c990:	f003 0301 	and.w	r3, r3, #1
 800c994:	2b00      	cmp	r3, #0
 800c996:	d10a      	bne.n	800c9ae <dir_find+0x14a>
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6a18      	ldr	r0, [r3, #32]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	3324      	adds	r3, #36	; 0x24
 800c9a0:	220b      	movs	r2, #11
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	f7ff f845 	bl	800ba32 <mem_cmp>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d014      	beq.n	800c9d8 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c9ae:	23ff      	movs	r3, #255	; 0xff
 800c9b0:	757b      	strb	r3, [r7, #21]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c9b8:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c9ba:	2100      	movs	r1, #0
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f7ff fcd0 	bl	800c362 <dir_next>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c9c6:	7dfb      	ldrb	r3, [r7, #23]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	f43f af65 	beq.w	800c898 <dir_find+0x34>
 800c9ce:	e004      	b.n	800c9da <dir_find+0x176>
		if (res != FR_OK) break;
 800c9d0:	bf00      	nop
 800c9d2:	e002      	b.n	800c9da <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c9d4:	bf00      	nop
 800c9d6:	e000      	b.n	800c9da <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c9d8:	bf00      	nop

	return res;
 800c9da:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3718      	adds	r7, #24
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b088      	sub	sp, #32
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
 800c9ec:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	69db      	ldr	r3, [r3, #28]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	f000 80c9 	beq.w	800cb96 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca0c:	d032      	beq.n	800ca74 <get_fileinfo+0x90>
			i = j = 0;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	61bb      	str	r3, [r7, #24]
 800ca12:	69bb      	ldr	r3, [r7, #24]
 800ca14:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ca16:	e01b      	b.n	800ca50 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800ca18:	89fb      	ldrh	r3, [r7, #14]
 800ca1a:	2100      	movs	r1, #0
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f001 f853 	bl	800dac8 <ff_convert>
 800ca22:	4603      	mov	r3, r0
 800ca24:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800ca26:	89fb      	ldrh	r3, [r7, #14]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d102      	bne.n	800ca32 <get_fileinfo+0x4e>
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	61fb      	str	r3, [r7, #28]
 800ca30:	e01a      	b.n	800ca68 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800ca32:	69fb      	ldr	r3, [r7, #28]
 800ca34:	2bfe      	cmp	r3, #254	; 0xfe
 800ca36:	d902      	bls.n	800ca3e <get_fileinfo+0x5a>
 800ca38:	2300      	movs	r3, #0
 800ca3a:	61fb      	str	r3, [r7, #28]
 800ca3c:	e014      	b.n	800ca68 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800ca3e:	69fb      	ldr	r3, [r7, #28]
 800ca40:	1c5a      	adds	r2, r3, #1
 800ca42:	61fa      	str	r2, [r7, #28]
 800ca44:	89fa      	ldrh	r2, [r7, #14]
 800ca46:	b2d1      	uxtb	r1, r2
 800ca48:	683a      	ldr	r2, [r7, #0]
 800ca4a:	4413      	add	r3, r2
 800ca4c:	460a      	mov	r2, r1
 800ca4e:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	68da      	ldr	r2, [r3, #12]
 800ca54:	69bb      	ldr	r3, [r7, #24]
 800ca56:	1c59      	adds	r1, r3, #1
 800ca58:	61b9      	str	r1, [r7, #24]
 800ca5a:	005b      	lsls	r3, r3, #1
 800ca5c:	4413      	add	r3, r2
 800ca5e:	881b      	ldrh	r3, [r3, #0]
 800ca60:	81fb      	strh	r3, [r7, #14]
 800ca62:	89fb      	ldrh	r3, [r7, #14]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d1d7      	bne.n	800ca18 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800ca68:	683a      	ldr	r2, [r7, #0]
 800ca6a:	69fb      	ldr	r3, [r7, #28]
 800ca6c:	4413      	add	r3, r2
 800ca6e:	3316      	adds	r3, #22
 800ca70:	2200      	movs	r2, #0
 800ca72:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800ca74:	2300      	movs	r3, #0
 800ca76:	61bb      	str	r3, [r7, #24]
 800ca78:	69bb      	ldr	r3, [r7, #24]
 800ca7a:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800ca7c:	683a      	ldr	r2, [r7, #0]
 800ca7e:	69fb      	ldr	r3, [r7, #28]
 800ca80:	4413      	add	r3, r2
 800ca82:	3316      	adds	r3, #22
 800ca84:	781b      	ldrb	r3, [r3, #0]
 800ca86:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800ca88:	e04c      	b.n	800cb24 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6a1a      	ldr	r2, [r3, #32]
 800ca8e:	69fb      	ldr	r3, [r7, #28]
 800ca90:	1c59      	adds	r1, r3, #1
 800ca92:	61f9      	str	r1, [r7, #28]
 800ca94:	4413      	add	r3, r2
 800ca96:	781b      	ldrb	r3, [r3, #0]
 800ca98:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800ca9a:	7dfb      	ldrb	r3, [r7, #23]
 800ca9c:	2b20      	cmp	r3, #32
 800ca9e:	d100      	bne.n	800caa2 <get_fileinfo+0xbe>
 800caa0:	e040      	b.n	800cb24 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800caa2:	7dfb      	ldrb	r3, [r7, #23]
 800caa4:	2b05      	cmp	r3, #5
 800caa6:	d101      	bne.n	800caac <get_fileinfo+0xc8>
 800caa8:	23e5      	movs	r3, #229	; 0xe5
 800caaa:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800caac:	69fb      	ldr	r3, [r7, #28]
 800caae:	2b09      	cmp	r3, #9
 800cab0:	d10f      	bne.n	800cad2 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800cab2:	89bb      	ldrh	r3, [r7, #12]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d105      	bne.n	800cac4 <get_fileinfo+0xe0>
 800cab8:	683a      	ldr	r2, [r7, #0]
 800caba:	69bb      	ldr	r3, [r7, #24]
 800cabc:	4413      	add	r3, r2
 800cabe:	3316      	adds	r3, #22
 800cac0:	222e      	movs	r2, #46	; 0x2e
 800cac2:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800cac4:	69bb      	ldr	r3, [r7, #24]
 800cac6:	1c5a      	adds	r2, r3, #1
 800cac8:	61ba      	str	r2, [r7, #24]
 800caca:	683a      	ldr	r2, [r7, #0]
 800cacc:	4413      	add	r3, r2
 800cace:	222e      	movs	r2, #46	; 0x2e
 800cad0:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800cad2:	683a      	ldr	r2, [r7, #0]
 800cad4:	69bb      	ldr	r3, [r7, #24]
 800cad6:	4413      	add	r3, r2
 800cad8:	3309      	adds	r3, #9
 800cada:	7dfa      	ldrb	r2, [r7, #23]
 800cadc:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800cade:	89bb      	ldrh	r3, [r7, #12]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d11c      	bne.n	800cb1e <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800cae4:	7dfb      	ldrb	r3, [r7, #23]
 800cae6:	2b40      	cmp	r3, #64	; 0x40
 800cae8:	d913      	bls.n	800cb12 <get_fileinfo+0x12e>
 800caea:	7dfb      	ldrb	r3, [r7, #23]
 800caec:	2b5a      	cmp	r3, #90	; 0x5a
 800caee:	d810      	bhi.n	800cb12 <get_fileinfo+0x12e>
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6a1b      	ldr	r3, [r3, #32]
 800caf4:	330c      	adds	r3, #12
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	461a      	mov	r2, r3
 800cafa:	69fb      	ldr	r3, [r7, #28]
 800cafc:	2b08      	cmp	r3, #8
 800cafe:	d901      	bls.n	800cb04 <get_fileinfo+0x120>
 800cb00:	2310      	movs	r3, #16
 800cb02:	e000      	b.n	800cb06 <get_fileinfo+0x122>
 800cb04:	2308      	movs	r3, #8
 800cb06:	4013      	ands	r3, r2
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d002      	beq.n	800cb12 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800cb0c:	7dfb      	ldrb	r3, [r7, #23]
 800cb0e:	3320      	adds	r3, #32
 800cb10:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800cb12:	683a      	ldr	r2, [r7, #0]
 800cb14:	69bb      	ldr	r3, [r7, #24]
 800cb16:	4413      	add	r3, r2
 800cb18:	3316      	adds	r3, #22
 800cb1a:	7dfa      	ldrb	r2, [r7, #23]
 800cb1c:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800cb1e:	69bb      	ldr	r3, [r7, #24]
 800cb20:	3301      	adds	r3, #1
 800cb22:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800cb24:	69fb      	ldr	r3, [r7, #28]
 800cb26:	2b0a      	cmp	r3, #10
 800cb28:	d9af      	bls.n	800ca8a <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800cb2a:	89bb      	ldrh	r3, [r7, #12]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d10d      	bne.n	800cb4c <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800cb30:	683a      	ldr	r2, [r7, #0]
 800cb32:	69bb      	ldr	r3, [r7, #24]
 800cb34:	4413      	add	r3, r2
 800cb36:	3316      	adds	r3, #22
 800cb38:	2200      	movs	r2, #0
 800cb3a:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6a1b      	ldr	r3, [r3, #32]
 800cb40:	330c      	adds	r3, #12
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d101      	bne.n	800cb4c <get_fileinfo+0x168>
 800cb48:	2300      	movs	r3, #0
 800cb4a:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800cb4c:	683a      	ldr	r2, [r7, #0]
 800cb4e:	69bb      	ldr	r3, [r7, #24]
 800cb50:	4413      	add	r3, r2
 800cb52:	3309      	adds	r3, #9
 800cb54:	2200      	movs	r2, #0
 800cb56:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6a1b      	ldr	r3, [r3, #32]
 800cb5c:	7ada      	ldrb	r2, [r3, #11]
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6a1b      	ldr	r3, [r3, #32]
 800cb66:	331c      	adds	r3, #28
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f7fe fedd 	bl	800b928 <ld_dword>
 800cb6e:	4602      	mov	r2, r0
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6a1b      	ldr	r3, [r3, #32]
 800cb78:	3316      	adds	r3, #22
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f7fe fed4 	bl	800b928 <ld_dword>
 800cb80:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800cb82:	68bb      	ldr	r3, [r7, #8]
 800cb84:	b29a      	uxth	r2, r3
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	80da      	strh	r2, [r3, #6]
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	0c1b      	lsrs	r3, r3, #16
 800cb8e:	b29a      	uxth	r2, r3
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	809a      	strh	r2, [r3, #4]
 800cb94:	e000      	b.n	800cb98 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800cb96:	bf00      	nop
}
 800cb98:	3720      	adds	r7, #32
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}
	...

0800cba0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b08a      	sub	sp, #40	; 0x28
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	613b      	str	r3, [r7, #16]
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	68db      	ldr	r3, [r3, #12]
 800cbb6:	60fb      	str	r3, [r7, #12]
 800cbb8:	2300      	movs	r3, #0
 800cbba:	617b      	str	r3, [r7, #20]
 800cbbc:	697b      	ldr	r3, [r7, #20]
 800cbbe:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800cbc0:	69bb      	ldr	r3, [r7, #24]
 800cbc2:	1c5a      	adds	r2, r3, #1
 800cbc4:	61ba      	str	r2, [r7, #24]
 800cbc6:	693a      	ldr	r2, [r7, #16]
 800cbc8:	4413      	add	r3, r2
 800cbca:	781b      	ldrb	r3, [r3, #0]
 800cbcc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800cbce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbd0:	2b1f      	cmp	r3, #31
 800cbd2:	d940      	bls.n	800cc56 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800cbd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbd6:	2b2f      	cmp	r3, #47	; 0x2f
 800cbd8:	d006      	beq.n	800cbe8 <create_name+0x48>
 800cbda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbdc:	2b5c      	cmp	r3, #92	; 0x5c
 800cbde:	d110      	bne.n	800cc02 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800cbe0:	e002      	b.n	800cbe8 <create_name+0x48>
 800cbe2:	69bb      	ldr	r3, [r7, #24]
 800cbe4:	3301      	adds	r3, #1
 800cbe6:	61bb      	str	r3, [r7, #24]
 800cbe8:	693a      	ldr	r2, [r7, #16]
 800cbea:	69bb      	ldr	r3, [r7, #24]
 800cbec:	4413      	add	r3, r2
 800cbee:	781b      	ldrb	r3, [r3, #0]
 800cbf0:	2b2f      	cmp	r3, #47	; 0x2f
 800cbf2:	d0f6      	beq.n	800cbe2 <create_name+0x42>
 800cbf4:	693a      	ldr	r2, [r7, #16]
 800cbf6:	69bb      	ldr	r3, [r7, #24]
 800cbf8:	4413      	add	r3, r2
 800cbfa:	781b      	ldrb	r3, [r3, #0]
 800cbfc:	2b5c      	cmp	r3, #92	; 0x5c
 800cbfe:	d0f0      	beq.n	800cbe2 <create_name+0x42>
			break;
 800cc00:	e02a      	b.n	800cc58 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	2bfe      	cmp	r3, #254	; 0xfe
 800cc06:	d901      	bls.n	800cc0c <create_name+0x6c>
 800cc08:	2306      	movs	r3, #6
 800cc0a:	e177      	b.n	800cefc <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800cc0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc0e:	b2db      	uxtb	r3, r3
 800cc10:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800cc12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc14:	2101      	movs	r1, #1
 800cc16:	4618      	mov	r0, r3
 800cc18:	f000 ff56 	bl	800dac8 <ff_convert>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800cc20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d101      	bne.n	800cc2a <create_name+0x8a>
 800cc26:	2306      	movs	r3, #6
 800cc28:	e168      	b.n	800cefc <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800cc2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc2c:	2b7f      	cmp	r3, #127	; 0x7f
 800cc2e:	d809      	bhi.n	800cc44 <create_name+0xa4>
 800cc30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc32:	4619      	mov	r1, r3
 800cc34:	48b3      	ldr	r0, [pc, #716]	; (800cf04 <create_name+0x364>)
 800cc36:	f7fe ff23 	bl	800ba80 <chk_chr>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d001      	beq.n	800cc44 <create_name+0xa4>
 800cc40:	2306      	movs	r3, #6
 800cc42:	e15b      	b.n	800cefc <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	1c5a      	adds	r2, r3, #1
 800cc48:	617a      	str	r2, [r7, #20]
 800cc4a:	005b      	lsls	r3, r3, #1
 800cc4c:	68fa      	ldr	r2, [r7, #12]
 800cc4e:	4413      	add	r3, r2
 800cc50:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cc52:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800cc54:	e7b4      	b.n	800cbc0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800cc56:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800cc58:	693a      	ldr	r2, [r7, #16]
 800cc5a:	69bb      	ldr	r3, [r7, #24]
 800cc5c:	441a      	add	r2, r3
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800cc62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc64:	2b1f      	cmp	r3, #31
 800cc66:	d801      	bhi.n	800cc6c <create_name+0xcc>
 800cc68:	2304      	movs	r3, #4
 800cc6a:	e000      	b.n	800cc6e <create_name+0xce>
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800cc72:	e011      	b.n	800cc98 <create_name+0xf8>
		w = lfn[di - 1];
 800cc74:	697a      	ldr	r2, [r7, #20]
 800cc76:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cc7a:	4413      	add	r3, r2
 800cc7c:	005b      	lsls	r3, r3, #1
 800cc7e:	68fa      	ldr	r2, [r7, #12]
 800cc80:	4413      	add	r3, r2
 800cc82:	881b      	ldrh	r3, [r3, #0]
 800cc84:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800cc86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc88:	2b20      	cmp	r3, #32
 800cc8a:	d002      	beq.n	800cc92 <create_name+0xf2>
 800cc8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc8e:	2b2e      	cmp	r3, #46	; 0x2e
 800cc90:	d106      	bne.n	800cca0 <create_name+0x100>
		di--;
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	3b01      	subs	r3, #1
 800cc96:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d1ea      	bne.n	800cc74 <create_name+0xd4>
 800cc9e:	e000      	b.n	800cca2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800cca0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	005b      	lsls	r3, r3, #1
 800cca6:	68fa      	ldr	r2, [r7, #12]
 800cca8:	4413      	add	r3, r2
 800ccaa:	2200      	movs	r2, #0
 800ccac:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d101      	bne.n	800ccb8 <create_name+0x118>
 800ccb4:	2306      	movs	r3, #6
 800ccb6:	e121      	b.n	800cefc <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	3324      	adds	r3, #36	; 0x24
 800ccbc:	220b      	movs	r2, #11
 800ccbe:	2120      	movs	r1, #32
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f7fe fe9b 	bl	800b9fc <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	61bb      	str	r3, [r7, #24]
 800ccca:	e002      	b.n	800ccd2 <create_name+0x132>
 800cccc:	69bb      	ldr	r3, [r7, #24]
 800ccce:	3301      	adds	r3, #1
 800ccd0:	61bb      	str	r3, [r7, #24]
 800ccd2:	69bb      	ldr	r3, [r7, #24]
 800ccd4:	005b      	lsls	r3, r3, #1
 800ccd6:	68fa      	ldr	r2, [r7, #12]
 800ccd8:	4413      	add	r3, r2
 800ccda:	881b      	ldrh	r3, [r3, #0]
 800ccdc:	2b20      	cmp	r3, #32
 800ccde:	d0f5      	beq.n	800cccc <create_name+0x12c>
 800cce0:	69bb      	ldr	r3, [r7, #24]
 800cce2:	005b      	lsls	r3, r3, #1
 800cce4:	68fa      	ldr	r2, [r7, #12]
 800cce6:	4413      	add	r3, r2
 800cce8:	881b      	ldrh	r3, [r3, #0]
 800ccea:	2b2e      	cmp	r3, #46	; 0x2e
 800ccec:	d0ee      	beq.n	800cccc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ccee:	69bb      	ldr	r3, [r7, #24]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d009      	beq.n	800cd08 <create_name+0x168>
 800ccf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccf8:	f043 0303 	orr.w	r3, r3, #3
 800ccfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800cd00:	e002      	b.n	800cd08 <create_name+0x168>
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	3b01      	subs	r3, #1
 800cd06:	617b      	str	r3, [r7, #20]
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d009      	beq.n	800cd22 <create_name+0x182>
 800cd0e:	697a      	ldr	r2, [r7, #20]
 800cd10:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cd14:	4413      	add	r3, r2
 800cd16:	005b      	lsls	r3, r3, #1
 800cd18:	68fa      	ldr	r2, [r7, #12]
 800cd1a:	4413      	add	r3, r2
 800cd1c:	881b      	ldrh	r3, [r3, #0]
 800cd1e:	2b2e      	cmp	r3, #46	; 0x2e
 800cd20:	d1ef      	bne.n	800cd02 <create_name+0x162>

	i = b = 0; ni = 8;
 800cd22:	2300      	movs	r3, #0
 800cd24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cd28:	2300      	movs	r3, #0
 800cd2a:	623b      	str	r3, [r7, #32]
 800cd2c:	2308      	movs	r3, #8
 800cd2e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800cd30:	69bb      	ldr	r3, [r7, #24]
 800cd32:	1c5a      	adds	r2, r3, #1
 800cd34:	61ba      	str	r2, [r7, #24]
 800cd36:	005b      	lsls	r3, r3, #1
 800cd38:	68fa      	ldr	r2, [r7, #12]
 800cd3a:	4413      	add	r3, r2
 800cd3c:	881b      	ldrh	r3, [r3, #0]
 800cd3e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800cd40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	f000 8090 	beq.w	800ce68 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800cd48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd4a:	2b20      	cmp	r3, #32
 800cd4c:	d006      	beq.n	800cd5c <create_name+0x1bc>
 800cd4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd50:	2b2e      	cmp	r3, #46	; 0x2e
 800cd52:	d10a      	bne.n	800cd6a <create_name+0x1ca>
 800cd54:	69ba      	ldr	r2, [r7, #24]
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	429a      	cmp	r2, r3
 800cd5a:	d006      	beq.n	800cd6a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800cd5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd60:	f043 0303 	orr.w	r3, r3, #3
 800cd64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cd68:	e07d      	b.n	800ce66 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800cd6a:	6a3a      	ldr	r2, [r7, #32]
 800cd6c:	69fb      	ldr	r3, [r7, #28]
 800cd6e:	429a      	cmp	r2, r3
 800cd70:	d203      	bcs.n	800cd7a <create_name+0x1da>
 800cd72:	69ba      	ldr	r2, [r7, #24]
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	429a      	cmp	r2, r3
 800cd78:	d123      	bne.n	800cdc2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800cd7a:	69fb      	ldr	r3, [r7, #28]
 800cd7c:	2b0b      	cmp	r3, #11
 800cd7e:	d106      	bne.n	800cd8e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800cd80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd84:	f043 0303 	orr.w	r3, r3, #3
 800cd88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cd8c:	e06f      	b.n	800ce6e <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800cd8e:	69ba      	ldr	r2, [r7, #24]
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	429a      	cmp	r2, r3
 800cd94:	d005      	beq.n	800cda2 <create_name+0x202>
 800cd96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd9a:	f043 0303 	orr.w	r3, r3, #3
 800cd9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800cda2:	69ba      	ldr	r2, [r7, #24]
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	429a      	cmp	r2, r3
 800cda8:	d860      	bhi.n	800ce6c <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	61bb      	str	r3, [r7, #24]
 800cdae:	2308      	movs	r3, #8
 800cdb0:	623b      	str	r3, [r7, #32]
 800cdb2:	230b      	movs	r3, #11
 800cdb4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800cdb6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cdba:	009b      	lsls	r3, r3, #2
 800cdbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cdc0:	e051      	b.n	800ce66 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800cdc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cdc4:	2b7f      	cmp	r3, #127	; 0x7f
 800cdc6:	d914      	bls.n	800cdf2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800cdc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cdca:	2100      	movs	r1, #0
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f000 fe7b 	bl	800dac8 <ff_convert>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800cdd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d004      	beq.n	800cde6 <create_name+0x246>
 800cddc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cdde:	3b80      	subs	r3, #128	; 0x80
 800cde0:	4a49      	ldr	r2, [pc, #292]	; (800cf08 <create_name+0x368>)
 800cde2:	5cd3      	ldrb	r3, [r2, r3]
 800cde4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800cde6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdea:	f043 0302 	orr.w	r3, r3, #2
 800cdee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800cdf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d007      	beq.n	800ce08 <create_name+0x268>
 800cdf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cdfa:	4619      	mov	r1, r3
 800cdfc:	4843      	ldr	r0, [pc, #268]	; (800cf0c <create_name+0x36c>)
 800cdfe:	f7fe fe3f 	bl	800ba80 <chk_chr>
 800ce02:	4603      	mov	r3, r0
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d008      	beq.n	800ce1a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ce08:	235f      	movs	r3, #95	; 0x5f
 800ce0a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ce0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce10:	f043 0303 	orr.w	r3, r3, #3
 800ce14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ce18:	e01b      	b.n	800ce52 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ce1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce1c:	2b40      	cmp	r3, #64	; 0x40
 800ce1e:	d909      	bls.n	800ce34 <create_name+0x294>
 800ce20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce22:	2b5a      	cmp	r3, #90	; 0x5a
 800ce24:	d806      	bhi.n	800ce34 <create_name+0x294>
					b |= 2;
 800ce26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ce2a:	f043 0302 	orr.w	r3, r3, #2
 800ce2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ce32:	e00e      	b.n	800ce52 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ce34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce36:	2b60      	cmp	r3, #96	; 0x60
 800ce38:	d90b      	bls.n	800ce52 <create_name+0x2b2>
 800ce3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce3c:	2b7a      	cmp	r3, #122	; 0x7a
 800ce3e:	d808      	bhi.n	800ce52 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800ce40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ce44:	f043 0301 	orr.w	r3, r3, #1
 800ce48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ce4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce4e:	3b20      	subs	r3, #32
 800ce50:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ce52:	6a3b      	ldr	r3, [r7, #32]
 800ce54:	1c5a      	adds	r2, r3, #1
 800ce56:	623a      	str	r2, [r7, #32]
 800ce58:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ce5a:	b2d1      	uxtb	r1, r2
 800ce5c:	687a      	ldr	r2, [r7, #4]
 800ce5e:	4413      	add	r3, r2
 800ce60:	460a      	mov	r2, r1
 800ce62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800ce66:	e763      	b.n	800cd30 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800ce68:	bf00      	nop
 800ce6a:	e000      	b.n	800ce6e <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800ce6c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ce74:	2be5      	cmp	r3, #229	; 0xe5
 800ce76:	d103      	bne.n	800ce80 <create_name+0x2e0>
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2205      	movs	r2, #5
 800ce7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800ce80:	69fb      	ldr	r3, [r7, #28]
 800ce82:	2b08      	cmp	r3, #8
 800ce84:	d104      	bne.n	800ce90 <create_name+0x2f0>
 800ce86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ce8a:	009b      	lsls	r3, r3, #2
 800ce8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ce90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ce94:	f003 030c 	and.w	r3, r3, #12
 800ce98:	2b0c      	cmp	r3, #12
 800ce9a:	d005      	beq.n	800cea8 <create_name+0x308>
 800ce9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cea0:	f003 0303 	and.w	r3, r3, #3
 800cea4:	2b03      	cmp	r3, #3
 800cea6:	d105      	bne.n	800ceb4 <create_name+0x314>
 800cea8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ceac:	f043 0302 	orr.w	r3, r3, #2
 800ceb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ceb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ceb8:	f003 0302 	and.w	r3, r3, #2
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d117      	bne.n	800cef0 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800cec0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cec4:	f003 0303 	and.w	r3, r3, #3
 800cec8:	2b01      	cmp	r3, #1
 800ceca:	d105      	bne.n	800ced8 <create_name+0x338>
 800cecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ced0:	f043 0310 	orr.w	r3, r3, #16
 800ced4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ced8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cedc:	f003 030c 	and.w	r3, r3, #12
 800cee0:	2b04      	cmp	r3, #4
 800cee2:	d105      	bne.n	800cef0 <create_name+0x350>
 800cee4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cee8:	f043 0308 	orr.w	r3, r3, #8
 800ceec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cef6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800cefa:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	3728      	adds	r7, #40	; 0x28
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}
 800cf04:	08011aa8 	.word	0x08011aa8
 800cf08:	08013a58 	.word	0x08013a58
 800cf0c:	08011ab4 	.word	0x08011ab4

0800cf10 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b086      	sub	sp, #24
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
 800cf18:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800cf1e:	693b      	ldr	r3, [r7, #16]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800cf24:	e002      	b.n	800cf2c <follow_path+0x1c>
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	3301      	adds	r3, #1
 800cf2a:	603b      	str	r3, [r7, #0]
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	781b      	ldrb	r3, [r3, #0]
 800cf30:	2b2f      	cmp	r3, #47	; 0x2f
 800cf32:	d0f8      	beq.n	800cf26 <follow_path+0x16>
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	781b      	ldrb	r3, [r3, #0]
 800cf38:	2b5c      	cmp	r3, #92	; 0x5c
 800cf3a:	d0f4      	beq.n	800cf26 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800cf3c:	693b      	ldr	r3, [r7, #16]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	781b      	ldrb	r3, [r3, #0]
 800cf46:	2b1f      	cmp	r3, #31
 800cf48:	d80a      	bhi.n	800cf60 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2280      	movs	r2, #128	; 0x80
 800cf4e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800cf52:	2100      	movs	r1, #0
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f7ff f989 	bl	800c26c <dir_sdi>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	75fb      	strb	r3, [r7, #23]
 800cf5e:	e043      	b.n	800cfe8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cf60:	463b      	mov	r3, r7
 800cf62:	4619      	mov	r1, r3
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f7ff fe1b 	bl	800cba0 <create_name>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cf6e:	7dfb      	ldrb	r3, [r7, #23]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d134      	bne.n	800cfde <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f7ff fc75 	bl	800c864 <dir_find>
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cf84:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800cf86:	7dfb      	ldrb	r3, [r7, #23]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d00a      	beq.n	800cfa2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cf8c:	7dfb      	ldrb	r3, [r7, #23]
 800cf8e:	2b04      	cmp	r3, #4
 800cf90:	d127      	bne.n	800cfe2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cf92:	7afb      	ldrb	r3, [r7, #11]
 800cf94:	f003 0304 	and.w	r3, r3, #4
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d122      	bne.n	800cfe2 <follow_path+0xd2>
 800cf9c:	2305      	movs	r3, #5
 800cf9e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800cfa0:	e01f      	b.n	800cfe2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cfa2:	7afb      	ldrb	r3, [r7, #11]
 800cfa4:	f003 0304 	and.w	r3, r3, #4
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d11c      	bne.n	800cfe6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800cfac:	693b      	ldr	r3, [r7, #16]
 800cfae:	799b      	ldrb	r3, [r3, #6]
 800cfb0:	f003 0310 	and.w	r3, r3, #16
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d102      	bne.n	800cfbe <follow_path+0xae>
				res = FR_NO_PATH; break;
 800cfb8:	2305      	movs	r3, #5
 800cfba:	75fb      	strb	r3, [r7, #23]
 800cfbc:	e014      	b.n	800cfe8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	695b      	ldr	r3, [r3, #20]
 800cfc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfcc:	4413      	add	r3, r2
 800cfce:	4619      	mov	r1, r3
 800cfd0:	68f8      	ldr	r0, [r7, #12]
 800cfd2:	f7ff fa8b 	bl	800c4ec <ld_clust>
 800cfd6:	4602      	mov	r2, r0
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cfdc:	e7c0      	b.n	800cf60 <follow_path+0x50>
			if (res != FR_OK) break;
 800cfde:	bf00      	nop
 800cfe0:	e002      	b.n	800cfe8 <follow_path+0xd8>
				break;
 800cfe2:	bf00      	nop
 800cfe4:	e000      	b.n	800cfe8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cfe6:	bf00      	nop
			}
		}
	}

	return res;
 800cfe8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3718      	adds	r7, #24
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}

0800cff2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cff2:	b480      	push	{r7}
 800cff4:	b087      	sub	sp, #28
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cffa:	f04f 33ff 	mov.w	r3, #4294967295
 800cffe:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d031      	beq.n	800d06c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	617b      	str	r3, [r7, #20]
 800d00e:	e002      	b.n	800d016 <get_ldnumber+0x24>
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	3301      	adds	r3, #1
 800d014:	617b      	str	r3, [r7, #20]
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	781b      	ldrb	r3, [r3, #0]
 800d01a:	2b1f      	cmp	r3, #31
 800d01c:	d903      	bls.n	800d026 <get_ldnumber+0x34>
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	781b      	ldrb	r3, [r3, #0]
 800d022:	2b3a      	cmp	r3, #58	; 0x3a
 800d024:	d1f4      	bne.n	800d010 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	781b      	ldrb	r3, [r3, #0]
 800d02a:	2b3a      	cmp	r3, #58	; 0x3a
 800d02c:	d11c      	bne.n	800d068 <get_ldnumber+0x76>
			tp = *path;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	1c5a      	adds	r2, r3, #1
 800d038:	60fa      	str	r2, [r7, #12]
 800d03a:	781b      	ldrb	r3, [r3, #0]
 800d03c:	3b30      	subs	r3, #48	; 0x30
 800d03e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	2b09      	cmp	r3, #9
 800d044:	d80e      	bhi.n	800d064 <get_ldnumber+0x72>
 800d046:	68fa      	ldr	r2, [r7, #12]
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	429a      	cmp	r2, r3
 800d04c:	d10a      	bne.n	800d064 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d04e:	68bb      	ldr	r3, [r7, #8]
 800d050:	2b01      	cmp	r3, #1
 800d052:	d807      	bhi.n	800d064 <get_ldnumber+0x72>
					vol = (int)i;
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	3301      	adds	r3, #1
 800d05c:	617b      	str	r3, [r7, #20]
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	697a      	ldr	r2, [r7, #20]
 800d062:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d064:	693b      	ldr	r3, [r7, #16]
 800d066:	e002      	b.n	800d06e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d068:	2300      	movs	r3, #0
 800d06a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d06c:	693b      	ldr	r3, [r7, #16]
}
 800d06e:	4618      	mov	r0, r3
 800d070:	371c      	adds	r7, #28
 800d072:	46bd      	mov	sp, r7
 800d074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d078:	4770      	bx	lr
	...

0800d07c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b082      	sub	sp, #8
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2200      	movs	r2, #0
 800d08a:	70da      	strb	r2, [r3, #3]
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f04f 32ff 	mov.w	r2, #4294967295
 800d092:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d094:	6839      	ldr	r1, [r7, #0]
 800d096:	6878      	ldr	r0, [r7, #4]
 800d098:	f7fe fe70 	bl	800bd7c <move_window>
 800d09c:	4603      	mov	r3, r0
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d001      	beq.n	800d0a6 <check_fs+0x2a>
 800d0a2:	2304      	movs	r3, #4
 800d0a4:	e038      	b.n	800d118 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	3338      	adds	r3, #56	; 0x38
 800d0aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f7fe fc22 	bl	800b8f8 <ld_word>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	461a      	mov	r2, r3
 800d0b8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	d001      	beq.n	800d0c4 <check_fs+0x48>
 800d0c0:	2303      	movs	r3, #3
 800d0c2:	e029      	b.n	800d118 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d0ca:	2be9      	cmp	r3, #233	; 0xe9
 800d0cc:	d009      	beq.n	800d0e2 <check_fs+0x66>
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d0d4:	2beb      	cmp	r3, #235	; 0xeb
 800d0d6:	d11e      	bne.n	800d116 <check_fs+0x9a>
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d0de:	2b90      	cmp	r3, #144	; 0x90
 800d0e0:	d119      	bne.n	800d116 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	3338      	adds	r3, #56	; 0x38
 800d0e6:	3336      	adds	r3, #54	; 0x36
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f7fe fc1d 	bl	800b928 <ld_dword>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d0f4:	4a0a      	ldr	r2, [pc, #40]	; (800d120 <check_fs+0xa4>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d101      	bne.n	800d0fe <check_fs+0x82>
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	e00c      	b.n	800d118 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	3338      	adds	r3, #56	; 0x38
 800d102:	3352      	adds	r3, #82	; 0x52
 800d104:	4618      	mov	r0, r3
 800d106:	f7fe fc0f 	bl	800b928 <ld_dword>
 800d10a:	4603      	mov	r3, r0
 800d10c:	4a05      	ldr	r2, [pc, #20]	; (800d124 <check_fs+0xa8>)
 800d10e:	4293      	cmp	r3, r2
 800d110:	d101      	bne.n	800d116 <check_fs+0x9a>
 800d112:	2300      	movs	r3, #0
 800d114:	e000      	b.n	800d118 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d116:	2302      	movs	r3, #2
}
 800d118:	4618      	mov	r0, r3
 800d11a:	3708      	adds	r7, #8
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}
 800d120:	00544146 	.word	0x00544146
 800d124:	33544146 	.word	0x33544146

0800d128 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b096      	sub	sp, #88	; 0x58
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	60f8      	str	r0, [r7, #12]
 800d130:	60b9      	str	r1, [r7, #8]
 800d132:	4613      	mov	r3, r2
 800d134:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	2200      	movs	r2, #0
 800d13a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d13c:	68f8      	ldr	r0, [r7, #12]
 800d13e:	f7ff ff58 	bl	800cff2 <get_ldnumber>
 800d142:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d146:	2b00      	cmp	r3, #0
 800d148:	da01      	bge.n	800d14e <find_volume+0x26>
 800d14a:	230b      	movs	r3, #11
 800d14c:	e236      	b.n	800d5bc <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d14e:	4aac      	ldr	r2, [pc, #688]	; (800d400 <find_volume+0x2d8>)
 800d150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d156:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d101      	bne.n	800d162 <find_volume+0x3a>
 800d15e:	230c      	movs	r3, #12
 800d160:	e22c      	b.n	800d5bc <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800d162:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d164:	f7fe fca7 	bl	800bab6 <lock_fs>
 800d168:	4603      	mov	r3, r0
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d101      	bne.n	800d172 <find_volume+0x4a>
 800d16e:	230f      	movs	r3, #15
 800d170:	e224      	b.n	800d5bc <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d176:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d178:	79fb      	ldrb	r3, [r7, #7]
 800d17a:	f023 0301 	bic.w	r3, r3, #1
 800d17e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d182:	781b      	ldrb	r3, [r3, #0]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d01a      	beq.n	800d1be <find_volume+0x96>
		stat = disk_status(fs->drv);
 800d188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d18a:	785b      	ldrb	r3, [r3, #1]
 800d18c:	4618      	mov	r0, r3
 800d18e:	f7fe fb33 	bl	800b7f8 <disk_status>
 800d192:	4603      	mov	r3, r0
 800d194:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d198:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d19c:	f003 0301 	and.w	r3, r3, #1
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d10c      	bne.n	800d1be <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d1a4:	79fb      	ldrb	r3, [r7, #7]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d007      	beq.n	800d1ba <find_volume+0x92>
 800d1aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d1ae:	f003 0304 	and.w	r3, r3, #4
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d001      	beq.n	800d1ba <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800d1b6:	230a      	movs	r3, #10
 800d1b8:	e200      	b.n	800d5bc <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	e1fe      	b.n	800d5bc <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d1c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1c6:	b2da      	uxtb	r2, r3
 800d1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ce:	785b      	ldrb	r3, [r3, #1]
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f7fe fb2b 	bl	800b82c <disk_initialize>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d1dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d1e0:	f003 0301 	and.w	r3, r3, #1
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d001      	beq.n	800d1ec <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d1e8:	2303      	movs	r3, #3
 800d1ea:	e1e7      	b.n	800d5bc <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d1ec:	79fb      	ldrb	r3, [r7, #7]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d007      	beq.n	800d202 <find_volume+0xda>
 800d1f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d1f6:	f003 0304 	and.w	r3, r3, #4
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d001      	beq.n	800d202 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800d1fe:	230a      	movs	r3, #10
 800d200:	e1dc      	b.n	800d5bc <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d202:	2300      	movs	r3, #0
 800d204:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d206:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d208:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d20a:	f7ff ff37 	bl	800d07c <check_fs>
 800d20e:	4603      	mov	r3, r0
 800d210:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d214:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d218:	2b02      	cmp	r3, #2
 800d21a:	d14b      	bne.n	800d2b4 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d21c:	2300      	movs	r3, #0
 800d21e:	643b      	str	r3, [r7, #64]	; 0x40
 800d220:	e01f      	b.n	800d262 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d224:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d22a:	011b      	lsls	r3, r3, #4
 800d22c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d230:	4413      	add	r3, r2
 800d232:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d236:	3304      	adds	r3, #4
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d006      	beq.n	800d24c <find_volume+0x124>
 800d23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d240:	3308      	adds	r3, #8
 800d242:	4618      	mov	r0, r3
 800d244:	f7fe fb70 	bl	800b928 <ld_dword>
 800d248:	4602      	mov	r2, r0
 800d24a:	e000      	b.n	800d24e <find_volume+0x126>
 800d24c:	2200      	movs	r2, #0
 800d24e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d250:	009b      	lsls	r3, r3, #2
 800d252:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d256:	440b      	add	r3, r1
 800d258:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d25c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d25e:	3301      	adds	r3, #1
 800d260:	643b      	str	r3, [r7, #64]	; 0x40
 800d262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d264:	2b03      	cmp	r3, #3
 800d266:	d9dc      	bls.n	800d222 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d268:	2300      	movs	r3, #0
 800d26a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d26c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d002      	beq.n	800d278 <find_volume+0x150>
 800d272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d274:	3b01      	subs	r3, #1
 800d276:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d27a:	009b      	lsls	r3, r3, #2
 800d27c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d280:	4413      	add	r3, r2
 800d282:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d286:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d005      	beq.n	800d29a <find_volume+0x172>
 800d28e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d290:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d292:	f7ff fef3 	bl	800d07c <check_fs>
 800d296:	4603      	mov	r3, r0
 800d298:	e000      	b.n	800d29c <find_volume+0x174>
 800d29a:	2303      	movs	r3, #3
 800d29c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d2a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d2a4:	2b01      	cmp	r3, #1
 800d2a6:	d905      	bls.n	800d2b4 <find_volume+0x18c>
 800d2a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2aa:	3301      	adds	r3, #1
 800d2ac:	643b      	str	r3, [r7, #64]	; 0x40
 800d2ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2b0:	2b03      	cmp	r3, #3
 800d2b2:	d9e1      	bls.n	800d278 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d2b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d2b8:	2b04      	cmp	r3, #4
 800d2ba:	d101      	bne.n	800d2c0 <find_volume+0x198>
 800d2bc:	2301      	movs	r3, #1
 800d2be:	e17d      	b.n	800d5bc <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d2c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d2c4:	2b01      	cmp	r3, #1
 800d2c6:	d901      	bls.n	800d2cc <find_volume+0x1a4>
 800d2c8:	230d      	movs	r3, #13
 800d2ca:	e177      	b.n	800d5bc <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ce:	3338      	adds	r3, #56	; 0x38
 800d2d0:	330b      	adds	r3, #11
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f7fe fb10 	bl	800b8f8 <ld_word>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d2de:	d001      	beq.n	800d2e4 <find_volume+0x1bc>
 800d2e0:	230d      	movs	r3, #13
 800d2e2:	e16b      	b.n	800d5bc <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2e6:	3338      	adds	r3, #56	; 0x38
 800d2e8:	3316      	adds	r3, #22
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f7fe fb04 	bl	800b8f8 <ld_word>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d2f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d106      	bne.n	800d308 <find_volume+0x1e0>
 800d2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2fc:	3338      	adds	r3, #56	; 0x38
 800d2fe:	3324      	adds	r3, #36	; 0x24
 800d300:	4618      	mov	r0, r3
 800d302:	f7fe fb11 	bl	800b928 <ld_dword>
 800d306:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d30a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d30c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d310:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800d314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d316:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d31a:	789b      	ldrb	r3, [r3, #2]
 800d31c:	2b01      	cmp	r3, #1
 800d31e:	d005      	beq.n	800d32c <find_volume+0x204>
 800d320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d322:	789b      	ldrb	r3, [r3, #2]
 800d324:	2b02      	cmp	r3, #2
 800d326:	d001      	beq.n	800d32c <find_volume+0x204>
 800d328:	230d      	movs	r3, #13
 800d32a:	e147      	b.n	800d5bc <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d32e:	789b      	ldrb	r3, [r3, #2]
 800d330:	461a      	mov	r2, r3
 800d332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d334:	fb02 f303 	mul.w	r3, r2, r3
 800d338:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d33c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d340:	b29a      	uxth	r2, r3
 800d342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d344:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d348:	895b      	ldrh	r3, [r3, #10]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d008      	beq.n	800d360 <find_volume+0x238>
 800d34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d350:	895b      	ldrh	r3, [r3, #10]
 800d352:	461a      	mov	r2, r3
 800d354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d356:	895b      	ldrh	r3, [r3, #10]
 800d358:	3b01      	subs	r3, #1
 800d35a:	4013      	ands	r3, r2
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d001      	beq.n	800d364 <find_volume+0x23c>
 800d360:	230d      	movs	r3, #13
 800d362:	e12b      	b.n	800d5bc <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d366:	3338      	adds	r3, #56	; 0x38
 800d368:	3311      	adds	r3, #17
 800d36a:	4618      	mov	r0, r3
 800d36c:	f7fe fac4 	bl	800b8f8 <ld_word>
 800d370:	4603      	mov	r3, r0
 800d372:	461a      	mov	r2, r3
 800d374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d376:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d37a:	891b      	ldrh	r3, [r3, #8]
 800d37c:	f003 030f 	and.w	r3, r3, #15
 800d380:	b29b      	uxth	r3, r3
 800d382:	2b00      	cmp	r3, #0
 800d384:	d001      	beq.n	800d38a <find_volume+0x262>
 800d386:	230d      	movs	r3, #13
 800d388:	e118      	b.n	800d5bc <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d38c:	3338      	adds	r3, #56	; 0x38
 800d38e:	3313      	adds	r3, #19
 800d390:	4618      	mov	r0, r3
 800d392:	f7fe fab1 	bl	800b8f8 <ld_word>
 800d396:	4603      	mov	r3, r0
 800d398:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d39a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d106      	bne.n	800d3ae <find_volume+0x286>
 800d3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3a2:	3338      	adds	r3, #56	; 0x38
 800d3a4:	3320      	adds	r3, #32
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f7fe fabe 	bl	800b928 <ld_dword>
 800d3ac:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3b0:	3338      	adds	r3, #56	; 0x38
 800d3b2:	330e      	adds	r3, #14
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f7fe fa9f 	bl	800b8f8 <ld_word>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d3be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d101      	bne.n	800d3c8 <find_volume+0x2a0>
 800d3c4:	230d      	movs	r3, #13
 800d3c6:	e0f9      	b.n	800d5bc <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d3c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d3ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3cc:	4413      	add	r3, r2
 800d3ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d3d0:	8912      	ldrh	r2, [r2, #8]
 800d3d2:	0912      	lsrs	r2, r2, #4
 800d3d4:	b292      	uxth	r2, r2
 800d3d6:	4413      	add	r3, r2
 800d3d8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d3da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d201      	bcs.n	800d3e6 <find_volume+0x2be>
 800d3e2:	230d      	movs	r3, #13
 800d3e4:	e0ea      	b.n	800d5bc <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d3e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ea:	1ad3      	subs	r3, r2, r3
 800d3ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d3ee:	8952      	ldrh	r2, [r2, #10]
 800d3f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800d3f4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d103      	bne.n	800d404 <find_volume+0x2dc>
 800d3fc:	230d      	movs	r3, #13
 800d3fe:	e0dd      	b.n	800d5bc <find_volume+0x494>
 800d400:	2000076c 	.word	0x2000076c
		fmt = FS_FAT32;
 800d404:	2303      	movs	r3, #3
 800d406:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d40c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d410:	4293      	cmp	r3, r2
 800d412:	d802      	bhi.n	800d41a <find_volume+0x2f2>
 800d414:	2302      	movs	r3, #2
 800d416:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d41c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d420:	4293      	cmp	r3, r2
 800d422:	d802      	bhi.n	800d42a <find_volume+0x302>
 800d424:	2301      	movs	r3, #1
 800d426:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d42c:	1c9a      	adds	r2, r3, #2
 800d42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d430:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800d432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d434:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d436:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d438:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d43a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d43c:	441a      	add	r2, r3
 800d43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d440:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800d442:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d446:	441a      	add	r2, r3
 800d448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d44a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800d44c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d450:	2b03      	cmp	r3, #3
 800d452:	d11e      	bne.n	800d492 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d456:	3338      	adds	r3, #56	; 0x38
 800d458:	332a      	adds	r3, #42	; 0x2a
 800d45a:	4618      	mov	r0, r3
 800d45c:	f7fe fa4c 	bl	800b8f8 <ld_word>
 800d460:	4603      	mov	r3, r0
 800d462:	2b00      	cmp	r3, #0
 800d464:	d001      	beq.n	800d46a <find_volume+0x342>
 800d466:	230d      	movs	r3, #13
 800d468:	e0a8      	b.n	800d5bc <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d46c:	891b      	ldrh	r3, [r3, #8]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d001      	beq.n	800d476 <find_volume+0x34e>
 800d472:	230d      	movs	r3, #13
 800d474:	e0a2      	b.n	800d5bc <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d478:	3338      	adds	r3, #56	; 0x38
 800d47a:	332c      	adds	r3, #44	; 0x2c
 800d47c:	4618      	mov	r0, r3
 800d47e:	f7fe fa53 	bl	800b928 <ld_dword>
 800d482:	4602      	mov	r2, r0
 800d484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d486:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d48a:	69db      	ldr	r3, [r3, #28]
 800d48c:	009b      	lsls	r3, r3, #2
 800d48e:	647b      	str	r3, [r7, #68]	; 0x44
 800d490:	e01f      	b.n	800d4d2 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d494:	891b      	ldrh	r3, [r3, #8]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d101      	bne.n	800d49e <find_volume+0x376>
 800d49a:	230d      	movs	r3, #13
 800d49c:	e08e      	b.n	800d5bc <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d4a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4a4:	441a      	add	r2, r3
 800d4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4a8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d4aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d4ae:	2b02      	cmp	r3, #2
 800d4b0:	d103      	bne.n	800d4ba <find_volume+0x392>
 800d4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4b4:	69db      	ldr	r3, [r3, #28]
 800d4b6:	005b      	lsls	r3, r3, #1
 800d4b8:	e00a      	b.n	800d4d0 <find_volume+0x3a8>
 800d4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4bc:	69da      	ldr	r2, [r3, #28]
 800d4be:	4613      	mov	r3, r2
 800d4c0:	005b      	lsls	r3, r3, #1
 800d4c2:	4413      	add	r3, r2
 800d4c4:	085a      	lsrs	r2, r3, #1
 800d4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4c8:	69db      	ldr	r3, [r3, #28]
 800d4ca:	f003 0301 	and.w	r3, r3, #1
 800d4ce:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d4d0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4d4:	6a1a      	ldr	r2, [r3, #32]
 800d4d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4d8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d4dc:	0a5b      	lsrs	r3, r3, #9
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	d201      	bcs.n	800d4e6 <find_volume+0x3be>
 800d4e2:	230d      	movs	r3, #13
 800d4e4:	e06a      	b.n	800d5bc <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4e8:	f04f 32ff 	mov.w	r2, #4294967295
 800d4ec:	619a      	str	r2, [r3, #24]
 800d4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f0:	699a      	ldr	r2, [r3, #24]
 800d4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800d4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f8:	2280      	movs	r2, #128	; 0x80
 800d4fa:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d4fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d500:	2b03      	cmp	r3, #3
 800d502:	d149      	bne.n	800d598 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d506:	3338      	adds	r3, #56	; 0x38
 800d508:	3330      	adds	r3, #48	; 0x30
 800d50a:	4618      	mov	r0, r3
 800d50c:	f7fe f9f4 	bl	800b8f8 <ld_word>
 800d510:	4603      	mov	r3, r0
 800d512:	2b01      	cmp	r3, #1
 800d514:	d140      	bne.n	800d598 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d518:	3301      	adds	r3, #1
 800d51a:	4619      	mov	r1, r3
 800d51c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d51e:	f7fe fc2d 	bl	800bd7c <move_window>
 800d522:	4603      	mov	r3, r0
 800d524:	2b00      	cmp	r3, #0
 800d526:	d137      	bne.n	800d598 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800d528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d52a:	2200      	movs	r2, #0
 800d52c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d530:	3338      	adds	r3, #56	; 0x38
 800d532:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d536:	4618      	mov	r0, r3
 800d538:	f7fe f9de 	bl	800b8f8 <ld_word>
 800d53c:	4603      	mov	r3, r0
 800d53e:	461a      	mov	r2, r3
 800d540:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d544:	429a      	cmp	r2, r3
 800d546:	d127      	bne.n	800d598 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d54a:	3338      	adds	r3, #56	; 0x38
 800d54c:	4618      	mov	r0, r3
 800d54e:	f7fe f9eb 	bl	800b928 <ld_dword>
 800d552:	4603      	mov	r3, r0
 800d554:	4a1b      	ldr	r2, [pc, #108]	; (800d5c4 <find_volume+0x49c>)
 800d556:	4293      	cmp	r3, r2
 800d558:	d11e      	bne.n	800d598 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d55c:	3338      	adds	r3, #56	; 0x38
 800d55e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d562:	4618      	mov	r0, r3
 800d564:	f7fe f9e0 	bl	800b928 <ld_dword>
 800d568:	4603      	mov	r3, r0
 800d56a:	4a17      	ldr	r2, [pc, #92]	; (800d5c8 <find_volume+0x4a0>)
 800d56c:	4293      	cmp	r3, r2
 800d56e:	d113      	bne.n	800d598 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d572:	3338      	adds	r3, #56	; 0x38
 800d574:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d578:	4618      	mov	r0, r3
 800d57a:	f7fe f9d5 	bl	800b928 <ld_dword>
 800d57e:	4602      	mov	r2, r0
 800d580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d582:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d586:	3338      	adds	r3, #56	; 0x38
 800d588:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d58c:	4618      	mov	r0, r3
 800d58e:	f7fe f9cb 	bl	800b928 <ld_dword>
 800d592:	4602      	mov	r2, r0
 800d594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d596:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d59a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d59e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d5a0:	4b0a      	ldr	r3, [pc, #40]	; (800d5cc <find_volume+0x4a4>)
 800d5a2:	881b      	ldrh	r3, [r3, #0]
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	b29a      	uxth	r2, r3
 800d5a8:	4b08      	ldr	r3, [pc, #32]	; (800d5cc <find_volume+0x4a4>)
 800d5aa:	801a      	strh	r2, [r3, #0]
 800d5ac:	4b07      	ldr	r3, [pc, #28]	; (800d5cc <find_volume+0x4a4>)
 800d5ae:	881a      	ldrh	r2, [r3, #0]
 800d5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5b2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d5b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d5b6:	f7fe fb79 	bl	800bcac <clear_lock>
#endif
	return FR_OK;
 800d5ba:	2300      	movs	r3, #0
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3758      	adds	r7, #88	; 0x58
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}
 800d5c4:	41615252 	.word	0x41615252
 800d5c8:	61417272 	.word	0x61417272
 800d5cc:	20000774 	.word	0x20000774

0800d5d0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b084      	sub	sp, #16
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
 800d5d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d5da:	2309      	movs	r3, #9
 800d5dc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d02e      	beq.n	800d642 <validate+0x72>
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d02a      	beq.n	800d642 <validate+0x72>
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	781b      	ldrb	r3, [r3, #0]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d025      	beq.n	800d642 <validate+0x72>
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	889a      	ldrh	r2, [r3, #4]
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	88db      	ldrh	r3, [r3, #6]
 800d600:	429a      	cmp	r2, r3
 800d602:	d11e      	bne.n	800d642 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	4618      	mov	r0, r3
 800d60a:	f7fe fa54 	bl	800bab6 <lock_fs>
 800d60e:	4603      	mov	r3, r0
 800d610:	2b00      	cmp	r3, #0
 800d612:	d014      	beq.n	800d63e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	785b      	ldrb	r3, [r3, #1]
 800d61a:	4618      	mov	r0, r3
 800d61c:	f7fe f8ec 	bl	800b7f8 <disk_status>
 800d620:	4603      	mov	r3, r0
 800d622:	f003 0301 	and.w	r3, r3, #1
 800d626:	2b00      	cmp	r3, #0
 800d628:	d102      	bne.n	800d630 <validate+0x60>
				res = FR_OK;
 800d62a:	2300      	movs	r3, #0
 800d62c:	73fb      	strb	r3, [r7, #15]
 800d62e:	e008      	b.n	800d642 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	2100      	movs	r1, #0
 800d636:	4618      	mov	r0, r3
 800d638:	f7fe fa53 	bl	800bae2 <unlock_fs>
 800d63c:	e001      	b.n	800d642 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800d63e:	230f      	movs	r3, #15
 800d640:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d642:	7bfb      	ldrb	r3, [r7, #15]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d102      	bne.n	800d64e <validate+0x7e>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	e000      	b.n	800d650 <validate+0x80>
 800d64e:	2300      	movs	r3, #0
 800d650:	683a      	ldr	r2, [r7, #0]
 800d652:	6013      	str	r3, [r2, #0]
	return res;
 800d654:	7bfb      	ldrb	r3, [r7, #15]
}
 800d656:	4618      	mov	r0, r3
 800d658:	3710      	adds	r7, #16
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
	...

0800d660 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b088      	sub	sp, #32
 800d664:	af00      	add	r7, sp, #0
 800d666:	60f8      	str	r0, [r7, #12]
 800d668:	60b9      	str	r1, [r7, #8]
 800d66a:	4613      	mov	r3, r2
 800d66c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d672:	f107 0310 	add.w	r3, r7, #16
 800d676:	4618      	mov	r0, r3
 800d678:	f7ff fcbb 	bl	800cff2 <get_ldnumber>
 800d67c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d67e:	69fb      	ldr	r3, [r7, #28]
 800d680:	2b00      	cmp	r3, #0
 800d682:	da01      	bge.n	800d688 <f_mount+0x28>
 800d684:	230b      	movs	r3, #11
 800d686:	e048      	b.n	800d71a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d688:	4a26      	ldr	r2, [pc, #152]	; (800d724 <f_mount+0xc4>)
 800d68a:	69fb      	ldr	r3, [r7, #28]
 800d68c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d690:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d692:	69bb      	ldr	r3, [r7, #24]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d00f      	beq.n	800d6b8 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d698:	69b8      	ldr	r0, [r7, #24]
 800d69a:	f7fe fb07 	bl	800bcac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800d69e:	69bb      	ldr	r3, [r7, #24]
 800d6a0:	691b      	ldr	r3, [r3, #16]
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f000 f9cd 	bl	800da42 <ff_del_syncobj>
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d101      	bne.n	800d6b2 <f_mount+0x52>
 800d6ae:	2302      	movs	r3, #2
 800d6b0:	e033      	b.n	800d71a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d6b2:	69bb      	ldr	r3, [r7, #24]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d00f      	beq.n	800d6de <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800d6c4:	69fb      	ldr	r3, [r7, #28]
 800d6c6:	b2da      	uxtb	r2, r3
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	3310      	adds	r3, #16
 800d6cc:	4619      	mov	r1, r3
 800d6ce:	4610      	mov	r0, r2
 800d6d0:	f000 f997 	bl	800da02 <ff_cre_syncobj>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d101      	bne.n	800d6de <f_mount+0x7e>
 800d6da:	2302      	movs	r3, #2
 800d6dc:	e01d      	b.n	800d71a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d6de:	68fa      	ldr	r2, [r7, #12]
 800d6e0:	4910      	ldr	r1, [pc, #64]	; (800d724 <f_mount+0xc4>)
 800d6e2:	69fb      	ldr	r3, [r7, #28]
 800d6e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d002      	beq.n	800d6f4 <f_mount+0x94>
 800d6ee:	79fb      	ldrb	r3, [r7, #7]
 800d6f0:	2b01      	cmp	r3, #1
 800d6f2:	d001      	beq.n	800d6f8 <f_mount+0x98>
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	e010      	b.n	800d71a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d6f8:	f107 010c 	add.w	r1, r7, #12
 800d6fc:	f107 0308 	add.w	r3, r7, #8
 800d700:	2200      	movs	r2, #0
 800d702:	4618      	mov	r0, r3
 800d704:	f7ff fd10 	bl	800d128 <find_volume>
 800d708:	4603      	mov	r3, r0
 800d70a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	7dfa      	ldrb	r2, [r7, #23]
 800d710:	4611      	mov	r1, r2
 800d712:	4618      	mov	r0, r3
 800d714:	f7fe f9e5 	bl	800bae2 <unlock_fs>
 800d718:	7dfb      	ldrb	r3, [r7, #23]
}
 800d71a:	4618      	mov	r0, r3
 800d71c:	3720      	adds	r7, #32
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}
 800d722:	bf00      	nop
 800d724:	2000076c 	.word	0x2000076c

0800d728 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b086      	sub	sp, #24
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
 800d730:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d101      	bne.n	800d73c <f_opendir+0x14>
 800d738:	2309      	movs	r3, #9
 800d73a:	e07f      	b.n	800d83c <f_opendir+0x114>

	/* Get logical drive */
	obj = &dp->obj;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800d740:	f107 0108 	add.w	r1, r7, #8
 800d744:	463b      	mov	r3, r7
 800d746:	2200      	movs	r2, #0
 800d748:	4618      	mov	r0, r3
 800d74a:	f7ff fced 	bl	800d128 <find_volume>
 800d74e:	4603      	mov	r3, r0
 800d750:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d752:	7dfb      	ldrb	r3, [r7, #23]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d164      	bne.n	800d822 <f_opendir+0xfa>
		obj->fs = fs;
 800d758:	68ba      	ldr	r2, [r7, #8]
 800d75a:	693b      	ldr	r3, [r7, #16]
 800d75c:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 800d75e:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d762:	f000 f99a 	bl	800da9a <ff_memalloc>
 800d766:	60f8      	str	r0, [r7, #12]
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d106      	bne.n	800d77c <f_opendir+0x54>
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	2111      	movs	r1, #17
 800d772:	4618      	mov	r0, r3
 800d774:	f7fe f9b5 	bl	800bae2 <unlock_fs>
 800d778:	2311      	movs	r3, #17
 800d77a:	e05f      	b.n	800d83c <f_opendir+0x114>
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	68fa      	ldr	r2, [r7, #12]
 800d780:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	4619      	mov	r1, r3
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f7ff fbc2 	bl	800cf10 <follow_path>
 800d78c:	4603      	mov	r3, r0
 800d78e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800d790:	7dfb      	ldrb	r3, [r7, #23]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d13d      	bne.n	800d812 <f_opendir+0xea>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d79c:	b25b      	sxtb	r3, r3
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	db12      	blt.n	800d7c8 <f_opendir+0xa0>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800d7a2:	693b      	ldr	r3, [r7, #16]
 800d7a4:	799b      	ldrb	r3, [r3, #6]
 800d7a6:	f003 0310 	and.w	r3, r3, #16
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d00a      	beq.n	800d7c4 <f_opendir+0x9c>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800d7ae:	68ba      	ldr	r2, [r7, #8]
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6a1b      	ldr	r3, [r3, #32]
 800d7b4:	4619      	mov	r1, r3
 800d7b6:	4610      	mov	r0, r2
 800d7b8:	f7fe fe98 	bl	800c4ec <ld_clust>
 800d7bc:	4602      	mov	r2, r0
 800d7be:	693b      	ldr	r3, [r7, #16]
 800d7c0:	609a      	str	r2, [r3, #8]
 800d7c2:	e001      	b.n	800d7c8 <f_opendir+0xa0>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800d7c4:	2305      	movs	r3, #5
 800d7c6:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800d7c8:	7dfb      	ldrb	r3, [r7, #23]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d121      	bne.n	800d812 <f_opendir+0xea>
				obj->id = fs->id;
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	88da      	ldrh	r2, [r3, #6]
 800d7d2:	693b      	ldr	r3, [r7, #16]
 800d7d4:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800d7d6:	2100      	movs	r1, #0
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f7fe fd47 	bl	800c26c <dir_sdi>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800d7e2:	7dfb      	ldrb	r3, [r7, #23]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d114      	bne.n	800d812 <f_opendir+0xea>
					if (obj->sclust) {
 800d7e8:	693b      	ldr	r3, [r7, #16]
 800d7ea:	689b      	ldr	r3, [r3, #8]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d00d      	beq.n	800d80c <f_opendir+0xe4>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800d7f0:	2100      	movs	r1, #0
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f7fe f990 	bl	800bb18 <inc_lock>
 800d7f8:	4602      	mov	r2, r0
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800d7fe:	693b      	ldr	r3, [r7, #16]
 800d800:	691b      	ldr	r3, [r3, #16]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d105      	bne.n	800d812 <f_opendir+0xea>
 800d806:	2312      	movs	r3, #18
 800d808:	75fb      	strb	r3, [r7, #23]
 800d80a:	e002      	b.n	800d812 <f_opendir+0xea>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800d80c:	693b      	ldr	r3, [r7, #16]
 800d80e:	2200      	movs	r2, #0
 800d810:	611a      	str	r2, [r3, #16]
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 800d812:	68f8      	ldr	r0, [r7, #12]
 800d814:	f000 f94d 	bl	800dab2 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800d818:	7dfb      	ldrb	r3, [r7, #23]
 800d81a:	2b04      	cmp	r3, #4
 800d81c:	d101      	bne.n	800d822 <f_opendir+0xfa>
 800d81e:	2305      	movs	r3, #5
 800d820:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800d822:	7dfb      	ldrb	r3, [r7, #23]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d002      	beq.n	800d82e <f_opendir+0x106>
 800d828:	693b      	ldr	r3, [r7, #16]
 800d82a:	2200      	movs	r2, #0
 800d82c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	7dfa      	ldrb	r2, [r7, #23]
 800d832:	4611      	mov	r1, r2
 800d834:	4618      	mov	r0, r3
 800d836:	f7fe f954 	bl	800bae2 <unlock_fs>
 800d83a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	3718      	adds	r7, #24
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}

0800d844 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b084      	sub	sp, #16
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f107 0208 	add.w	r2, r7, #8
 800d852:	4611      	mov	r1, r2
 800d854:	4618      	mov	r0, r3
 800d856:	f7ff febb 	bl	800d5d0 <validate>
 800d85a:	4603      	mov	r3, r0
 800d85c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d85e:	7bfb      	ldrb	r3, [r7, #15]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d115      	bne.n	800d890 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	691b      	ldr	r3, [r3, #16]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d006      	beq.n	800d87a <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	691b      	ldr	r3, [r3, #16]
 800d870:	4618      	mov	r0, r3
 800d872:	f7fe f9df 	bl	800bc34 <dec_lock>
 800d876:	4603      	mov	r3, r0
 800d878:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800d87a:	7bfb      	ldrb	r3, [r7, #15]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d102      	bne.n	800d886 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2200      	movs	r2, #0
 800d884:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	2100      	movs	r1, #0
 800d88a:	4618      	mov	r0, r3
 800d88c:	f7fe f929 	bl	800bae2 <unlock_fs>
#endif
	}
	return res;
 800d890:	7bfb      	ldrb	r3, [r7, #15]
}
 800d892:	4618      	mov	r0, r3
 800d894:	3710      	adds	r7, #16
 800d896:	46bd      	mov	sp, r7
 800d898:	bd80      	pop	{r7, pc}

0800d89a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d89a:	b580      	push	{r7, lr}
 800d89c:	b086      	sub	sp, #24
 800d89e:	af00      	add	r7, sp, #0
 800d8a0:	6078      	str	r0, [r7, #4]
 800d8a2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f107 020c 	add.w	r2, r7, #12
 800d8aa:	4611      	mov	r1, r2
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f7ff fe8f 	bl	800d5d0 <validate>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d8b6:	7dfb      	ldrb	r3, [r7, #23]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d13b      	bne.n	800d934 <f_readdir+0x9a>
		if (!fno) {
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d106      	bne.n	800d8d0 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800d8c2:	2100      	movs	r1, #0
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	f7fe fcd1 	bl	800c26c <dir_sdi>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	75fb      	strb	r3, [r7, #23]
 800d8ce:	e031      	b.n	800d934 <f_readdir+0x9a>
		} else {
			INIT_NAMBUF(fs);
 800d8d0:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d8d4:	f000 f8e1 	bl	800da9a <ff_memalloc>
 800d8d8:	6138      	str	r0, [r7, #16]
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d106      	bne.n	800d8ee <f_readdir+0x54>
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	2111      	movs	r1, #17
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	f7fe f8fc 	bl	800bae2 <unlock_fs>
 800d8ea:	2311      	movs	r3, #17
 800d8ec:	e029      	b.n	800d942 <f_readdir+0xa8>
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	693a      	ldr	r2, [r7, #16]
 800d8f2:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 800d8f4:	2100      	movs	r1, #0
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f7fe ff0d 	bl	800c716 <dir_read>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800d900:	7dfb      	ldrb	r3, [r7, #23]
 800d902:	2b04      	cmp	r3, #4
 800d904:	d101      	bne.n	800d90a <f_readdir+0x70>
 800d906:	2300      	movs	r3, #0
 800d908:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 800d90a:	7dfb      	ldrb	r3, [r7, #23]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d10e      	bne.n	800d92e <f_readdir+0x94>
				get_fileinfo(dp, fno);		/* Get the object information */
 800d910:	6839      	ldr	r1, [r7, #0]
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	f7ff f866 	bl	800c9e4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800d918:	2100      	movs	r1, #0
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	f7fe fd21 	bl	800c362 <dir_next>
 800d920:	4603      	mov	r3, r0
 800d922:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800d924:	7dfb      	ldrb	r3, [r7, #23]
 800d926:	2b04      	cmp	r3, #4
 800d928:	d101      	bne.n	800d92e <f_readdir+0x94>
 800d92a:	2300      	movs	r3, #0
 800d92c:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 800d92e:	6938      	ldr	r0, [r7, #16]
 800d930:	f000 f8bf 	bl	800dab2 <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	7dfa      	ldrb	r2, [r7, #23]
 800d938:	4611      	mov	r1, r2
 800d93a:	4618      	mov	r0, r3
 800d93c:	f7fe f8d1 	bl	800bae2 <unlock_fs>
 800d940:	7dfb      	ldrb	r3, [r7, #23]
}
 800d942:	4618      	mov	r0, r3
 800d944:	3718      	adds	r7, #24
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}
	...

0800d94c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d94c:	b480      	push	{r7}
 800d94e:	b087      	sub	sp, #28
 800d950:	af00      	add	r7, sp, #0
 800d952:	60f8      	str	r0, [r7, #12]
 800d954:	60b9      	str	r1, [r7, #8]
 800d956:	4613      	mov	r3, r2
 800d958:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d95a:	2301      	movs	r3, #1
 800d95c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d95e:	2300      	movs	r3, #0
 800d960:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d962:	4b1f      	ldr	r3, [pc, #124]	; (800d9e0 <FATFS_LinkDriverEx+0x94>)
 800d964:	7b9b      	ldrb	r3, [r3, #14]
 800d966:	b2db      	uxtb	r3, r3
 800d968:	2b01      	cmp	r3, #1
 800d96a:	d831      	bhi.n	800d9d0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d96c:	4b1c      	ldr	r3, [pc, #112]	; (800d9e0 <FATFS_LinkDriverEx+0x94>)
 800d96e:	7b9b      	ldrb	r3, [r3, #14]
 800d970:	b2db      	uxtb	r3, r3
 800d972:	461a      	mov	r2, r3
 800d974:	4b1a      	ldr	r3, [pc, #104]	; (800d9e0 <FATFS_LinkDriverEx+0x94>)
 800d976:	2100      	movs	r1, #0
 800d978:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d97a:	4b19      	ldr	r3, [pc, #100]	; (800d9e0 <FATFS_LinkDriverEx+0x94>)
 800d97c:	7b9b      	ldrb	r3, [r3, #14]
 800d97e:	b2db      	uxtb	r3, r3
 800d980:	4a17      	ldr	r2, [pc, #92]	; (800d9e0 <FATFS_LinkDriverEx+0x94>)
 800d982:	009b      	lsls	r3, r3, #2
 800d984:	4413      	add	r3, r2
 800d986:	68fa      	ldr	r2, [r7, #12]
 800d988:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d98a:	4b15      	ldr	r3, [pc, #84]	; (800d9e0 <FATFS_LinkDriverEx+0x94>)
 800d98c:	7b9b      	ldrb	r3, [r3, #14]
 800d98e:	b2db      	uxtb	r3, r3
 800d990:	461a      	mov	r2, r3
 800d992:	4b13      	ldr	r3, [pc, #76]	; (800d9e0 <FATFS_LinkDriverEx+0x94>)
 800d994:	4413      	add	r3, r2
 800d996:	79fa      	ldrb	r2, [r7, #7]
 800d998:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 800d99a:	4b11      	ldr	r3, [pc, #68]	; (800d9e0 <FATFS_LinkDriverEx+0x94>)
 800d99c:	7b9b      	ldrb	r3, [r3, #14]
 800d99e:	b2db      	uxtb	r3, r3
 800d9a0:	1c5a      	adds	r2, r3, #1
 800d9a2:	b2d1      	uxtb	r1, r2
 800d9a4:	4a0e      	ldr	r2, [pc, #56]	; (800d9e0 <FATFS_LinkDriverEx+0x94>)
 800d9a6:	7391      	strb	r1, [r2, #14]
 800d9a8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d9aa:	7dbb      	ldrb	r3, [r7, #22]
 800d9ac:	3330      	adds	r3, #48	; 0x30
 800d9ae:	b2da      	uxtb	r2, r3
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	3301      	adds	r3, #1
 800d9b8:	223a      	movs	r2, #58	; 0x3a
 800d9ba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	3302      	adds	r3, #2
 800d9c0:	222f      	movs	r2, #47	; 0x2f
 800d9c2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d9c4:	68bb      	ldr	r3, [r7, #8]
 800d9c6:	3303      	adds	r3, #3
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d9d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	371c      	adds	r7, #28
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9dc:	4770      	bx	lr
 800d9de:	bf00      	nop
 800d9e0:	20000798 	.word	0x20000798

0800d9e4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b082      	sub	sp, #8
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
 800d9ec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	6839      	ldr	r1, [r7, #0]
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f7ff ffaa 	bl	800d94c <FATFS_LinkDriverEx>
 800d9f8:	4603      	mov	r3, r0
}
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	3708      	adds	r7, #8
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}

0800da02 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800da02:	b580      	push	{r7, lr}
 800da04:	b086      	sub	sp, #24
 800da06:	af00      	add	r7, sp, #0
 800da08:	4603      	mov	r3, r0
 800da0a:	6039      	str	r1, [r7, #0]
 800da0c:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800da0e:	2300      	movs	r3, #0
 800da10:	60fb      	str	r3, [r7, #12]
 800da12:	2300      	movs	r3, #0
 800da14:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800da16:	f107 030c 	add.w	r3, r7, #12
 800da1a:	2101      	movs	r1, #1
 800da1c:	4618      	mov	r0, r3
 800da1e:	f000 f9c6 	bl	800ddae <osSemaphoreCreate>
 800da22:	4602      	mov	r2, r0
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	bf14      	ite	ne
 800da30:	2301      	movne	r3, #1
 800da32:	2300      	moveq	r3, #0
 800da34:	b2db      	uxtb	r3, r3
 800da36:	617b      	str	r3, [r7, #20]

    return ret;
 800da38:	697b      	ldr	r3, [r7, #20]
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	3718      	adds	r7, #24
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}

0800da42 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800da42:	b580      	push	{r7, lr}
 800da44:	b082      	sub	sp, #8
 800da46:	af00      	add	r7, sp, #0
 800da48:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800da4a:	6878      	ldr	r0, [r7, #4]
 800da4c:	f000 fa72 	bl	800df34 <osSemaphoreDelete>
#endif
    return 1;
 800da50:	2301      	movs	r3, #1
}
 800da52:	4618      	mov	r0, r3
 800da54:	3708      	adds	r7, #8
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}

0800da5a <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800da5a:	b580      	push	{r7, lr}
 800da5c:	b084      	sub	sp, #16
 800da5e:	af00      	add	r7, sp, #0
 800da60:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800da62:	2300      	movs	r3, #0
 800da64:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800da66:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800da6a:	6878      	ldr	r0, [r7, #4]
 800da6c:	f000 f9de 	bl	800de2c <osSemaphoreWait>
 800da70:	4603      	mov	r3, r0
 800da72:	2b00      	cmp	r3, #0
 800da74:	d101      	bne.n	800da7a <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800da76:	2301      	movs	r3, #1
 800da78:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800da7a:	68fb      	ldr	r3, [r7, #12]
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	3710      	adds	r7, #16
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}

0800da84 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b082      	sub	sp, #8
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f000 fa1b 	bl	800dec8 <osSemaphoreRelease>
#endif
}
 800da92:	bf00      	nop
 800da94:	3708      	adds	r7, #8
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}

0800da9a <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800da9a:	b580      	push	{r7, lr}
 800da9c:	b082      	sub	sp, #8
 800da9e:	af00      	add	r7, sp, #0
 800daa0:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	f002 ff1f 	bl	80108e6 <pvPortMalloc>
 800daa8:	4603      	mov	r3, r0
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3708      	adds	r7, #8
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}

0800dab2 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800dab2:	b580      	push	{r7, lr}
 800dab4:	b082      	sub	sp, #8
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f002 ff21 	bl	8010902 <vPortFree>
}
 800dac0:	bf00      	nop
 800dac2:	3708      	adds	r7, #8
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}

0800dac8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800dac8:	b480      	push	{r7}
 800daca:	b085      	sub	sp, #20
 800dacc:	af00      	add	r7, sp, #0
 800dace:	4603      	mov	r3, r0
 800dad0:	6039      	str	r1, [r7, #0]
 800dad2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800dad4:	88fb      	ldrh	r3, [r7, #6]
 800dad6:	2b7f      	cmp	r3, #127	; 0x7f
 800dad8:	d802      	bhi.n	800dae0 <ff_convert+0x18>
		c = chr;
 800dada:	88fb      	ldrh	r3, [r7, #6]
 800dadc:	81fb      	strh	r3, [r7, #14]
 800dade:	e025      	b.n	800db2c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d00b      	beq.n	800dafe <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800dae6:	88fb      	ldrh	r3, [r7, #6]
 800dae8:	2bff      	cmp	r3, #255	; 0xff
 800daea:	d805      	bhi.n	800daf8 <ff_convert+0x30>
 800daec:	88fb      	ldrh	r3, [r7, #6]
 800daee:	3b80      	subs	r3, #128	; 0x80
 800daf0:	4a12      	ldr	r2, [pc, #72]	; (800db3c <ff_convert+0x74>)
 800daf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800daf6:	e000      	b.n	800dafa <ff_convert+0x32>
 800daf8:	2300      	movs	r3, #0
 800dafa:	81fb      	strh	r3, [r7, #14]
 800dafc:	e016      	b.n	800db2c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800dafe:	2300      	movs	r3, #0
 800db00:	81fb      	strh	r3, [r7, #14]
 800db02:	e009      	b.n	800db18 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800db04:	89fb      	ldrh	r3, [r7, #14]
 800db06:	4a0d      	ldr	r2, [pc, #52]	; (800db3c <ff_convert+0x74>)
 800db08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db0c:	88fa      	ldrh	r2, [r7, #6]
 800db0e:	429a      	cmp	r2, r3
 800db10:	d006      	beq.n	800db20 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800db12:	89fb      	ldrh	r3, [r7, #14]
 800db14:	3301      	adds	r3, #1
 800db16:	81fb      	strh	r3, [r7, #14]
 800db18:	89fb      	ldrh	r3, [r7, #14]
 800db1a:	2b7f      	cmp	r3, #127	; 0x7f
 800db1c:	d9f2      	bls.n	800db04 <ff_convert+0x3c>
 800db1e:	e000      	b.n	800db22 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800db20:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800db22:	89fb      	ldrh	r3, [r7, #14]
 800db24:	3380      	adds	r3, #128	; 0x80
 800db26:	b29b      	uxth	r3, r3
 800db28:	b2db      	uxtb	r3, r3
 800db2a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800db2c:	89fb      	ldrh	r3, [r7, #14]
}
 800db2e:	4618      	mov	r0, r3
 800db30:	3714      	adds	r7, #20
 800db32:	46bd      	mov	sp, r7
 800db34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db38:	4770      	bx	lr
 800db3a:	bf00      	nop
 800db3c:	08013ae8 	.word	0x08013ae8

0800db40 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800db40:	b480      	push	{r7}
 800db42:	b087      	sub	sp, #28
 800db44:	af00      	add	r7, sp, #0
 800db46:	4603      	mov	r3, r0
 800db48:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800db4a:	88fb      	ldrh	r3, [r7, #6]
 800db4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db50:	d201      	bcs.n	800db56 <ff_wtoupper+0x16>
 800db52:	4b3e      	ldr	r3, [pc, #248]	; (800dc4c <ff_wtoupper+0x10c>)
 800db54:	e000      	b.n	800db58 <ff_wtoupper+0x18>
 800db56:	4b3e      	ldr	r3, [pc, #248]	; (800dc50 <ff_wtoupper+0x110>)
 800db58:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	1c9a      	adds	r2, r3, #2
 800db5e:	617a      	str	r2, [r7, #20]
 800db60:	881b      	ldrh	r3, [r3, #0]
 800db62:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800db64:	8a7b      	ldrh	r3, [r7, #18]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d068      	beq.n	800dc3c <ff_wtoupper+0xfc>
 800db6a:	88fa      	ldrh	r2, [r7, #6]
 800db6c:	8a7b      	ldrh	r3, [r7, #18]
 800db6e:	429a      	cmp	r2, r3
 800db70:	d364      	bcc.n	800dc3c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800db72:	697b      	ldr	r3, [r7, #20]
 800db74:	1c9a      	adds	r2, r3, #2
 800db76:	617a      	str	r2, [r7, #20]
 800db78:	881b      	ldrh	r3, [r3, #0]
 800db7a:	823b      	strh	r3, [r7, #16]
 800db7c:	8a3b      	ldrh	r3, [r7, #16]
 800db7e:	0a1b      	lsrs	r3, r3, #8
 800db80:	81fb      	strh	r3, [r7, #14]
 800db82:	8a3b      	ldrh	r3, [r7, #16]
 800db84:	b2db      	uxtb	r3, r3
 800db86:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800db88:	88fa      	ldrh	r2, [r7, #6]
 800db8a:	8a79      	ldrh	r1, [r7, #18]
 800db8c:	8a3b      	ldrh	r3, [r7, #16]
 800db8e:	440b      	add	r3, r1
 800db90:	429a      	cmp	r2, r3
 800db92:	da49      	bge.n	800dc28 <ff_wtoupper+0xe8>
			switch (cmd) {
 800db94:	89fb      	ldrh	r3, [r7, #14]
 800db96:	2b08      	cmp	r3, #8
 800db98:	d84f      	bhi.n	800dc3a <ff_wtoupper+0xfa>
 800db9a:	a201      	add	r2, pc, #4	; (adr r2, 800dba0 <ff_wtoupper+0x60>)
 800db9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dba0:	0800dbc5 	.word	0x0800dbc5
 800dba4:	0800dbd7 	.word	0x0800dbd7
 800dba8:	0800dbed 	.word	0x0800dbed
 800dbac:	0800dbf5 	.word	0x0800dbf5
 800dbb0:	0800dbfd 	.word	0x0800dbfd
 800dbb4:	0800dc05 	.word	0x0800dc05
 800dbb8:	0800dc0d 	.word	0x0800dc0d
 800dbbc:	0800dc15 	.word	0x0800dc15
 800dbc0:	0800dc1d 	.word	0x0800dc1d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800dbc4:	88fa      	ldrh	r2, [r7, #6]
 800dbc6:	8a7b      	ldrh	r3, [r7, #18]
 800dbc8:	1ad3      	subs	r3, r2, r3
 800dbca:	005b      	lsls	r3, r3, #1
 800dbcc:	697a      	ldr	r2, [r7, #20]
 800dbce:	4413      	add	r3, r2
 800dbd0:	881b      	ldrh	r3, [r3, #0]
 800dbd2:	80fb      	strh	r3, [r7, #6]
 800dbd4:	e027      	b.n	800dc26 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800dbd6:	88fa      	ldrh	r2, [r7, #6]
 800dbd8:	8a7b      	ldrh	r3, [r7, #18]
 800dbda:	1ad3      	subs	r3, r2, r3
 800dbdc:	b29b      	uxth	r3, r3
 800dbde:	f003 0301 	and.w	r3, r3, #1
 800dbe2:	b29b      	uxth	r3, r3
 800dbe4:	88fa      	ldrh	r2, [r7, #6]
 800dbe6:	1ad3      	subs	r3, r2, r3
 800dbe8:	80fb      	strh	r3, [r7, #6]
 800dbea:	e01c      	b.n	800dc26 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800dbec:	88fb      	ldrh	r3, [r7, #6]
 800dbee:	3b10      	subs	r3, #16
 800dbf0:	80fb      	strh	r3, [r7, #6]
 800dbf2:	e018      	b.n	800dc26 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800dbf4:	88fb      	ldrh	r3, [r7, #6]
 800dbf6:	3b20      	subs	r3, #32
 800dbf8:	80fb      	strh	r3, [r7, #6]
 800dbfa:	e014      	b.n	800dc26 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800dbfc:	88fb      	ldrh	r3, [r7, #6]
 800dbfe:	3b30      	subs	r3, #48	; 0x30
 800dc00:	80fb      	strh	r3, [r7, #6]
 800dc02:	e010      	b.n	800dc26 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800dc04:	88fb      	ldrh	r3, [r7, #6]
 800dc06:	3b1a      	subs	r3, #26
 800dc08:	80fb      	strh	r3, [r7, #6]
 800dc0a:	e00c      	b.n	800dc26 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800dc0c:	88fb      	ldrh	r3, [r7, #6]
 800dc0e:	3308      	adds	r3, #8
 800dc10:	80fb      	strh	r3, [r7, #6]
 800dc12:	e008      	b.n	800dc26 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800dc14:	88fb      	ldrh	r3, [r7, #6]
 800dc16:	3b50      	subs	r3, #80	; 0x50
 800dc18:	80fb      	strh	r3, [r7, #6]
 800dc1a:	e004      	b.n	800dc26 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800dc1c:	88fb      	ldrh	r3, [r7, #6]
 800dc1e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800dc22:	80fb      	strh	r3, [r7, #6]
 800dc24:	bf00      	nop
			}
			break;
 800dc26:	e008      	b.n	800dc3a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800dc28:	89fb      	ldrh	r3, [r7, #14]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d195      	bne.n	800db5a <ff_wtoupper+0x1a>
 800dc2e:	8a3b      	ldrh	r3, [r7, #16]
 800dc30:	005b      	lsls	r3, r3, #1
 800dc32:	697a      	ldr	r2, [r7, #20]
 800dc34:	4413      	add	r3, r2
 800dc36:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800dc38:	e78f      	b.n	800db5a <ff_wtoupper+0x1a>
			break;
 800dc3a:	bf00      	nop
	}

	return chr;
 800dc3c:	88fb      	ldrh	r3, [r7, #6]
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	371c      	adds	r7, #28
 800dc42:	46bd      	mov	sp, r7
 800dc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc48:	4770      	bx	lr
 800dc4a:	bf00      	nop
 800dc4c:	08013be8 	.word	0x08013be8
 800dc50:	08013ddc 	.word	0x08013ddc

0800dc54 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800dc54:	b480      	push	{r7}
 800dc56:	b085      	sub	sp, #20
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800dc62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dc66:	2b84      	cmp	r3, #132	; 0x84
 800dc68:	d005      	beq.n	800dc76 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800dc6a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	4413      	add	r3, r2
 800dc72:	3303      	adds	r3, #3
 800dc74:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800dc76:	68fb      	ldr	r3, [r7, #12]
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3714      	adds	r7, #20
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc82:	4770      	bx	lr

0800dc84 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800dc84:	b480      	push	{r7}
 800dc86:	b083      	sub	sp, #12
 800dc88:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc8a:	f3ef 8305 	mrs	r3, IPSR
 800dc8e:	607b      	str	r3, [r7, #4]
  return(result);
 800dc90:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	bf14      	ite	ne
 800dc96:	2301      	movne	r3, #1
 800dc98:	2300      	moveq	r3, #0
 800dc9a:	b2db      	uxtb	r3, r3
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	370c      	adds	r7, #12
 800dca0:	46bd      	mov	sp, r7
 800dca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca6:	4770      	bx	lr

0800dca8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800dcac:	f001 fcb6 	bl	800f61c <vTaskStartScheduler>
  
  return osOK;
 800dcb0:	2300      	movs	r3, #0
}
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	bd80      	pop	{r7, pc}

0800dcb6 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800dcb6:	b580      	push	{r7, lr}
 800dcb8:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800dcba:	f002 f909 	bl	800fed0 <xTaskGetSchedulerState>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	2b01      	cmp	r3, #1
 800dcc2:	d101      	bne.n	800dcc8 <osKernelRunning+0x12>
    return 0;
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	e000      	b.n	800dcca <osKernelRunning+0x14>
  else
    return 1;
 800dcc8:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	bd80      	pop	{r7, pc}

0800dcce <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800dcce:	b580      	push	{r7, lr}
 800dcd0:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800dcd2:	f7ff ffd7 	bl	800dc84 <inHandlerMode>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d003      	beq.n	800dce4 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800dcdc:	f001 fdbe 	bl	800f85c <xTaskGetTickCountFromISR>
 800dce0:	4603      	mov	r3, r0
 800dce2:	e002      	b.n	800dcea <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800dce4:	f001 fdaa 	bl	800f83c <xTaskGetTickCount>
 800dce8:	4603      	mov	r3, r0
  }
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	bd80      	pop	{r7, pc}

0800dcee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800dcee:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcf0:	b089      	sub	sp, #36	; 0x24
 800dcf2:	af04      	add	r7, sp, #16
 800dcf4:	6078      	str	r0, [r7, #4]
 800dcf6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	695b      	ldr	r3, [r3, #20]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d020      	beq.n	800dd42 <osThreadCreate+0x54>
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	699b      	ldr	r3, [r3, #24]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d01c      	beq.n	800dd42 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	685c      	ldr	r4, [r3, #4]
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681d      	ldr	r5, [r3, #0]
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	691e      	ldr	r6, [r3, #16]
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	f7ff ff9a 	bl	800dc54 <makeFreeRtosPriority>
 800dd20:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	695b      	ldr	r3, [r3, #20]
 800dd26:	687a      	ldr	r2, [r7, #4]
 800dd28:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dd2a:	9202      	str	r2, [sp, #8]
 800dd2c:	9301      	str	r3, [sp, #4]
 800dd2e:	9100      	str	r1, [sp, #0]
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	4632      	mov	r2, r6
 800dd34:	4629      	mov	r1, r5
 800dd36:	4620      	mov	r0, r4
 800dd38:	f001 fa94 	bl	800f264 <xTaskCreateStatic>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	60fb      	str	r3, [r7, #12]
 800dd40:	e01c      	b.n	800dd7c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	685c      	ldr	r4, [r3, #4]
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dd4e:	b29e      	uxth	r6, r3
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800dd56:	4618      	mov	r0, r3
 800dd58:	f7ff ff7c 	bl	800dc54 <makeFreeRtosPriority>
 800dd5c:	4602      	mov	r2, r0
 800dd5e:	f107 030c 	add.w	r3, r7, #12
 800dd62:	9301      	str	r3, [sp, #4]
 800dd64:	9200      	str	r2, [sp, #0]
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	4632      	mov	r2, r6
 800dd6a:	4629      	mov	r1, r5
 800dd6c:	4620      	mov	r0, r4
 800dd6e:	f001 fadc 	bl	800f32a <xTaskCreate>
 800dd72:	4603      	mov	r3, r0
 800dd74:	2b01      	cmp	r3, #1
 800dd76:	d001      	beq.n	800dd7c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	e000      	b.n	800dd7e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
}
 800dd7e:	4618      	mov	r0, r3
 800dd80:	3714      	adds	r7, #20
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dd86 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800dd86:	b580      	push	{r7, lr}
 800dd88:	b084      	sub	sp, #16
 800dd8a:	af00      	add	r7, sp, #0
 800dd8c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d001      	beq.n	800dd9c <osDelay+0x16>
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	e000      	b.n	800dd9e <osDelay+0x18>
 800dd9c:	2301      	movs	r3, #1
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f001 fc06 	bl	800f5b0 <vTaskDelay>
  
  return osOK;
 800dda4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800dda6:	4618      	mov	r0, r3
 800dda8:	3710      	adds	r7, #16
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}

0800ddae <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800ddae:	b580      	push	{r7, lr}
 800ddb0:	b086      	sub	sp, #24
 800ddb2:	af02      	add	r7, sp, #8
 800ddb4:	6078      	str	r0, [r7, #4]
 800ddb6:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	685b      	ldr	r3, [r3, #4]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d016      	beq.n	800ddee <osSemaphoreCreate+0x40>
    if (count == 1) {
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	2b01      	cmp	r3, #1
 800ddc4:	d10a      	bne.n	800dddc <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	685b      	ldr	r3, [r3, #4]
 800ddca:	2203      	movs	r2, #3
 800ddcc:	9200      	str	r2, [sp, #0]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	2100      	movs	r1, #0
 800ddd2:	2001      	movs	r0, #1
 800ddd4:	f000 fabc 	bl	800e350 <xQueueGenericCreateStatic>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	e023      	b.n	800de24 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 800dddc:	6838      	ldr	r0, [r7, #0]
 800ddde:	6839      	ldr	r1, [r7, #0]
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	685b      	ldr	r3, [r3, #4]
 800dde4:	461a      	mov	r2, r3
 800dde6:	f000 fb96 	bl	800e516 <xQueueCreateCountingSemaphoreStatic>
 800ddea:	4603      	mov	r3, r0
 800ddec:	e01a      	b.n	800de24 <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	2b01      	cmp	r3, #1
 800ddf2:	d110      	bne.n	800de16 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 800ddf4:	2203      	movs	r2, #3
 800ddf6:	2100      	movs	r1, #0
 800ddf8:	2001      	movs	r0, #1
 800ddfa:	f000 fb2b 	bl	800e454 <xQueueGenericCreate>
 800ddfe:	60f8      	str	r0, [r7, #12]
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d005      	beq.n	800de12 <osSemaphoreCreate+0x64>
 800de06:	2300      	movs	r3, #0
 800de08:	2200      	movs	r2, #0
 800de0a:	2100      	movs	r1, #0
 800de0c:	68f8      	ldr	r0, [r7, #12]
 800de0e:	f000 fbf5 	bl	800e5fc <xQueueGenericSend>
      return sema;
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	e006      	b.n	800de24 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	683a      	ldr	r2, [r7, #0]
 800de1a:	4611      	mov	r1, r2
 800de1c:	4618      	mov	r0, r3
 800de1e:	f000 fbb5 	bl	800e58c <xQueueCreateCountingSemaphore>
 800de22:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 800de24:	4618      	mov	r0, r3
 800de26:	3710      	adds	r7, #16
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}

0800de2c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b084      	sub	sp, #16
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
 800de34:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800de36:	2300      	movs	r3, #0
 800de38:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d101      	bne.n	800de44 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800de40:	2380      	movs	r3, #128	; 0x80
 800de42:	e03a      	b.n	800deba <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800de44:	2300      	movs	r3, #0
 800de46:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800de48:	683b      	ldr	r3, [r7, #0]
 800de4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de4e:	d103      	bne.n	800de58 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800de50:	f04f 33ff 	mov.w	r3, #4294967295
 800de54:	60fb      	str	r3, [r7, #12]
 800de56:	e009      	b.n	800de6c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d006      	beq.n	800de6c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d101      	bne.n	800de6c <osSemaphoreWait+0x40>
      ticks = 1;
 800de68:	2301      	movs	r3, #1
 800de6a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800de6c:	f7ff ff0a 	bl	800dc84 <inHandlerMode>
 800de70:	4603      	mov	r3, r0
 800de72:	2b00      	cmp	r3, #0
 800de74:	d017      	beq.n	800dea6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800de76:	f107 0308 	add.w	r3, r7, #8
 800de7a:	461a      	mov	r2, r3
 800de7c:	2100      	movs	r1, #0
 800de7e:	6878      	ldr	r0, [r7, #4]
 800de80:	f000 fff2 	bl	800ee68 <xQueueReceiveFromISR>
 800de84:	4603      	mov	r3, r0
 800de86:	2b01      	cmp	r3, #1
 800de88:	d001      	beq.n	800de8e <osSemaphoreWait+0x62>
      return osErrorOS;
 800de8a:	23ff      	movs	r3, #255	; 0xff
 800de8c:	e015      	b.n	800deba <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800de8e:	68bb      	ldr	r3, [r7, #8]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d011      	beq.n	800deb8 <osSemaphoreWait+0x8c>
 800de94:	4b0b      	ldr	r3, [pc, #44]	; (800dec4 <osSemaphoreWait+0x98>)
 800de96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de9a:	601a      	str	r2, [r3, #0]
 800de9c:	f3bf 8f4f 	dsb	sy
 800dea0:	f3bf 8f6f 	isb	sy
 800dea4:	e008      	b.n	800deb8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800dea6:	68f9      	ldr	r1, [r7, #12]
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f000 fec9 	bl	800ec40 <xQueueSemaphoreTake>
 800deae:	4603      	mov	r3, r0
 800deb0:	2b01      	cmp	r3, #1
 800deb2:	d001      	beq.n	800deb8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800deb4:	23ff      	movs	r3, #255	; 0xff
 800deb6:	e000      	b.n	800deba <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800deb8:	2300      	movs	r3, #0
}
 800deba:	4618      	mov	r0, r3
 800debc:	3710      	adds	r7, #16
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}
 800dec2:	bf00      	nop
 800dec4:	e000ed04 	.word	0xe000ed04

0800dec8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b084      	sub	sp, #16
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800ded0:	2300      	movs	r3, #0
 800ded2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800ded4:	2300      	movs	r3, #0
 800ded6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800ded8:	f7ff fed4 	bl	800dc84 <inHandlerMode>
 800dedc:	4603      	mov	r3, r0
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d016      	beq.n	800df10 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800dee2:	f107 0308 	add.w	r3, r7, #8
 800dee6:	4619      	mov	r1, r3
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f000 fd2d 	bl	800e948 <xQueueGiveFromISR>
 800deee:	4603      	mov	r3, r0
 800def0:	2b01      	cmp	r3, #1
 800def2:	d001      	beq.n	800def8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800def4:	23ff      	movs	r3, #255	; 0xff
 800def6:	e017      	b.n	800df28 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800def8:	68bb      	ldr	r3, [r7, #8]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d013      	beq.n	800df26 <osSemaphoreRelease+0x5e>
 800defe:	4b0c      	ldr	r3, [pc, #48]	; (800df30 <osSemaphoreRelease+0x68>)
 800df00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df04:	601a      	str	r2, [r3, #0]
 800df06:	f3bf 8f4f 	dsb	sy
 800df0a:	f3bf 8f6f 	isb	sy
 800df0e:	e00a      	b.n	800df26 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800df10:	2300      	movs	r3, #0
 800df12:	2200      	movs	r2, #0
 800df14:	2100      	movs	r1, #0
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f000 fb70 	bl	800e5fc <xQueueGenericSend>
 800df1c:	4603      	mov	r3, r0
 800df1e:	2b01      	cmp	r3, #1
 800df20:	d001      	beq.n	800df26 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800df22:	23ff      	movs	r3, #255	; 0xff
 800df24:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800df26:	68fb      	ldr	r3, [r7, #12]
}
 800df28:	4618      	mov	r0, r3
 800df2a:	3710      	adds	r7, #16
 800df2c:	46bd      	mov	sp, r7
 800df2e:	bd80      	pop	{r7, pc}
 800df30:	e000ed04 	.word	0xe000ed04

0800df34 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b082      	sub	sp, #8
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800df3c:	f7ff fea2 	bl	800dc84 <inHandlerMode>
 800df40:	4603      	mov	r3, r0
 800df42:	2b00      	cmp	r3, #0
 800df44:	d001      	beq.n	800df4a <osSemaphoreDelete+0x16>
    return osErrorISR;
 800df46:	2382      	movs	r3, #130	; 0x82
 800df48:	e003      	b.n	800df52 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	f001 f812 	bl	800ef74 <vQueueDelete>

  return osOK; 
 800df50:	2300      	movs	r3, #0
}
 800df52:	4618      	mov	r0, r3
 800df54:	3708      	adds	r7, #8
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}

0800df5a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800df5a:	b590      	push	{r4, r7, lr}
 800df5c:	b085      	sub	sp, #20
 800df5e:	af02      	add	r7, sp, #8
 800df60:	6078      	str	r0, [r7, #4]
 800df62:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	689b      	ldr	r3, [r3, #8]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d011      	beq.n	800df90 <osMessageCreate+0x36>
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	68db      	ldr	r3, [r3, #12]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d00d      	beq.n	800df90 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	6818      	ldr	r0, [r3, #0]
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	6859      	ldr	r1, [r3, #4]
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	689a      	ldr	r2, [r3, #8]
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	68db      	ldr	r3, [r3, #12]
 800df84:	2400      	movs	r4, #0
 800df86:	9400      	str	r4, [sp, #0]
 800df88:	f000 f9e2 	bl	800e350 <xQueueGenericCreateStatic>
 800df8c:	4603      	mov	r3, r0
 800df8e:	e008      	b.n	800dfa2 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	6818      	ldr	r0, [r3, #0]
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	685b      	ldr	r3, [r3, #4]
 800df98:	2200      	movs	r2, #0
 800df9a:	4619      	mov	r1, r3
 800df9c:	f000 fa5a 	bl	800e454 <xQueueGenericCreate>
 800dfa0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	370c      	adds	r7, #12
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd90      	pop	{r4, r7, pc}
	...

0800dfac <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b086      	sub	sp, #24
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	60f8      	str	r0, [r7, #12]
 800dfb4:	60b9      	str	r1, [r7, #8]
 800dfb6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800dfb8:	2300      	movs	r3, #0
 800dfba:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800dfc0:	697b      	ldr	r3, [r7, #20]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d101      	bne.n	800dfca <osMessagePut+0x1e>
    ticks = 1;
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800dfca:	f7ff fe5b 	bl	800dc84 <inHandlerMode>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d018      	beq.n	800e006 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800dfd4:	f107 0210 	add.w	r2, r7, #16
 800dfd8:	f107 0108 	add.w	r1, r7, #8
 800dfdc:	2300      	movs	r3, #0
 800dfde:	68f8      	ldr	r0, [r7, #12]
 800dfe0:	f000 fc12 	bl	800e808 <xQueueGenericSendFromISR>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	2b01      	cmp	r3, #1
 800dfe8:	d001      	beq.n	800dfee <osMessagePut+0x42>
      return osErrorOS;
 800dfea:	23ff      	movs	r3, #255	; 0xff
 800dfec:	e018      	b.n	800e020 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d014      	beq.n	800e01e <osMessagePut+0x72>
 800dff4:	4b0c      	ldr	r3, [pc, #48]	; (800e028 <osMessagePut+0x7c>)
 800dff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dffa:	601a      	str	r2, [r3, #0]
 800dffc:	f3bf 8f4f 	dsb	sy
 800e000:	f3bf 8f6f 	isb	sy
 800e004:	e00b      	b.n	800e01e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800e006:	f107 0108 	add.w	r1, r7, #8
 800e00a:	2300      	movs	r3, #0
 800e00c:	697a      	ldr	r2, [r7, #20]
 800e00e:	68f8      	ldr	r0, [r7, #12]
 800e010:	f000 faf4 	bl	800e5fc <xQueueGenericSend>
 800e014:	4603      	mov	r3, r0
 800e016:	2b01      	cmp	r3, #1
 800e018:	d001      	beq.n	800e01e <osMessagePut+0x72>
      return osErrorOS;
 800e01a:	23ff      	movs	r3, #255	; 0xff
 800e01c:	e000      	b.n	800e020 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800e01e:	2300      	movs	r3, #0
}
 800e020:	4618      	mov	r0, r3
 800e022:	3718      	adds	r7, #24
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}
 800e028:	e000ed04 	.word	0xe000ed04

0800e02c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800e02c:	b590      	push	{r4, r7, lr}
 800e02e:	b08b      	sub	sp, #44	; 0x2c
 800e030:	af00      	add	r7, sp, #0
 800e032:	60f8      	str	r0, [r7, #12]
 800e034:	60b9      	str	r1, [r7, #8]
 800e036:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800e03c:	2300      	movs	r3, #0
 800e03e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d10a      	bne.n	800e05c <osMessageGet+0x30>
    event.status = osErrorParameter;
 800e046:	2380      	movs	r3, #128	; 0x80
 800e048:	617b      	str	r3, [r7, #20]
    return event;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	461c      	mov	r4, r3
 800e04e:	f107 0314 	add.w	r3, r7, #20
 800e052:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e056:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e05a:	e054      	b.n	800e106 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800e05c:	2300      	movs	r3, #0
 800e05e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800e060:	2300      	movs	r3, #0
 800e062:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e06a:	d103      	bne.n	800e074 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800e06c:	f04f 33ff 	mov.w	r3, #4294967295
 800e070:	627b      	str	r3, [r7, #36]	; 0x24
 800e072:	e009      	b.n	800e088 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d006      	beq.n	800e088 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800e07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e080:	2b00      	cmp	r3, #0
 800e082:	d101      	bne.n	800e088 <osMessageGet+0x5c>
      ticks = 1;
 800e084:	2301      	movs	r3, #1
 800e086:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800e088:	f7ff fdfc 	bl	800dc84 <inHandlerMode>
 800e08c:	4603      	mov	r3, r0
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d01c      	beq.n	800e0cc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800e092:	f107 0220 	add.w	r2, r7, #32
 800e096:	f107 0314 	add.w	r3, r7, #20
 800e09a:	3304      	adds	r3, #4
 800e09c:	4619      	mov	r1, r3
 800e09e:	68b8      	ldr	r0, [r7, #8]
 800e0a0:	f000 fee2 	bl	800ee68 <xQueueReceiveFromISR>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	2b01      	cmp	r3, #1
 800e0a8:	d102      	bne.n	800e0b0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800e0aa:	2310      	movs	r3, #16
 800e0ac:	617b      	str	r3, [r7, #20]
 800e0ae:	e001      	b.n	800e0b4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e0b4:	6a3b      	ldr	r3, [r7, #32]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d01d      	beq.n	800e0f6 <osMessageGet+0xca>
 800e0ba:	4b15      	ldr	r3, [pc, #84]	; (800e110 <osMessageGet+0xe4>)
 800e0bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0c0:	601a      	str	r2, [r3, #0]
 800e0c2:	f3bf 8f4f 	dsb	sy
 800e0c6:	f3bf 8f6f 	isb	sy
 800e0ca:	e014      	b.n	800e0f6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800e0cc:	f107 0314 	add.w	r3, r7, #20
 800e0d0:	3304      	adds	r3, #4
 800e0d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0d4:	4619      	mov	r1, r3
 800e0d6:	68b8      	ldr	r0, [r7, #8]
 800e0d8:	f000 fccc 	bl	800ea74 <xQueueReceive>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	2b01      	cmp	r3, #1
 800e0e0:	d102      	bne.n	800e0e8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800e0e2:	2310      	movs	r3, #16
 800e0e4:	617b      	str	r3, [r7, #20]
 800e0e6:	e006      	b.n	800e0f6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800e0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d101      	bne.n	800e0f2 <osMessageGet+0xc6>
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	e000      	b.n	800e0f4 <osMessageGet+0xc8>
 800e0f2:	2340      	movs	r3, #64	; 0x40
 800e0f4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	461c      	mov	r4, r3
 800e0fa:	f107 0314 	add.w	r3, r7, #20
 800e0fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e102:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800e106:	68f8      	ldr	r0, [r7, #12]
 800e108:	372c      	adds	r7, #44	; 0x2c
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd90      	pop	{r4, r7, pc}
 800e10e:	bf00      	nop
 800e110:	e000ed04 	.word	0xe000ed04

0800e114 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e114:	b480      	push	{r7}
 800e116:	b083      	sub	sp, #12
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f103 0208 	add.w	r2, r3, #8
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	f04f 32ff 	mov.w	r2, #4294967295
 800e12c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f103 0208 	add.w	r2, r3, #8
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f103 0208 	add.w	r2, r3, #8
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2200      	movs	r2, #0
 800e146:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e148:	bf00      	nop
 800e14a:	370c      	adds	r7, #12
 800e14c:	46bd      	mov	sp, r7
 800e14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e152:	4770      	bx	lr

0800e154 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e154:	b480      	push	{r7}
 800e156:	b083      	sub	sp, #12
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2200      	movs	r2, #0
 800e160:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e162:	bf00      	nop
 800e164:	370c      	adds	r7, #12
 800e166:	46bd      	mov	sp, r7
 800e168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16c:	4770      	bx	lr

0800e16e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e16e:	b480      	push	{r7}
 800e170:	b085      	sub	sp, #20
 800e172:	af00      	add	r7, sp, #0
 800e174:	6078      	str	r0, [r7, #4]
 800e176:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	685b      	ldr	r3, [r3, #4]
 800e17c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	68fa      	ldr	r2, [r7, #12]
 800e182:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	689a      	ldr	r2, [r3, #8]
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	689b      	ldr	r3, [r3, #8]
 800e190:	683a      	ldr	r2, [r7, #0]
 800e192:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	683a      	ldr	r2, [r7, #0]
 800e198:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	687a      	ldr	r2, [r7, #4]
 800e19e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	1c5a      	adds	r2, r3, #1
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	601a      	str	r2, [r3, #0]
}
 800e1aa:	bf00      	nop
 800e1ac:	3714      	adds	r7, #20
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b4:	4770      	bx	lr

0800e1b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e1b6:	b480      	push	{r7}
 800e1b8:	b085      	sub	sp, #20
 800e1ba:	af00      	add	r7, sp, #0
 800e1bc:	6078      	str	r0, [r7, #4]
 800e1be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e1c0:	683b      	ldr	r3, [r7, #0]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e1c6:	68bb      	ldr	r3, [r7, #8]
 800e1c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1cc:	d103      	bne.n	800e1d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	691b      	ldr	r3, [r3, #16]
 800e1d2:	60fb      	str	r3, [r7, #12]
 800e1d4:	e00c      	b.n	800e1f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	3308      	adds	r3, #8
 800e1da:	60fb      	str	r3, [r7, #12]
 800e1dc:	e002      	b.n	800e1e4 <vListInsert+0x2e>
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	685b      	ldr	r3, [r3, #4]
 800e1e2:	60fb      	str	r3, [r7, #12]
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	685b      	ldr	r3, [r3, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	68ba      	ldr	r2, [r7, #8]
 800e1ec:	429a      	cmp	r2, r3
 800e1ee:	d2f6      	bcs.n	800e1de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	685a      	ldr	r2, [r3, #4]
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	685b      	ldr	r3, [r3, #4]
 800e1fc:	683a      	ldr	r2, [r7, #0]
 800e1fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	68fa      	ldr	r2, [r7, #12]
 800e204:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	683a      	ldr	r2, [r7, #0]
 800e20a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	687a      	ldr	r2, [r7, #4]
 800e210:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	1c5a      	adds	r2, r3, #1
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	601a      	str	r2, [r3, #0]
}
 800e21c:	bf00      	nop
 800e21e:	3714      	adds	r7, #20
 800e220:	46bd      	mov	sp, r7
 800e222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e226:	4770      	bx	lr

0800e228 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e228:	b480      	push	{r7}
 800e22a:	b085      	sub	sp, #20
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	691b      	ldr	r3, [r3, #16]
 800e234:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	685b      	ldr	r3, [r3, #4]
 800e23a:	687a      	ldr	r2, [r7, #4]
 800e23c:	6892      	ldr	r2, [r2, #8]
 800e23e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	689b      	ldr	r3, [r3, #8]
 800e244:	687a      	ldr	r2, [r7, #4]
 800e246:	6852      	ldr	r2, [r2, #4]
 800e248:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	685b      	ldr	r3, [r3, #4]
 800e24e:	687a      	ldr	r2, [r7, #4]
 800e250:	429a      	cmp	r2, r3
 800e252:	d103      	bne.n	800e25c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	689a      	ldr	r2, [r3, #8]
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2200      	movs	r2, #0
 800e260:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	1e5a      	subs	r2, r3, #1
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	681b      	ldr	r3, [r3, #0]
}
 800e270:	4618      	mov	r0, r3
 800e272:	3714      	adds	r7, #20
 800e274:	46bd      	mov	sp, r7
 800e276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27a:	4770      	bx	lr

0800e27c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b084      	sub	sp, #16
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
 800e284:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d10c      	bne.n	800e2aa <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e294:	b672      	cpsid	i
 800e296:	f383 8811 	msr	BASEPRI, r3
 800e29a:	f3bf 8f6f 	isb	sy
 800e29e:	f3bf 8f4f 	dsb	sy
 800e2a2:	b662      	cpsie	i
 800e2a4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e2a6:	bf00      	nop
 800e2a8:	e7fe      	b.n	800e2a8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800e2aa:	f002 f95f 	bl	801056c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	681a      	ldr	r2, [r3, #0]
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2b6:	68f9      	ldr	r1, [r7, #12]
 800e2b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e2ba:	fb01 f303 	mul.w	r3, r1, r3
 800e2be:	441a      	add	r2, r3
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	681a      	ldr	r2, [r3, #0]
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	681a      	ldr	r2, [r3, #0]
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2da:	3b01      	subs	r3, #1
 800e2dc:	68f9      	ldr	r1, [r7, #12]
 800e2de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e2e0:	fb01 f303 	mul.w	r3, r1, r3
 800e2e4:	441a      	add	r2, r3
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	22ff      	movs	r2, #255	; 0xff
 800e2ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	22ff      	movs	r2, #255	; 0xff
 800e2f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d114      	bne.n	800e32a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	691b      	ldr	r3, [r3, #16]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d01a      	beq.n	800e33e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	3310      	adds	r3, #16
 800e30c:	4618      	mov	r0, r3
 800e30e:	f001 fc19 	bl	800fb44 <xTaskRemoveFromEventList>
 800e312:	4603      	mov	r3, r0
 800e314:	2b00      	cmp	r3, #0
 800e316:	d012      	beq.n	800e33e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e318:	4b0c      	ldr	r3, [pc, #48]	; (800e34c <xQueueGenericReset+0xd0>)
 800e31a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e31e:	601a      	str	r2, [r3, #0]
 800e320:	f3bf 8f4f 	dsb	sy
 800e324:	f3bf 8f6f 	isb	sy
 800e328:	e009      	b.n	800e33e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	3310      	adds	r3, #16
 800e32e:	4618      	mov	r0, r3
 800e330:	f7ff fef0 	bl	800e114 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	3324      	adds	r3, #36	; 0x24
 800e338:	4618      	mov	r0, r3
 800e33a:	f7ff feeb 	bl	800e114 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e33e:	f002 f949 	bl	80105d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e342:	2301      	movs	r3, #1
}
 800e344:	4618      	mov	r0, r3
 800e346:	3710      	adds	r7, #16
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}
 800e34c:	e000ed04 	.word	0xe000ed04

0800e350 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e350:	b580      	push	{r7, lr}
 800e352:	b08e      	sub	sp, #56	; 0x38
 800e354:	af02      	add	r7, sp, #8
 800e356:	60f8      	str	r0, [r7, #12]
 800e358:	60b9      	str	r1, [r7, #8]
 800e35a:	607a      	str	r2, [r7, #4]
 800e35c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d10c      	bne.n	800e37e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800e364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e368:	b672      	cpsid	i
 800e36a:	f383 8811 	msr	BASEPRI, r3
 800e36e:	f3bf 8f6f 	isb	sy
 800e372:	f3bf 8f4f 	dsb	sy
 800e376:	b662      	cpsie	i
 800e378:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e37a:	bf00      	nop
 800e37c:	e7fe      	b.n	800e37c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d10c      	bne.n	800e39e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800e384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e388:	b672      	cpsid	i
 800e38a:	f383 8811 	msr	BASEPRI, r3
 800e38e:	f3bf 8f6f 	isb	sy
 800e392:	f3bf 8f4f 	dsb	sy
 800e396:	b662      	cpsie	i
 800e398:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e39a:	bf00      	nop
 800e39c:	e7fe      	b.n	800e39c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d002      	beq.n	800e3aa <xQueueGenericCreateStatic+0x5a>
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d001      	beq.n	800e3ae <xQueueGenericCreateStatic+0x5e>
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	e000      	b.n	800e3b0 <xQueueGenericCreateStatic+0x60>
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d10c      	bne.n	800e3ce <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800e3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b8:	b672      	cpsid	i
 800e3ba:	f383 8811 	msr	BASEPRI, r3
 800e3be:	f3bf 8f6f 	isb	sy
 800e3c2:	f3bf 8f4f 	dsb	sy
 800e3c6:	b662      	cpsie	i
 800e3c8:	623b      	str	r3, [r7, #32]
}
 800e3ca:	bf00      	nop
 800e3cc:	e7fe      	b.n	800e3cc <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d102      	bne.n	800e3da <xQueueGenericCreateStatic+0x8a>
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d101      	bne.n	800e3de <xQueueGenericCreateStatic+0x8e>
 800e3da:	2301      	movs	r3, #1
 800e3dc:	e000      	b.n	800e3e0 <xQueueGenericCreateStatic+0x90>
 800e3de:	2300      	movs	r3, #0
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d10c      	bne.n	800e3fe <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800e3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3e8:	b672      	cpsid	i
 800e3ea:	f383 8811 	msr	BASEPRI, r3
 800e3ee:	f3bf 8f6f 	isb	sy
 800e3f2:	f3bf 8f4f 	dsb	sy
 800e3f6:	b662      	cpsie	i
 800e3f8:	61fb      	str	r3, [r7, #28]
}
 800e3fa:	bf00      	nop
 800e3fc:	e7fe      	b.n	800e3fc <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e3fe:	2348      	movs	r3, #72	; 0x48
 800e400:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e402:	697b      	ldr	r3, [r7, #20]
 800e404:	2b48      	cmp	r3, #72	; 0x48
 800e406:	d00c      	beq.n	800e422 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800e408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e40c:	b672      	cpsid	i
 800e40e:	f383 8811 	msr	BASEPRI, r3
 800e412:	f3bf 8f6f 	isb	sy
 800e416:	f3bf 8f4f 	dsb	sy
 800e41a:	b662      	cpsie	i
 800e41c:	61bb      	str	r3, [r7, #24]
}
 800e41e:	bf00      	nop
 800e420:	e7fe      	b.n	800e420 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e422:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d00d      	beq.n	800e44a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e430:	2201      	movs	r2, #1
 800e432:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e436:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e43c:	9300      	str	r3, [sp, #0]
 800e43e:	4613      	mov	r3, r2
 800e440:	687a      	ldr	r2, [r7, #4]
 800e442:	68b9      	ldr	r1, [r7, #8]
 800e444:	68f8      	ldr	r0, [r7, #12]
 800e446:	f000 f847 	bl	800e4d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e44c:	4618      	mov	r0, r3
 800e44e:	3730      	adds	r7, #48	; 0x30
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}

0800e454 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e454:	b580      	push	{r7, lr}
 800e456:	b08a      	sub	sp, #40	; 0x28
 800e458:	af02      	add	r7, sp, #8
 800e45a:	60f8      	str	r0, [r7, #12]
 800e45c:	60b9      	str	r1, [r7, #8]
 800e45e:	4613      	mov	r3, r2
 800e460:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d10c      	bne.n	800e482 <xQueueGenericCreate+0x2e>
	__asm volatile
 800e468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e46c:	b672      	cpsid	i
 800e46e:	f383 8811 	msr	BASEPRI, r3
 800e472:	f3bf 8f6f 	isb	sy
 800e476:	f3bf 8f4f 	dsb	sy
 800e47a:	b662      	cpsie	i
 800e47c:	613b      	str	r3, [r7, #16]
}
 800e47e:	bf00      	nop
 800e480:	e7fe      	b.n	800e480 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e482:	68bb      	ldr	r3, [r7, #8]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d102      	bne.n	800e48e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e488:	2300      	movs	r3, #0
 800e48a:	61fb      	str	r3, [r7, #28]
 800e48c:	e004      	b.n	800e498 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	68ba      	ldr	r2, [r7, #8]
 800e492:	fb02 f303 	mul.w	r3, r2, r3
 800e496:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e498:	69fb      	ldr	r3, [r7, #28]
 800e49a:	3348      	adds	r3, #72	; 0x48
 800e49c:	4618      	mov	r0, r3
 800e49e:	f002 fa22 	bl	80108e6 <pvPortMalloc>
 800e4a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e4a4:	69bb      	ldr	r3, [r7, #24]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d011      	beq.n	800e4ce <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e4aa:	69bb      	ldr	r3, [r7, #24]
 800e4ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e4ae:	697b      	ldr	r3, [r7, #20]
 800e4b0:	3348      	adds	r3, #72	; 0x48
 800e4b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e4b4:	69bb      	ldr	r3, [r7, #24]
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e4bc:	79fa      	ldrb	r2, [r7, #7]
 800e4be:	69bb      	ldr	r3, [r7, #24]
 800e4c0:	9300      	str	r3, [sp, #0]
 800e4c2:	4613      	mov	r3, r2
 800e4c4:	697a      	ldr	r2, [r7, #20]
 800e4c6:	68b9      	ldr	r1, [r7, #8]
 800e4c8:	68f8      	ldr	r0, [r7, #12]
 800e4ca:	f000 f805 	bl	800e4d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e4ce:	69bb      	ldr	r3, [r7, #24]
	}
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	3720      	adds	r7, #32
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}

0800e4d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b084      	sub	sp, #16
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	60f8      	str	r0, [r7, #12]
 800e4e0:	60b9      	str	r1, [r7, #8]
 800e4e2:	607a      	str	r2, [r7, #4]
 800e4e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d103      	bne.n	800e4f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e4ec:	69bb      	ldr	r3, [r7, #24]
 800e4ee:	69ba      	ldr	r2, [r7, #24]
 800e4f0:	601a      	str	r2, [r3, #0]
 800e4f2:	e002      	b.n	800e4fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e4f4:	69bb      	ldr	r3, [r7, #24]
 800e4f6:	687a      	ldr	r2, [r7, #4]
 800e4f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e4fa:	69bb      	ldr	r3, [r7, #24]
 800e4fc:	68fa      	ldr	r2, [r7, #12]
 800e4fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e500:	69bb      	ldr	r3, [r7, #24]
 800e502:	68ba      	ldr	r2, [r7, #8]
 800e504:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e506:	2101      	movs	r1, #1
 800e508:	69b8      	ldr	r0, [r7, #24]
 800e50a:	f7ff feb7 	bl	800e27c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e50e:	bf00      	nop
 800e510:	3710      	adds	r7, #16
 800e512:	46bd      	mov	sp, r7
 800e514:	bd80      	pop	{r7, pc}

0800e516 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800e516:	b580      	push	{r7, lr}
 800e518:	b08a      	sub	sp, #40	; 0x28
 800e51a:	af02      	add	r7, sp, #8
 800e51c:	60f8      	str	r0, [r7, #12]
 800e51e:	60b9      	str	r1, [r7, #8]
 800e520:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d10c      	bne.n	800e542 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800e528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e52c:	b672      	cpsid	i
 800e52e:	f383 8811 	msr	BASEPRI, r3
 800e532:	f3bf 8f6f 	isb	sy
 800e536:	f3bf 8f4f 	dsb	sy
 800e53a:	b662      	cpsie	i
 800e53c:	61bb      	str	r3, [r7, #24]
}
 800e53e:	bf00      	nop
 800e540:	e7fe      	b.n	800e540 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e542:	68ba      	ldr	r2, [r7, #8]
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	429a      	cmp	r2, r3
 800e548:	d90c      	bls.n	800e564 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 800e54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e54e:	b672      	cpsid	i
 800e550:	f383 8811 	msr	BASEPRI, r3
 800e554:	f3bf 8f6f 	isb	sy
 800e558:	f3bf 8f4f 	dsb	sy
 800e55c:	b662      	cpsie	i
 800e55e:	617b      	str	r3, [r7, #20]
}
 800e560:	bf00      	nop
 800e562:	e7fe      	b.n	800e562 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e564:	2302      	movs	r3, #2
 800e566:	9300      	str	r3, [sp, #0]
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2200      	movs	r2, #0
 800e56c:	2100      	movs	r1, #0
 800e56e:	68f8      	ldr	r0, [r7, #12]
 800e570:	f7ff feee 	bl	800e350 <xQueueGenericCreateStatic>
 800e574:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800e576:	69fb      	ldr	r3, [r7, #28]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d002      	beq.n	800e582 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e57c:	69fb      	ldr	r3, [r7, #28]
 800e57e:	68ba      	ldr	r2, [r7, #8]
 800e580:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e582:	69fb      	ldr	r3, [r7, #28]
	}
 800e584:	4618      	mov	r0, r3
 800e586:	3720      	adds	r7, #32
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}

0800e58c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b086      	sub	sp, #24
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
 800e594:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d10c      	bne.n	800e5b6 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 800e59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a0:	b672      	cpsid	i
 800e5a2:	f383 8811 	msr	BASEPRI, r3
 800e5a6:	f3bf 8f6f 	isb	sy
 800e5aa:	f3bf 8f4f 	dsb	sy
 800e5ae:	b662      	cpsie	i
 800e5b0:	613b      	str	r3, [r7, #16]
}
 800e5b2:	bf00      	nop
 800e5b4:	e7fe      	b.n	800e5b4 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e5b6:	683a      	ldr	r2, [r7, #0]
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	429a      	cmp	r2, r3
 800e5bc:	d90c      	bls.n	800e5d8 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 800e5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5c2:	b672      	cpsid	i
 800e5c4:	f383 8811 	msr	BASEPRI, r3
 800e5c8:	f3bf 8f6f 	isb	sy
 800e5cc:	f3bf 8f4f 	dsb	sy
 800e5d0:	b662      	cpsie	i
 800e5d2:	60fb      	str	r3, [r7, #12]
}
 800e5d4:	bf00      	nop
 800e5d6:	e7fe      	b.n	800e5d6 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e5d8:	2202      	movs	r2, #2
 800e5da:	2100      	movs	r1, #0
 800e5dc:	6878      	ldr	r0, [r7, #4]
 800e5de:	f7ff ff39 	bl	800e454 <xQueueGenericCreate>
 800e5e2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800e5e4:	697b      	ldr	r3, [r7, #20]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d002      	beq.n	800e5f0 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e5ea:	697b      	ldr	r3, [r7, #20]
 800e5ec:	683a      	ldr	r2, [r7, #0]
 800e5ee:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e5f0:	697b      	ldr	r3, [r7, #20]
	}
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	3718      	adds	r7, #24
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}
	...

0800e5fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b08e      	sub	sp, #56	; 0x38
 800e600:	af00      	add	r7, sp, #0
 800e602:	60f8      	str	r0, [r7, #12]
 800e604:	60b9      	str	r1, [r7, #8]
 800e606:	607a      	str	r2, [r7, #4]
 800e608:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e60a:	2300      	movs	r3, #0
 800e60c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e614:	2b00      	cmp	r3, #0
 800e616:	d10c      	bne.n	800e632 <xQueueGenericSend+0x36>
	__asm volatile
 800e618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e61c:	b672      	cpsid	i
 800e61e:	f383 8811 	msr	BASEPRI, r3
 800e622:	f3bf 8f6f 	isb	sy
 800e626:	f3bf 8f4f 	dsb	sy
 800e62a:	b662      	cpsie	i
 800e62c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e62e:	bf00      	nop
 800e630:	e7fe      	b.n	800e630 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d103      	bne.n	800e640 <xQueueGenericSend+0x44>
 800e638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e63a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d101      	bne.n	800e644 <xQueueGenericSend+0x48>
 800e640:	2301      	movs	r3, #1
 800e642:	e000      	b.n	800e646 <xQueueGenericSend+0x4a>
 800e644:	2300      	movs	r3, #0
 800e646:	2b00      	cmp	r3, #0
 800e648:	d10c      	bne.n	800e664 <xQueueGenericSend+0x68>
	__asm volatile
 800e64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e64e:	b672      	cpsid	i
 800e650:	f383 8811 	msr	BASEPRI, r3
 800e654:	f3bf 8f6f 	isb	sy
 800e658:	f3bf 8f4f 	dsb	sy
 800e65c:	b662      	cpsie	i
 800e65e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e660:	bf00      	nop
 800e662:	e7fe      	b.n	800e662 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	2b02      	cmp	r3, #2
 800e668:	d103      	bne.n	800e672 <xQueueGenericSend+0x76>
 800e66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e66c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e66e:	2b01      	cmp	r3, #1
 800e670:	d101      	bne.n	800e676 <xQueueGenericSend+0x7a>
 800e672:	2301      	movs	r3, #1
 800e674:	e000      	b.n	800e678 <xQueueGenericSend+0x7c>
 800e676:	2300      	movs	r3, #0
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d10c      	bne.n	800e696 <xQueueGenericSend+0x9a>
	__asm volatile
 800e67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e680:	b672      	cpsid	i
 800e682:	f383 8811 	msr	BASEPRI, r3
 800e686:	f3bf 8f6f 	isb	sy
 800e68a:	f3bf 8f4f 	dsb	sy
 800e68e:	b662      	cpsie	i
 800e690:	623b      	str	r3, [r7, #32]
}
 800e692:	bf00      	nop
 800e694:	e7fe      	b.n	800e694 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e696:	f001 fc1b 	bl	800fed0 <xTaskGetSchedulerState>
 800e69a:	4603      	mov	r3, r0
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d102      	bne.n	800e6a6 <xQueueGenericSend+0xaa>
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d101      	bne.n	800e6aa <xQueueGenericSend+0xae>
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	e000      	b.n	800e6ac <xQueueGenericSend+0xb0>
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d10c      	bne.n	800e6ca <xQueueGenericSend+0xce>
	__asm volatile
 800e6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6b4:	b672      	cpsid	i
 800e6b6:	f383 8811 	msr	BASEPRI, r3
 800e6ba:	f3bf 8f6f 	isb	sy
 800e6be:	f3bf 8f4f 	dsb	sy
 800e6c2:	b662      	cpsie	i
 800e6c4:	61fb      	str	r3, [r7, #28]
}
 800e6c6:	bf00      	nop
 800e6c8:	e7fe      	b.n	800e6c8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e6ca:	f001 ff4f 	bl	801056c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6d6:	429a      	cmp	r2, r3
 800e6d8:	d302      	bcc.n	800e6e0 <xQueueGenericSend+0xe4>
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	2b02      	cmp	r3, #2
 800e6de:	d129      	bne.n	800e734 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e6e0:	683a      	ldr	r2, [r7, #0]
 800e6e2:	68b9      	ldr	r1, [r7, #8]
 800e6e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e6e6:	f000 fc82 	bl	800efee <prvCopyDataToQueue>
 800e6ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d010      	beq.n	800e716 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6f6:	3324      	adds	r3, #36	; 0x24
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	f001 fa23 	bl	800fb44 <xTaskRemoveFromEventList>
 800e6fe:	4603      	mov	r3, r0
 800e700:	2b00      	cmp	r3, #0
 800e702:	d013      	beq.n	800e72c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e704:	4b3f      	ldr	r3, [pc, #252]	; (800e804 <xQueueGenericSend+0x208>)
 800e706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e70a:	601a      	str	r2, [r3, #0]
 800e70c:	f3bf 8f4f 	dsb	sy
 800e710:	f3bf 8f6f 	isb	sy
 800e714:	e00a      	b.n	800e72c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d007      	beq.n	800e72c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e71c:	4b39      	ldr	r3, [pc, #228]	; (800e804 <xQueueGenericSend+0x208>)
 800e71e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e722:	601a      	str	r2, [r3, #0]
 800e724:	f3bf 8f4f 	dsb	sy
 800e728:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e72c:	f001 ff52 	bl	80105d4 <vPortExitCritical>
				return pdPASS;
 800e730:	2301      	movs	r3, #1
 800e732:	e063      	b.n	800e7fc <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d103      	bne.n	800e742 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e73a:	f001 ff4b 	bl	80105d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e73e:	2300      	movs	r3, #0
 800e740:	e05c      	b.n	800e7fc <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e744:	2b00      	cmp	r3, #0
 800e746:	d106      	bne.n	800e756 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e748:	f107 0314 	add.w	r3, r7, #20
 800e74c:	4618      	mov	r0, r3
 800e74e:	f001 fa5d 	bl	800fc0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e752:	2301      	movs	r3, #1
 800e754:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e756:	f001 ff3d 	bl	80105d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e75a:	f000 ffc3 	bl	800f6e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e75e:	f001 ff05 	bl	801056c <vPortEnterCritical>
 800e762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e764:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e768:	b25b      	sxtb	r3, r3
 800e76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e76e:	d103      	bne.n	800e778 <xQueueGenericSend+0x17c>
 800e770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e772:	2200      	movs	r2, #0
 800e774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e77a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e77e:	b25b      	sxtb	r3, r3
 800e780:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e784:	d103      	bne.n	800e78e <xQueueGenericSend+0x192>
 800e786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e788:	2200      	movs	r2, #0
 800e78a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e78e:	f001 ff21 	bl	80105d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e792:	1d3a      	adds	r2, r7, #4
 800e794:	f107 0314 	add.w	r3, r7, #20
 800e798:	4611      	mov	r1, r2
 800e79a:	4618      	mov	r0, r3
 800e79c:	f001 fa4c 	bl	800fc38 <xTaskCheckForTimeOut>
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d124      	bne.n	800e7f0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e7a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e7a8:	f000 fd19 	bl	800f1de <prvIsQueueFull>
 800e7ac:	4603      	mov	r3, r0
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d018      	beq.n	800e7e4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b4:	3310      	adds	r3, #16
 800e7b6:	687a      	ldr	r2, [r7, #4]
 800e7b8:	4611      	mov	r1, r2
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f001 f99c 	bl	800faf8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e7c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e7c2:	f000 fca4 	bl	800f10e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e7c6:	f000 ff9b 	bl	800f700 <xTaskResumeAll>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	f47f af7c 	bne.w	800e6ca <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800e7d2:	4b0c      	ldr	r3, [pc, #48]	; (800e804 <xQueueGenericSend+0x208>)
 800e7d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7d8:	601a      	str	r2, [r3, #0]
 800e7da:	f3bf 8f4f 	dsb	sy
 800e7de:	f3bf 8f6f 	isb	sy
 800e7e2:	e772      	b.n	800e6ca <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e7e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e7e6:	f000 fc92 	bl	800f10e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e7ea:	f000 ff89 	bl	800f700 <xTaskResumeAll>
 800e7ee:	e76c      	b.n	800e6ca <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e7f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e7f2:	f000 fc8c 	bl	800f10e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e7f6:	f000 ff83 	bl	800f700 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e7fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	3738      	adds	r7, #56	; 0x38
 800e800:	46bd      	mov	sp, r7
 800e802:	bd80      	pop	{r7, pc}
 800e804:	e000ed04 	.word	0xe000ed04

0800e808 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b08e      	sub	sp, #56	; 0x38
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	60f8      	str	r0, [r7, #12]
 800e810:	60b9      	str	r1, [r7, #8]
 800e812:	607a      	str	r2, [r7, #4]
 800e814:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d10c      	bne.n	800e83a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800e820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e824:	b672      	cpsid	i
 800e826:	f383 8811 	msr	BASEPRI, r3
 800e82a:	f3bf 8f6f 	isb	sy
 800e82e:	f3bf 8f4f 	dsb	sy
 800e832:	b662      	cpsie	i
 800e834:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e836:	bf00      	nop
 800e838:	e7fe      	b.n	800e838 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d103      	bne.n	800e848 <xQueueGenericSendFromISR+0x40>
 800e840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e844:	2b00      	cmp	r3, #0
 800e846:	d101      	bne.n	800e84c <xQueueGenericSendFromISR+0x44>
 800e848:	2301      	movs	r3, #1
 800e84a:	e000      	b.n	800e84e <xQueueGenericSendFromISR+0x46>
 800e84c:	2300      	movs	r3, #0
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d10c      	bne.n	800e86c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800e852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e856:	b672      	cpsid	i
 800e858:	f383 8811 	msr	BASEPRI, r3
 800e85c:	f3bf 8f6f 	isb	sy
 800e860:	f3bf 8f4f 	dsb	sy
 800e864:	b662      	cpsie	i
 800e866:	623b      	str	r3, [r7, #32]
}
 800e868:	bf00      	nop
 800e86a:	e7fe      	b.n	800e86a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	2b02      	cmp	r3, #2
 800e870:	d103      	bne.n	800e87a <xQueueGenericSendFromISR+0x72>
 800e872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e876:	2b01      	cmp	r3, #1
 800e878:	d101      	bne.n	800e87e <xQueueGenericSendFromISR+0x76>
 800e87a:	2301      	movs	r3, #1
 800e87c:	e000      	b.n	800e880 <xQueueGenericSendFromISR+0x78>
 800e87e:	2300      	movs	r3, #0
 800e880:	2b00      	cmp	r3, #0
 800e882:	d10c      	bne.n	800e89e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800e884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e888:	b672      	cpsid	i
 800e88a:	f383 8811 	msr	BASEPRI, r3
 800e88e:	f3bf 8f6f 	isb	sy
 800e892:	f3bf 8f4f 	dsb	sy
 800e896:	b662      	cpsie	i
 800e898:	61fb      	str	r3, [r7, #28]
}
 800e89a:	bf00      	nop
 800e89c:	e7fe      	b.n	800e89c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e89e:	f001 ff4d 	bl	801073c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e8a2:	f3ef 8211 	mrs	r2, BASEPRI
 800e8a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8aa:	b672      	cpsid	i
 800e8ac:	f383 8811 	msr	BASEPRI, r3
 800e8b0:	f3bf 8f6f 	isb	sy
 800e8b4:	f3bf 8f4f 	dsb	sy
 800e8b8:	b662      	cpsie	i
 800e8ba:	61ba      	str	r2, [r7, #24]
 800e8bc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e8be:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e8c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	d302      	bcc.n	800e8d4 <xQueueGenericSendFromISR+0xcc>
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	2b02      	cmp	r3, #2
 800e8d2:	d12c      	bne.n	800e92e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e8da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e8de:	683a      	ldr	r2, [r7, #0]
 800e8e0:	68b9      	ldr	r1, [r7, #8]
 800e8e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e8e4:	f000 fb83 	bl	800efee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e8e8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e8ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8f0:	d112      	bne.n	800e918 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d016      	beq.n	800e928 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8fc:	3324      	adds	r3, #36	; 0x24
 800e8fe:	4618      	mov	r0, r3
 800e900:	f001 f920 	bl	800fb44 <xTaskRemoveFromEventList>
 800e904:	4603      	mov	r3, r0
 800e906:	2b00      	cmp	r3, #0
 800e908:	d00e      	beq.n	800e928 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d00b      	beq.n	800e928 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2201      	movs	r2, #1
 800e914:	601a      	str	r2, [r3, #0]
 800e916:	e007      	b.n	800e928 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e918:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e91c:	3301      	adds	r3, #1
 800e91e:	b2db      	uxtb	r3, r3
 800e920:	b25a      	sxtb	r2, r3
 800e922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e928:	2301      	movs	r3, #1
 800e92a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800e92c:	e001      	b.n	800e932 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e92e:	2300      	movs	r3, #0
 800e930:	637b      	str	r3, [r7, #52]	; 0x34
 800e932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e934:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e936:	693b      	ldr	r3, [r7, #16]
 800e938:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e93c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e93e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e940:	4618      	mov	r0, r3
 800e942:	3738      	adds	r7, #56	; 0x38
 800e944:	46bd      	mov	sp, r7
 800e946:	bd80      	pop	{r7, pc}

0800e948 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b08e      	sub	sp, #56	; 0x38
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
 800e950:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d10c      	bne.n	800e976 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800e95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e960:	b672      	cpsid	i
 800e962:	f383 8811 	msr	BASEPRI, r3
 800e966:	f3bf 8f6f 	isb	sy
 800e96a:	f3bf 8f4f 	dsb	sy
 800e96e:	b662      	cpsie	i
 800e970:	623b      	str	r3, [r7, #32]
}
 800e972:	bf00      	nop
 800e974:	e7fe      	b.n	800e974 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d00c      	beq.n	800e998 <xQueueGiveFromISR+0x50>
	__asm volatile
 800e97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e982:	b672      	cpsid	i
 800e984:	f383 8811 	msr	BASEPRI, r3
 800e988:	f3bf 8f6f 	isb	sy
 800e98c:	f3bf 8f4f 	dsb	sy
 800e990:	b662      	cpsie	i
 800e992:	61fb      	str	r3, [r7, #28]
}
 800e994:	bf00      	nop
 800e996:	e7fe      	b.n	800e996 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d103      	bne.n	800e9a8 <xQueueGiveFromISR+0x60>
 800e9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9a2:	689b      	ldr	r3, [r3, #8]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d101      	bne.n	800e9ac <xQueueGiveFromISR+0x64>
 800e9a8:	2301      	movs	r3, #1
 800e9aa:	e000      	b.n	800e9ae <xQueueGiveFromISR+0x66>
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d10c      	bne.n	800e9cc <xQueueGiveFromISR+0x84>
	__asm volatile
 800e9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9b6:	b672      	cpsid	i
 800e9b8:	f383 8811 	msr	BASEPRI, r3
 800e9bc:	f3bf 8f6f 	isb	sy
 800e9c0:	f3bf 8f4f 	dsb	sy
 800e9c4:	b662      	cpsie	i
 800e9c6:	61bb      	str	r3, [r7, #24]
}
 800e9c8:	bf00      	nop
 800e9ca:	e7fe      	b.n	800e9ca <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e9cc:	f001 feb6 	bl	801073c <vPortValidateInterruptPriority>
	__asm volatile
 800e9d0:	f3ef 8211 	mrs	r2, BASEPRI
 800e9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9d8:	b672      	cpsid	i
 800e9da:	f383 8811 	msr	BASEPRI, r3
 800e9de:	f3bf 8f6f 	isb	sy
 800e9e2:	f3bf 8f4f 	dsb	sy
 800e9e6:	b662      	cpsie	i
 800e9e8:	617a      	str	r2, [r7, #20]
 800e9ea:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e9ec:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e9ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9f4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9fc:	429a      	cmp	r2, r3
 800e9fe:	d22b      	bcs.n	800ea58 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ea00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ea06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ea0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea0c:	1c5a      	adds	r2, r3, #1
 800ea0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea10:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ea12:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ea16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea1a:	d112      	bne.n	800ea42 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ea1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d016      	beq.n	800ea52 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ea24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea26:	3324      	adds	r3, #36	; 0x24
 800ea28:	4618      	mov	r0, r3
 800ea2a:	f001 f88b 	bl	800fb44 <xTaskRemoveFromEventList>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d00e      	beq.n	800ea52 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d00b      	beq.n	800ea52 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	2201      	movs	r2, #1
 800ea3e:	601a      	str	r2, [r3, #0]
 800ea40:	e007      	b.n	800ea52 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ea42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea46:	3301      	adds	r3, #1
 800ea48:	b2db      	uxtb	r3, r3
 800ea4a:	b25a      	sxtb	r2, r3
 800ea4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ea52:	2301      	movs	r3, #1
 800ea54:	637b      	str	r3, [r7, #52]	; 0x34
 800ea56:	e001      	b.n	800ea5c <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	637b      	str	r3, [r7, #52]	; 0x34
 800ea5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea5e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	f383 8811 	msr	BASEPRI, r3
}
 800ea66:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ea68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	3738      	adds	r7, #56	; 0x38
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd80      	pop	{r7, pc}
	...

0800ea74 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b08c      	sub	sp, #48	; 0x30
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	60f8      	str	r0, [r7, #12]
 800ea7c:	60b9      	str	r1, [r7, #8]
 800ea7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ea80:	2300      	movs	r3, #0
 800ea82:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ea88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d10c      	bne.n	800eaa8 <xQueueReceive+0x34>
	__asm volatile
 800ea8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea92:	b672      	cpsid	i
 800ea94:	f383 8811 	msr	BASEPRI, r3
 800ea98:	f3bf 8f6f 	isb	sy
 800ea9c:	f3bf 8f4f 	dsb	sy
 800eaa0:	b662      	cpsie	i
 800eaa2:	623b      	str	r3, [r7, #32]
}
 800eaa4:	bf00      	nop
 800eaa6:	e7fe      	b.n	800eaa6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eaa8:	68bb      	ldr	r3, [r7, #8]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d103      	bne.n	800eab6 <xQueueReceive+0x42>
 800eaae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d101      	bne.n	800eaba <xQueueReceive+0x46>
 800eab6:	2301      	movs	r3, #1
 800eab8:	e000      	b.n	800eabc <xQueueReceive+0x48>
 800eaba:	2300      	movs	r3, #0
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d10c      	bne.n	800eada <xQueueReceive+0x66>
	__asm volatile
 800eac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eac4:	b672      	cpsid	i
 800eac6:	f383 8811 	msr	BASEPRI, r3
 800eaca:	f3bf 8f6f 	isb	sy
 800eace:	f3bf 8f4f 	dsb	sy
 800ead2:	b662      	cpsie	i
 800ead4:	61fb      	str	r3, [r7, #28]
}
 800ead6:	bf00      	nop
 800ead8:	e7fe      	b.n	800ead8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eada:	f001 f9f9 	bl	800fed0 <xTaskGetSchedulerState>
 800eade:	4603      	mov	r3, r0
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d102      	bne.n	800eaea <xQueueReceive+0x76>
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d101      	bne.n	800eaee <xQueueReceive+0x7a>
 800eaea:	2301      	movs	r3, #1
 800eaec:	e000      	b.n	800eaf0 <xQueueReceive+0x7c>
 800eaee:	2300      	movs	r3, #0
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d10c      	bne.n	800eb0e <xQueueReceive+0x9a>
	__asm volatile
 800eaf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaf8:	b672      	cpsid	i
 800eafa:	f383 8811 	msr	BASEPRI, r3
 800eafe:	f3bf 8f6f 	isb	sy
 800eb02:	f3bf 8f4f 	dsb	sy
 800eb06:	b662      	cpsie	i
 800eb08:	61bb      	str	r3, [r7, #24]
}
 800eb0a:	bf00      	nop
 800eb0c:	e7fe      	b.n	800eb0c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eb0e:	f001 fd2d 	bl	801056c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb16:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d01f      	beq.n	800eb5e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eb1e:	68b9      	ldr	r1, [r7, #8]
 800eb20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb22:	f000 face 	bl	800f0c2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800eb26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb28:	1e5a      	subs	r2, r3, #1
 800eb2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb2c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb30:	691b      	ldr	r3, [r3, #16]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d00f      	beq.n	800eb56 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb38:	3310      	adds	r3, #16
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f001 f802 	bl	800fb44 <xTaskRemoveFromEventList>
 800eb40:	4603      	mov	r3, r0
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d007      	beq.n	800eb56 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800eb46:	4b3d      	ldr	r3, [pc, #244]	; (800ec3c <xQueueReceive+0x1c8>)
 800eb48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb4c:	601a      	str	r2, [r3, #0]
 800eb4e:	f3bf 8f4f 	dsb	sy
 800eb52:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800eb56:	f001 fd3d 	bl	80105d4 <vPortExitCritical>
				return pdPASS;
 800eb5a:	2301      	movs	r3, #1
 800eb5c:	e069      	b.n	800ec32 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d103      	bne.n	800eb6c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800eb64:	f001 fd36 	bl	80105d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800eb68:	2300      	movs	r3, #0
 800eb6a:	e062      	b.n	800ec32 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eb6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d106      	bne.n	800eb80 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eb72:	f107 0310 	add.w	r3, r7, #16
 800eb76:	4618      	mov	r0, r3
 800eb78:	f001 f848 	bl	800fc0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eb7c:	2301      	movs	r3, #1
 800eb7e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eb80:	f001 fd28 	bl	80105d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eb84:	f000 fdae 	bl	800f6e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eb88:	f001 fcf0 	bl	801056c <vPortEnterCritical>
 800eb8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eb92:	b25b      	sxtb	r3, r3
 800eb94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb98:	d103      	bne.n	800eba2 <xQueueReceive+0x12e>
 800eb9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eba4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eba8:	b25b      	sxtb	r3, r3
 800ebaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebae:	d103      	bne.n	800ebb8 <xQueueReceive+0x144>
 800ebb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ebb8:	f001 fd0c 	bl	80105d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ebbc:	1d3a      	adds	r2, r7, #4
 800ebbe:	f107 0310 	add.w	r3, r7, #16
 800ebc2:	4611      	mov	r1, r2
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f001 f837 	bl	800fc38 <xTaskCheckForTimeOut>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d123      	bne.n	800ec18 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ebd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ebd2:	f000 faee 	bl	800f1b2 <prvIsQueueEmpty>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d017      	beq.n	800ec0c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ebdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebde:	3324      	adds	r3, #36	; 0x24
 800ebe0:	687a      	ldr	r2, [r7, #4]
 800ebe2:	4611      	mov	r1, r2
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f000 ff87 	bl	800faf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ebea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ebec:	f000 fa8f 	bl	800f10e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ebf0:	f000 fd86 	bl	800f700 <xTaskResumeAll>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d189      	bne.n	800eb0e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800ebfa:	4b10      	ldr	r3, [pc, #64]	; (800ec3c <xQueueReceive+0x1c8>)
 800ebfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec00:	601a      	str	r2, [r3, #0]
 800ec02:	f3bf 8f4f 	dsb	sy
 800ec06:	f3bf 8f6f 	isb	sy
 800ec0a:	e780      	b.n	800eb0e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ec0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec0e:	f000 fa7e 	bl	800f10e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ec12:	f000 fd75 	bl	800f700 <xTaskResumeAll>
 800ec16:	e77a      	b.n	800eb0e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ec18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec1a:	f000 fa78 	bl	800f10e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ec1e:	f000 fd6f 	bl	800f700 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ec22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec24:	f000 fac5 	bl	800f1b2 <prvIsQueueEmpty>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	f43f af6f 	beq.w	800eb0e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ec30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ec32:	4618      	mov	r0, r3
 800ec34:	3730      	adds	r7, #48	; 0x30
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bd80      	pop	{r7, pc}
 800ec3a:	bf00      	nop
 800ec3c:	e000ed04 	.word	0xe000ed04

0800ec40 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b08e      	sub	sp, #56	; 0x38
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
 800ec48:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ec52:	2300      	movs	r3, #0
 800ec54:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ec56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d10c      	bne.n	800ec76 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800ec5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec60:	b672      	cpsid	i
 800ec62:	f383 8811 	msr	BASEPRI, r3
 800ec66:	f3bf 8f6f 	isb	sy
 800ec6a:	f3bf 8f4f 	dsb	sy
 800ec6e:	b662      	cpsie	i
 800ec70:	623b      	str	r3, [r7, #32]
}
 800ec72:	bf00      	nop
 800ec74:	e7fe      	b.n	800ec74 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ec76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d00c      	beq.n	800ec98 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800ec7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec82:	b672      	cpsid	i
 800ec84:	f383 8811 	msr	BASEPRI, r3
 800ec88:	f3bf 8f6f 	isb	sy
 800ec8c:	f3bf 8f4f 	dsb	sy
 800ec90:	b662      	cpsie	i
 800ec92:	61fb      	str	r3, [r7, #28]
}
 800ec94:	bf00      	nop
 800ec96:	e7fe      	b.n	800ec96 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ec98:	f001 f91a 	bl	800fed0 <xTaskGetSchedulerState>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d102      	bne.n	800eca8 <xQueueSemaphoreTake+0x68>
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d101      	bne.n	800ecac <xQueueSemaphoreTake+0x6c>
 800eca8:	2301      	movs	r3, #1
 800ecaa:	e000      	b.n	800ecae <xQueueSemaphoreTake+0x6e>
 800ecac:	2300      	movs	r3, #0
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d10c      	bne.n	800eccc <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800ecb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecb6:	b672      	cpsid	i
 800ecb8:	f383 8811 	msr	BASEPRI, r3
 800ecbc:	f3bf 8f6f 	isb	sy
 800ecc0:	f3bf 8f4f 	dsb	sy
 800ecc4:	b662      	cpsie	i
 800ecc6:	61bb      	str	r3, [r7, #24]
}
 800ecc8:	bf00      	nop
 800ecca:	e7fe      	b.n	800ecca <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eccc:	f001 fc4e 	bl	801056c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ecd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecd4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ecd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d024      	beq.n	800ed26 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ecdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecde:	1e5a      	subs	r2, r3, #1
 800ece0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ece2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ece4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d104      	bne.n	800ecf6 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ecec:	f001 fab6 	bl	801025c <pvTaskIncrementMutexHeldCount>
 800ecf0:	4602      	mov	r2, r0
 800ecf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecf4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ecf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecf8:	691b      	ldr	r3, [r3, #16]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d00f      	beq.n	800ed1e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ecfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed00:	3310      	adds	r3, #16
 800ed02:	4618      	mov	r0, r3
 800ed04:	f000 ff1e 	bl	800fb44 <xTaskRemoveFromEventList>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d007      	beq.n	800ed1e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ed0e:	4b55      	ldr	r3, [pc, #340]	; (800ee64 <xQueueSemaphoreTake+0x224>)
 800ed10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed14:	601a      	str	r2, [r3, #0]
 800ed16:	f3bf 8f4f 	dsb	sy
 800ed1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ed1e:	f001 fc59 	bl	80105d4 <vPortExitCritical>
				return pdPASS;
 800ed22:	2301      	movs	r3, #1
 800ed24:	e099      	b.n	800ee5a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d113      	bne.n	800ed54 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ed2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d00c      	beq.n	800ed4c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800ed32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed36:	b672      	cpsid	i
 800ed38:	f383 8811 	msr	BASEPRI, r3
 800ed3c:	f3bf 8f6f 	isb	sy
 800ed40:	f3bf 8f4f 	dsb	sy
 800ed44:	b662      	cpsie	i
 800ed46:	617b      	str	r3, [r7, #20]
}
 800ed48:	bf00      	nop
 800ed4a:	e7fe      	b.n	800ed4a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ed4c:	f001 fc42 	bl	80105d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ed50:	2300      	movs	r3, #0
 800ed52:	e082      	b.n	800ee5a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ed54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d106      	bne.n	800ed68 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ed5a:	f107 030c 	add.w	r3, r7, #12
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f000 ff54 	bl	800fc0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ed64:	2301      	movs	r3, #1
 800ed66:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ed68:	f001 fc34 	bl	80105d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ed6c:	f000 fcba 	bl	800f6e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ed70:	f001 fbfc 	bl	801056c <vPortEnterCritical>
 800ed74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ed7a:	b25b      	sxtb	r3, r3
 800ed7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed80:	d103      	bne.n	800ed8a <xQueueSemaphoreTake+0x14a>
 800ed82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed84:	2200      	movs	r2, #0
 800ed86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ed8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ed90:	b25b      	sxtb	r3, r3
 800ed92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed96:	d103      	bne.n	800eda0 <xQueueSemaphoreTake+0x160>
 800ed98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eda0:	f001 fc18 	bl	80105d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eda4:	463a      	mov	r2, r7
 800eda6:	f107 030c 	add.w	r3, r7, #12
 800edaa:	4611      	mov	r1, r2
 800edac:	4618      	mov	r0, r3
 800edae:	f000 ff43 	bl	800fc38 <xTaskCheckForTimeOut>
 800edb2:	4603      	mov	r3, r0
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d132      	bne.n	800ee1e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800edb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800edba:	f000 f9fa 	bl	800f1b2 <prvIsQueueEmpty>
 800edbe:	4603      	mov	r3, r0
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d026      	beq.n	800ee12 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800edc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d109      	bne.n	800ede0 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800edcc:	f001 fbce 	bl	801056c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800edd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edd2:	689b      	ldr	r3, [r3, #8]
 800edd4:	4618      	mov	r0, r3
 800edd6:	f001 f899 	bl	800ff0c <xTaskPriorityInherit>
 800edda:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800eddc:	f001 fbfa 	bl	80105d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ede0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ede2:	3324      	adds	r3, #36	; 0x24
 800ede4:	683a      	ldr	r2, [r7, #0]
 800ede6:	4611      	mov	r1, r2
 800ede8:	4618      	mov	r0, r3
 800edea:	f000 fe85 	bl	800faf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800edee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800edf0:	f000 f98d 	bl	800f10e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800edf4:	f000 fc84 	bl	800f700 <xTaskResumeAll>
 800edf8:	4603      	mov	r3, r0
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	f47f af66 	bne.w	800eccc <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800ee00:	4b18      	ldr	r3, [pc, #96]	; (800ee64 <xQueueSemaphoreTake+0x224>)
 800ee02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee06:	601a      	str	r2, [r3, #0]
 800ee08:	f3bf 8f4f 	dsb	sy
 800ee0c:	f3bf 8f6f 	isb	sy
 800ee10:	e75c      	b.n	800eccc <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ee12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee14:	f000 f97b 	bl	800f10e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ee18:	f000 fc72 	bl	800f700 <xTaskResumeAll>
 800ee1c:	e756      	b.n	800eccc <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ee1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee20:	f000 f975 	bl	800f10e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ee24:	f000 fc6c 	bl	800f700 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ee28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee2a:	f000 f9c2 	bl	800f1b2 <prvIsQueueEmpty>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	f43f af4b 	beq.w	800eccc <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ee36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d00d      	beq.n	800ee58 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800ee3c:	f001 fb96 	bl	801056c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ee40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee42:	f000 f8bc 	bl	800efbe <prvGetDisinheritPriorityAfterTimeout>
 800ee46:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ee48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee4a:	689b      	ldr	r3, [r3, #8]
 800ee4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ee4e:	4618      	mov	r0, r3
 800ee50:	f001 f966 	bl	8010120 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ee54:	f001 fbbe 	bl	80105d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ee58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	3738      	adds	r7, #56	; 0x38
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bd80      	pop	{r7, pc}
 800ee62:	bf00      	nop
 800ee64:	e000ed04 	.word	0xe000ed04

0800ee68 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b08e      	sub	sp, #56	; 0x38
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	60f8      	str	r0, [r7, #12]
 800ee70:	60b9      	str	r1, [r7, #8]
 800ee72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ee78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d10c      	bne.n	800ee98 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800ee7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee82:	b672      	cpsid	i
 800ee84:	f383 8811 	msr	BASEPRI, r3
 800ee88:	f3bf 8f6f 	isb	sy
 800ee8c:	f3bf 8f4f 	dsb	sy
 800ee90:	b662      	cpsie	i
 800ee92:	623b      	str	r3, [r7, #32]
}
 800ee94:	bf00      	nop
 800ee96:	e7fe      	b.n	800ee96 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d103      	bne.n	800eea6 <xQueueReceiveFromISR+0x3e>
 800ee9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d101      	bne.n	800eeaa <xQueueReceiveFromISR+0x42>
 800eea6:	2301      	movs	r3, #1
 800eea8:	e000      	b.n	800eeac <xQueueReceiveFromISR+0x44>
 800eeaa:	2300      	movs	r3, #0
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d10c      	bne.n	800eeca <xQueueReceiveFromISR+0x62>
	__asm volatile
 800eeb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeb4:	b672      	cpsid	i
 800eeb6:	f383 8811 	msr	BASEPRI, r3
 800eeba:	f3bf 8f6f 	isb	sy
 800eebe:	f3bf 8f4f 	dsb	sy
 800eec2:	b662      	cpsie	i
 800eec4:	61fb      	str	r3, [r7, #28]
}
 800eec6:	bf00      	nop
 800eec8:	e7fe      	b.n	800eec8 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eeca:	f001 fc37 	bl	801073c <vPortValidateInterruptPriority>
	__asm volatile
 800eece:	f3ef 8211 	mrs	r2, BASEPRI
 800eed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eed6:	b672      	cpsid	i
 800eed8:	f383 8811 	msr	BASEPRI, r3
 800eedc:	f3bf 8f6f 	isb	sy
 800eee0:	f3bf 8f4f 	dsb	sy
 800eee4:	b662      	cpsie	i
 800eee6:	61ba      	str	r2, [r7, #24]
 800eee8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800eeea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eeec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eeee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eef2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d02f      	beq.n	800ef5a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800eefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eefc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ef00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ef04:	68b9      	ldr	r1, [r7, #8]
 800ef06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef08:	f000 f8db 	bl	800f0c2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ef0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef0e:	1e5a      	subs	r2, r3, #1
 800ef10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef12:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ef14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ef18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef1c:	d112      	bne.n	800ef44 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef20:	691b      	ldr	r3, [r3, #16]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d016      	beq.n	800ef54 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ef26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef28:	3310      	adds	r3, #16
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f000 fe0a 	bl	800fb44 <xTaskRemoveFromEventList>
 800ef30:	4603      	mov	r3, r0
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d00e      	beq.n	800ef54 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d00b      	beq.n	800ef54 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2201      	movs	r2, #1
 800ef40:	601a      	str	r2, [r3, #0]
 800ef42:	e007      	b.n	800ef54 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ef44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef48:	3301      	adds	r3, #1
 800ef4a:	b2db      	uxtb	r3, r3
 800ef4c:	b25a      	sxtb	r2, r3
 800ef4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ef54:	2301      	movs	r3, #1
 800ef56:	637b      	str	r3, [r7, #52]	; 0x34
 800ef58:	e001      	b.n	800ef5e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	637b      	str	r3, [r7, #52]	; 0x34
 800ef5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef60:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ef62:	693b      	ldr	r3, [r7, #16]
 800ef64:	f383 8811 	msr	BASEPRI, r3
}
 800ef68:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ef6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	3738      	adds	r7, #56	; 0x38
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}

0800ef74 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b084      	sub	sp, #16
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d10c      	bne.n	800efa0 <vQueueDelete+0x2c>
	__asm volatile
 800ef86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef8a:	b672      	cpsid	i
 800ef8c:	f383 8811 	msr	BASEPRI, r3
 800ef90:	f3bf 8f6f 	isb	sy
 800ef94:	f3bf 8f4f 	dsb	sy
 800ef98:	b662      	cpsie	i
 800ef9a:	60bb      	str	r3, [r7, #8]
}
 800ef9c:	bf00      	nop
 800ef9e:	e7fe      	b.n	800ef9e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800efa0:	68f8      	ldr	r0, [r7, #12]
 800efa2:	f000 f935 	bl	800f210 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800efac:	2b00      	cmp	r3, #0
 800efae:	d102      	bne.n	800efb6 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800efb0:	68f8      	ldr	r0, [r7, #12]
 800efb2:	f001 fca6 	bl	8010902 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800efb6:	bf00      	nop
 800efb8:	3710      	adds	r7, #16
 800efba:	46bd      	mov	sp, r7
 800efbc:	bd80      	pop	{r7, pc}

0800efbe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800efbe:	b480      	push	{r7}
 800efc0:	b085      	sub	sp, #20
 800efc2:	af00      	add	r7, sp, #0
 800efc4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d006      	beq.n	800efdc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	f1c3 0307 	rsb	r3, r3, #7
 800efd8:	60fb      	str	r3, [r7, #12]
 800efda:	e001      	b.n	800efe0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800efdc:	2300      	movs	r3, #0
 800efde:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800efe0:	68fb      	ldr	r3, [r7, #12]
	}
 800efe2:	4618      	mov	r0, r3
 800efe4:	3714      	adds	r7, #20
 800efe6:	46bd      	mov	sp, r7
 800efe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efec:	4770      	bx	lr

0800efee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800efee:	b580      	push	{r7, lr}
 800eff0:	b086      	sub	sp, #24
 800eff2:	af00      	add	r7, sp, #0
 800eff4:	60f8      	str	r0, [r7, #12]
 800eff6:	60b9      	str	r1, [r7, #8]
 800eff8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800effa:	2300      	movs	r3, #0
 800effc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f002:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d10d      	bne.n	800f028 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d14d      	bne.n	800f0b0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	689b      	ldr	r3, [r3, #8]
 800f018:	4618      	mov	r0, r3
 800f01a:	f000 fff7 	bl	801000c <xTaskPriorityDisinherit>
 800f01e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	2200      	movs	r2, #0
 800f024:	609a      	str	r2, [r3, #8]
 800f026:	e043      	b.n	800f0b0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d119      	bne.n	800f062 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	6858      	ldr	r0, [r3, #4]
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f036:	461a      	mov	r2, r3
 800f038:	68b9      	ldr	r1, [r7, #8]
 800f03a:	f001 fca1 	bl	8010980 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	685a      	ldr	r2, [r3, #4]
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f046:	441a      	add	r2, r3
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	685a      	ldr	r2, [r3, #4]
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	689b      	ldr	r3, [r3, #8]
 800f054:	429a      	cmp	r2, r3
 800f056:	d32b      	bcc.n	800f0b0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	681a      	ldr	r2, [r3, #0]
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	605a      	str	r2, [r3, #4]
 800f060:	e026      	b.n	800f0b0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	68d8      	ldr	r0, [r3, #12]
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f06a:	461a      	mov	r2, r3
 800f06c:	68b9      	ldr	r1, [r7, #8]
 800f06e:	f001 fc87 	bl	8010980 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	68da      	ldr	r2, [r3, #12]
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f07a:	425b      	negs	r3, r3
 800f07c:	441a      	add	r2, r3
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	68da      	ldr	r2, [r3, #12]
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	429a      	cmp	r2, r3
 800f08c:	d207      	bcs.n	800f09e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	689a      	ldr	r2, [r3, #8]
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f096:	425b      	negs	r3, r3
 800f098:	441a      	add	r2, r3
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	2b02      	cmp	r3, #2
 800f0a2:	d105      	bne.n	800f0b0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f0a4:	693b      	ldr	r3, [r7, #16]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d002      	beq.n	800f0b0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f0aa:	693b      	ldr	r3, [r7, #16]
 800f0ac:	3b01      	subs	r3, #1
 800f0ae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f0b0:	693b      	ldr	r3, [r7, #16]
 800f0b2:	1c5a      	adds	r2, r3, #1
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f0b8:	697b      	ldr	r3, [r7, #20]
}
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	3718      	adds	r7, #24
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd80      	pop	{r7, pc}

0800f0c2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f0c2:	b580      	push	{r7, lr}
 800f0c4:	b082      	sub	sp, #8
 800f0c6:	af00      	add	r7, sp, #0
 800f0c8:	6078      	str	r0, [r7, #4]
 800f0ca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d018      	beq.n	800f106 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	68da      	ldr	r2, [r3, #12]
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0dc:	441a      	add	r2, r3
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	68da      	ldr	r2, [r3, #12]
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	689b      	ldr	r3, [r3, #8]
 800f0ea:	429a      	cmp	r2, r3
 800f0ec:	d303      	bcc.n	800f0f6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	681a      	ldr	r2, [r3, #0]
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	68d9      	ldr	r1, [r3, #12]
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0fe:	461a      	mov	r2, r3
 800f100:	6838      	ldr	r0, [r7, #0]
 800f102:	f001 fc3d 	bl	8010980 <memcpy>
	}
}
 800f106:	bf00      	nop
 800f108:	3708      	adds	r7, #8
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bd80      	pop	{r7, pc}

0800f10e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f10e:	b580      	push	{r7, lr}
 800f110:	b084      	sub	sp, #16
 800f112:	af00      	add	r7, sp, #0
 800f114:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f116:	f001 fa29 	bl	801056c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f120:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f122:	e011      	b.n	800f148 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d012      	beq.n	800f152 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	3324      	adds	r3, #36	; 0x24
 800f130:	4618      	mov	r0, r3
 800f132:	f000 fd07 	bl	800fb44 <xTaskRemoveFromEventList>
 800f136:	4603      	mov	r3, r0
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d001      	beq.n	800f140 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f13c:	f000 fde2 	bl	800fd04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f140:	7bfb      	ldrb	r3, [r7, #15]
 800f142:	3b01      	subs	r3, #1
 800f144:	b2db      	uxtb	r3, r3
 800f146:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f148:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	dce9      	bgt.n	800f124 <prvUnlockQueue+0x16>
 800f150:	e000      	b.n	800f154 <prvUnlockQueue+0x46>
					break;
 800f152:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	22ff      	movs	r2, #255	; 0xff
 800f158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f15c:	f001 fa3a 	bl	80105d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f160:	f001 fa04 	bl	801056c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f16a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f16c:	e011      	b.n	800f192 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	691b      	ldr	r3, [r3, #16]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d012      	beq.n	800f19c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	3310      	adds	r3, #16
 800f17a:	4618      	mov	r0, r3
 800f17c:	f000 fce2 	bl	800fb44 <xTaskRemoveFromEventList>
 800f180:	4603      	mov	r3, r0
 800f182:	2b00      	cmp	r3, #0
 800f184:	d001      	beq.n	800f18a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f186:	f000 fdbd 	bl	800fd04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f18a:	7bbb      	ldrb	r3, [r7, #14]
 800f18c:	3b01      	subs	r3, #1
 800f18e:	b2db      	uxtb	r3, r3
 800f190:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f192:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f196:	2b00      	cmp	r3, #0
 800f198:	dce9      	bgt.n	800f16e <prvUnlockQueue+0x60>
 800f19a:	e000      	b.n	800f19e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f19c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	22ff      	movs	r2, #255	; 0xff
 800f1a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f1a6:	f001 fa15 	bl	80105d4 <vPortExitCritical>
}
 800f1aa:	bf00      	nop
 800f1ac:	3710      	adds	r7, #16
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	bd80      	pop	{r7, pc}

0800f1b2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f1b2:	b580      	push	{r7, lr}
 800f1b4:	b084      	sub	sp, #16
 800f1b6:	af00      	add	r7, sp, #0
 800f1b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f1ba:	f001 f9d7 	bl	801056c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d102      	bne.n	800f1cc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f1c6:	2301      	movs	r3, #1
 800f1c8:	60fb      	str	r3, [r7, #12]
 800f1ca:	e001      	b.n	800f1d0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f1d0:	f001 fa00 	bl	80105d4 <vPortExitCritical>

	return xReturn;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
}
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	3710      	adds	r7, #16
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}

0800f1de <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f1de:	b580      	push	{r7, lr}
 800f1e0:	b084      	sub	sp, #16
 800f1e2:	af00      	add	r7, sp, #0
 800f1e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f1e6:	f001 f9c1 	bl	801056c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1f2:	429a      	cmp	r2, r3
 800f1f4:	d102      	bne.n	800f1fc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f1f6:	2301      	movs	r3, #1
 800f1f8:	60fb      	str	r3, [r7, #12]
 800f1fa:	e001      	b.n	800f200 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f200:	f001 f9e8 	bl	80105d4 <vPortExitCritical>

	return xReturn;
 800f204:	68fb      	ldr	r3, [r7, #12]
}
 800f206:	4618      	mov	r0, r3
 800f208:	3710      	adds	r7, #16
 800f20a:	46bd      	mov	sp, r7
 800f20c:	bd80      	pop	{r7, pc}
	...

0800f210 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f210:	b480      	push	{r7}
 800f212:	b085      	sub	sp, #20
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f218:	2300      	movs	r3, #0
 800f21a:	60fb      	str	r3, [r7, #12]
 800f21c:	e016      	b.n	800f24c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f21e:	4a10      	ldr	r2, [pc, #64]	; (800f260 <vQueueUnregisterQueue+0x50>)
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	00db      	lsls	r3, r3, #3
 800f224:	4413      	add	r3, r2
 800f226:	685b      	ldr	r3, [r3, #4]
 800f228:	687a      	ldr	r2, [r7, #4]
 800f22a:	429a      	cmp	r2, r3
 800f22c:	d10b      	bne.n	800f246 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f22e:	4a0c      	ldr	r2, [pc, #48]	; (800f260 <vQueueUnregisterQueue+0x50>)
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	2100      	movs	r1, #0
 800f234:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f238:	4a09      	ldr	r2, [pc, #36]	; (800f260 <vQueueUnregisterQueue+0x50>)
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	00db      	lsls	r3, r3, #3
 800f23e:	4413      	add	r3, r2
 800f240:	2200      	movs	r2, #0
 800f242:	605a      	str	r2, [r3, #4]
				break;
 800f244:	e006      	b.n	800f254 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	3301      	adds	r3, #1
 800f24a:	60fb      	str	r3, [r7, #12]
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	2b07      	cmp	r3, #7
 800f250:	d9e5      	bls.n	800f21e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f252:	bf00      	nop
 800f254:	bf00      	nop
 800f256:	3714      	adds	r7, #20
 800f258:	46bd      	mov	sp, r7
 800f25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25e:	4770      	bx	lr
 800f260:	20004cc8 	.word	0x20004cc8

0800f264 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f264:	b580      	push	{r7, lr}
 800f266:	b08e      	sub	sp, #56	; 0x38
 800f268:	af04      	add	r7, sp, #16
 800f26a:	60f8      	str	r0, [r7, #12]
 800f26c:	60b9      	str	r1, [r7, #8]
 800f26e:	607a      	str	r2, [r7, #4]
 800f270:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f274:	2b00      	cmp	r3, #0
 800f276:	d10c      	bne.n	800f292 <xTaskCreateStatic+0x2e>
	__asm volatile
 800f278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f27c:	b672      	cpsid	i
 800f27e:	f383 8811 	msr	BASEPRI, r3
 800f282:	f3bf 8f6f 	isb	sy
 800f286:	f3bf 8f4f 	dsb	sy
 800f28a:	b662      	cpsie	i
 800f28c:	623b      	str	r3, [r7, #32]
}
 800f28e:	bf00      	nop
 800f290:	e7fe      	b.n	800f290 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800f292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f294:	2b00      	cmp	r3, #0
 800f296:	d10c      	bne.n	800f2b2 <xTaskCreateStatic+0x4e>
	__asm volatile
 800f298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f29c:	b672      	cpsid	i
 800f29e:	f383 8811 	msr	BASEPRI, r3
 800f2a2:	f3bf 8f6f 	isb	sy
 800f2a6:	f3bf 8f4f 	dsb	sy
 800f2aa:	b662      	cpsie	i
 800f2ac:	61fb      	str	r3, [r7, #28]
}
 800f2ae:	bf00      	nop
 800f2b0:	e7fe      	b.n	800f2b0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f2b2:	2358      	movs	r3, #88	; 0x58
 800f2b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f2b6:	693b      	ldr	r3, [r7, #16]
 800f2b8:	2b58      	cmp	r3, #88	; 0x58
 800f2ba:	d00c      	beq.n	800f2d6 <xTaskCreateStatic+0x72>
	__asm volatile
 800f2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2c0:	b672      	cpsid	i
 800f2c2:	f383 8811 	msr	BASEPRI, r3
 800f2c6:	f3bf 8f6f 	isb	sy
 800f2ca:	f3bf 8f4f 	dsb	sy
 800f2ce:	b662      	cpsie	i
 800f2d0:	61bb      	str	r3, [r7, #24]
}
 800f2d2:	bf00      	nop
 800f2d4:	e7fe      	b.n	800f2d4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f2d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d01e      	beq.n	800f31c <xTaskCreateStatic+0xb8>
 800f2de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d01b      	beq.n	800f31c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f2ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2f0:	2202      	movs	r2, #2
 800f2f2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	9303      	str	r3, [sp, #12]
 800f2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2fc:	9302      	str	r3, [sp, #8]
 800f2fe:	f107 0314 	add.w	r3, r7, #20
 800f302:	9301      	str	r3, [sp, #4]
 800f304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f306:	9300      	str	r3, [sp, #0]
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	687a      	ldr	r2, [r7, #4]
 800f30c:	68b9      	ldr	r1, [r7, #8]
 800f30e:	68f8      	ldr	r0, [r7, #12]
 800f310:	f000 f850 	bl	800f3b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f314:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f316:	f000 f8e1 	bl	800f4dc <prvAddNewTaskToReadyList>
 800f31a:	e001      	b.n	800f320 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800f31c:	2300      	movs	r3, #0
 800f31e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f320:	697b      	ldr	r3, [r7, #20]
	}
 800f322:	4618      	mov	r0, r3
 800f324:	3728      	adds	r7, #40	; 0x28
 800f326:	46bd      	mov	sp, r7
 800f328:	bd80      	pop	{r7, pc}

0800f32a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f32a:	b580      	push	{r7, lr}
 800f32c:	b08c      	sub	sp, #48	; 0x30
 800f32e:	af04      	add	r7, sp, #16
 800f330:	60f8      	str	r0, [r7, #12]
 800f332:	60b9      	str	r1, [r7, #8]
 800f334:	603b      	str	r3, [r7, #0]
 800f336:	4613      	mov	r3, r2
 800f338:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f33a:	88fb      	ldrh	r3, [r7, #6]
 800f33c:	009b      	lsls	r3, r3, #2
 800f33e:	4618      	mov	r0, r3
 800f340:	f001 fad1 	bl	80108e6 <pvPortMalloc>
 800f344:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f346:	697b      	ldr	r3, [r7, #20]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d00e      	beq.n	800f36a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f34c:	2058      	movs	r0, #88	; 0x58
 800f34e:	f001 faca 	bl	80108e6 <pvPortMalloc>
 800f352:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f354:	69fb      	ldr	r3, [r7, #28]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d003      	beq.n	800f362 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f35a:	69fb      	ldr	r3, [r7, #28]
 800f35c:	697a      	ldr	r2, [r7, #20]
 800f35e:	631a      	str	r2, [r3, #48]	; 0x30
 800f360:	e005      	b.n	800f36e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f362:	6978      	ldr	r0, [r7, #20]
 800f364:	f001 facd 	bl	8010902 <vPortFree>
 800f368:	e001      	b.n	800f36e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f36a:	2300      	movs	r3, #0
 800f36c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f36e:	69fb      	ldr	r3, [r7, #28]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d017      	beq.n	800f3a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f374:	69fb      	ldr	r3, [r7, #28]
 800f376:	2200      	movs	r2, #0
 800f378:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f37c:	88fa      	ldrh	r2, [r7, #6]
 800f37e:	2300      	movs	r3, #0
 800f380:	9303      	str	r3, [sp, #12]
 800f382:	69fb      	ldr	r3, [r7, #28]
 800f384:	9302      	str	r3, [sp, #8]
 800f386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f388:	9301      	str	r3, [sp, #4]
 800f38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f38c:	9300      	str	r3, [sp, #0]
 800f38e:	683b      	ldr	r3, [r7, #0]
 800f390:	68b9      	ldr	r1, [r7, #8]
 800f392:	68f8      	ldr	r0, [r7, #12]
 800f394:	f000 f80e 	bl	800f3b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f398:	69f8      	ldr	r0, [r7, #28]
 800f39a:	f000 f89f 	bl	800f4dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f39e:	2301      	movs	r3, #1
 800f3a0:	61bb      	str	r3, [r7, #24]
 800f3a2:	e002      	b.n	800f3aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f3a4:	f04f 33ff 	mov.w	r3, #4294967295
 800f3a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f3aa:	69bb      	ldr	r3, [r7, #24]
	}
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	3720      	adds	r7, #32
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	bd80      	pop	{r7, pc}

0800f3b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b088      	sub	sp, #32
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	60f8      	str	r0, [r7, #12]
 800f3bc:	60b9      	str	r1, [r7, #8]
 800f3be:	607a      	str	r2, [r7, #4]
 800f3c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	009b      	lsls	r3, r3, #2
 800f3ca:	461a      	mov	r2, r3
 800f3cc:	21a5      	movs	r1, #165	; 0xa5
 800f3ce:	f001 fae5 	bl	801099c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f3d6:	6879      	ldr	r1, [r7, #4]
 800f3d8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800f3dc:	440b      	add	r3, r1
 800f3de:	009b      	lsls	r3, r3, #2
 800f3e0:	4413      	add	r3, r2
 800f3e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f3e4:	69bb      	ldr	r3, [r7, #24]
 800f3e6:	f023 0307 	bic.w	r3, r3, #7
 800f3ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f3ec:	69bb      	ldr	r3, [r7, #24]
 800f3ee:	f003 0307 	and.w	r3, r3, #7
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d00c      	beq.n	800f410 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800f3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3fa:	b672      	cpsid	i
 800f3fc:	f383 8811 	msr	BASEPRI, r3
 800f400:	f3bf 8f6f 	isb	sy
 800f404:	f3bf 8f4f 	dsb	sy
 800f408:	b662      	cpsie	i
 800f40a:	617b      	str	r3, [r7, #20]
}
 800f40c:	bf00      	nop
 800f40e:	e7fe      	b.n	800f40e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f410:	68bb      	ldr	r3, [r7, #8]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d01f      	beq.n	800f456 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f416:	2300      	movs	r3, #0
 800f418:	61fb      	str	r3, [r7, #28]
 800f41a:	e012      	b.n	800f442 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f41c:	68ba      	ldr	r2, [r7, #8]
 800f41e:	69fb      	ldr	r3, [r7, #28]
 800f420:	4413      	add	r3, r2
 800f422:	7819      	ldrb	r1, [r3, #0]
 800f424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f426:	69fb      	ldr	r3, [r7, #28]
 800f428:	4413      	add	r3, r2
 800f42a:	3334      	adds	r3, #52	; 0x34
 800f42c:	460a      	mov	r2, r1
 800f42e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f430:	68ba      	ldr	r2, [r7, #8]
 800f432:	69fb      	ldr	r3, [r7, #28]
 800f434:	4413      	add	r3, r2
 800f436:	781b      	ldrb	r3, [r3, #0]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d006      	beq.n	800f44a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f43c:	69fb      	ldr	r3, [r7, #28]
 800f43e:	3301      	adds	r3, #1
 800f440:	61fb      	str	r3, [r7, #28]
 800f442:	69fb      	ldr	r3, [r7, #28]
 800f444:	2b0f      	cmp	r3, #15
 800f446:	d9e9      	bls.n	800f41c <prvInitialiseNewTask+0x68>
 800f448:	e000      	b.n	800f44c <prvInitialiseNewTask+0x98>
			{
				break;
 800f44a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f44e:	2200      	movs	r2, #0
 800f450:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f454:	e003      	b.n	800f45e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f458:	2200      	movs	r2, #0
 800f45a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f460:	2b06      	cmp	r3, #6
 800f462:	d901      	bls.n	800f468 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f464:	2306      	movs	r3, #6
 800f466:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f46a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f46c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f472:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f476:	2200      	movs	r2, #0
 800f478:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f47c:	3304      	adds	r3, #4
 800f47e:	4618      	mov	r0, r3
 800f480:	f7fe fe68 	bl	800e154 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f486:	3318      	adds	r3, #24
 800f488:	4618      	mov	r0, r3
 800f48a:	f7fe fe63 	bl	800e154 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f492:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f496:	f1c3 0207 	rsb	r2, r3, #7
 800f49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f49c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800f4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f4b8:	683a      	ldr	r2, [r7, #0]
 800f4ba:	68f9      	ldr	r1, [r7, #12]
 800f4bc:	69b8      	ldr	r0, [r7, #24]
 800f4be:	f000 ff47 	bl	8010350 <pxPortInitialiseStack>
 800f4c2:	4602      	mov	r2, r0
 800f4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4c6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d002      	beq.n	800f4d4 <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f4d4:	bf00      	nop
 800f4d6:	3720      	adds	r7, #32
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	bd80      	pop	{r7, pc}

0800f4dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b082      	sub	sp, #8
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f4e4:	f001 f842 	bl	801056c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f4e8:	4b2a      	ldr	r3, [pc, #168]	; (800f594 <prvAddNewTaskToReadyList+0xb8>)
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	3301      	adds	r3, #1
 800f4ee:	4a29      	ldr	r2, [pc, #164]	; (800f594 <prvAddNewTaskToReadyList+0xb8>)
 800f4f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f4f2:	4b29      	ldr	r3, [pc, #164]	; (800f598 <prvAddNewTaskToReadyList+0xbc>)
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d109      	bne.n	800f50e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f4fa:	4a27      	ldr	r2, [pc, #156]	; (800f598 <prvAddNewTaskToReadyList+0xbc>)
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f500:	4b24      	ldr	r3, [pc, #144]	; (800f594 <prvAddNewTaskToReadyList+0xb8>)
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	2b01      	cmp	r3, #1
 800f506:	d110      	bne.n	800f52a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f508:	f000 fc22 	bl	800fd50 <prvInitialiseTaskLists>
 800f50c:	e00d      	b.n	800f52a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f50e:	4b23      	ldr	r3, [pc, #140]	; (800f59c <prvAddNewTaskToReadyList+0xc0>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d109      	bne.n	800f52a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f516:	4b20      	ldr	r3, [pc, #128]	; (800f598 <prvAddNewTaskToReadyList+0xbc>)
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f520:	429a      	cmp	r2, r3
 800f522:	d802      	bhi.n	800f52a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f524:	4a1c      	ldr	r2, [pc, #112]	; (800f598 <prvAddNewTaskToReadyList+0xbc>)
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f52a:	4b1d      	ldr	r3, [pc, #116]	; (800f5a0 <prvAddNewTaskToReadyList+0xc4>)
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	3301      	adds	r3, #1
 800f530:	4a1b      	ldr	r2, [pc, #108]	; (800f5a0 <prvAddNewTaskToReadyList+0xc4>)
 800f532:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f538:	2201      	movs	r2, #1
 800f53a:	409a      	lsls	r2, r3
 800f53c:	4b19      	ldr	r3, [pc, #100]	; (800f5a4 <prvAddNewTaskToReadyList+0xc8>)
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	4313      	orrs	r3, r2
 800f542:	4a18      	ldr	r2, [pc, #96]	; (800f5a4 <prvAddNewTaskToReadyList+0xc8>)
 800f544:	6013      	str	r3, [r2, #0]
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f54a:	4613      	mov	r3, r2
 800f54c:	009b      	lsls	r3, r3, #2
 800f54e:	4413      	add	r3, r2
 800f550:	009b      	lsls	r3, r3, #2
 800f552:	4a15      	ldr	r2, [pc, #84]	; (800f5a8 <prvAddNewTaskToReadyList+0xcc>)
 800f554:	441a      	add	r2, r3
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	3304      	adds	r3, #4
 800f55a:	4619      	mov	r1, r3
 800f55c:	4610      	mov	r0, r2
 800f55e:	f7fe fe06 	bl	800e16e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f562:	f001 f837 	bl	80105d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f566:	4b0d      	ldr	r3, [pc, #52]	; (800f59c <prvAddNewTaskToReadyList+0xc0>)
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d00e      	beq.n	800f58c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f56e:	4b0a      	ldr	r3, [pc, #40]	; (800f598 <prvAddNewTaskToReadyList+0xbc>)
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f578:	429a      	cmp	r2, r3
 800f57a:	d207      	bcs.n	800f58c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f57c:	4b0b      	ldr	r3, [pc, #44]	; (800f5ac <prvAddNewTaskToReadyList+0xd0>)
 800f57e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f582:	601a      	str	r2, [r3, #0]
 800f584:	f3bf 8f4f 	dsb	sy
 800f588:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f58c:	bf00      	nop
 800f58e:	3708      	adds	r7, #8
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}
 800f594:	200008a8 	.word	0x200008a8
 800f598:	200007a8 	.word	0x200007a8
 800f59c:	200008b4 	.word	0x200008b4
 800f5a0:	200008c4 	.word	0x200008c4
 800f5a4:	200008b0 	.word	0x200008b0
 800f5a8:	200007ac 	.word	0x200007ac
 800f5ac:	e000ed04 	.word	0xe000ed04

0800f5b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b084      	sub	sp, #16
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d019      	beq.n	800f5f6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f5c2:	4b14      	ldr	r3, [pc, #80]	; (800f614 <vTaskDelay+0x64>)
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d00c      	beq.n	800f5e4 <vTaskDelay+0x34>
	__asm volatile
 800f5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ce:	b672      	cpsid	i
 800f5d0:	f383 8811 	msr	BASEPRI, r3
 800f5d4:	f3bf 8f6f 	isb	sy
 800f5d8:	f3bf 8f4f 	dsb	sy
 800f5dc:	b662      	cpsie	i
 800f5de:	60bb      	str	r3, [r7, #8]
}
 800f5e0:	bf00      	nop
 800f5e2:	e7fe      	b.n	800f5e2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800f5e4:	f000 f87e 	bl	800f6e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f5e8:	2100      	movs	r1, #0
 800f5ea:	6878      	ldr	r0, [r7, #4]
 800f5ec:	f000 fe4a 	bl	8010284 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f5f0:	f000 f886 	bl	800f700 <xTaskResumeAll>
 800f5f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d107      	bne.n	800f60c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800f5fc:	4b06      	ldr	r3, [pc, #24]	; (800f618 <vTaskDelay+0x68>)
 800f5fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f602:	601a      	str	r2, [r3, #0]
 800f604:	f3bf 8f4f 	dsb	sy
 800f608:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f60c:	bf00      	nop
 800f60e:	3710      	adds	r7, #16
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}
 800f614:	200008d0 	.word	0x200008d0
 800f618:	e000ed04 	.word	0xe000ed04

0800f61c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b08a      	sub	sp, #40	; 0x28
 800f620:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f622:	2300      	movs	r3, #0
 800f624:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f626:	2300      	movs	r3, #0
 800f628:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f62a:	463a      	mov	r2, r7
 800f62c:	1d39      	adds	r1, r7, #4
 800f62e:	f107 0308 	add.w	r3, r7, #8
 800f632:	4618      	mov	r0, r3
 800f634:	f7f0 ffd2 	bl	80005dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f638:	6839      	ldr	r1, [r7, #0]
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	68ba      	ldr	r2, [r7, #8]
 800f63e:	9202      	str	r2, [sp, #8]
 800f640:	9301      	str	r3, [sp, #4]
 800f642:	2300      	movs	r3, #0
 800f644:	9300      	str	r3, [sp, #0]
 800f646:	2300      	movs	r3, #0
 800f648:	460a      	mov	r2, r1
 800f64a:	4920      	ldr	r1, [pc, #128]	; (800f6cc <vTaskStartScheduler+0xb0>)
 800f64c:	4820      	ldr	r0, [pc, #128]	; (800f6d0 <vTaskStartScheduler+0xb4>)
 800f64e:	f7ff fe09 	bl	800f264 <xTaskCreateStatic>
 800f652:	4603      	mov	r3, r0
 800f654:	4a1f      	ldr	r2, [pc, #124]	; (800f6d4 <vTaskStartScheduler+0xb8>)
 800f656:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f658:	4b1e      	ldr	r3, [pc, #120]	; (800f6d4 <vTaskStartScheduler+0xb8>)
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d002      	beq.n	800f666 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f660:	2301      	movs	r3, #1
 800f662:	617b      	str	r3, [r7, #20]
 800f664:	e001      	b.n	800f66a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f666:	2300      	movs	r3, #0
 800f668:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f66a:	697b      	ldr	r3, [r7, #20]
 800f66c:	2b01      	cmp	r3, #1
 800f66e:	d118      	bne.n	800f6a2 <vTaskStartScheduler+0x86>
	__asm volatile
 800f670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f674:	b672      	cpsid	i
 800f676:	f383 8811 	msr	BASEPRI, r3
 800f67a:	f3bf 8f6f 	isb	sy
 800f67e:	f3bf 8f4f 	dsb	sy
 800f682:	b662      	cpsie	i
 800f684:	613b      	str	r3, [r7, #16]
}
 800f686:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f688:	4b13      	ldr	r3, [pc, #76]	; (800f6d8 <vTaskStartScheduler+0xbc>)
 800f68a:	f04f 32ff 	mov.w	r2, #4294967295
 800f68e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f690:	4b12      	ldr	r3, [pc, #72]	; (800f6dc <vTaskStartScheduler+0xc0>)
 800f692:	2201      	movs	r2, #1
 800f694:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f696:	4b12      	ldr	r3, [pc, #72]	; (800f6e0 <vTaskStartScheduler+0xc4>)
 800f698:	2200      	movs	r2, #0
 800f69a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f69c:	f000 fee8 	bl	8010470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f6a0:	e010      	b.n	800f6c4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f6a2:	697b      	ldr	r3, [r7, #20]
 800f6a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6a8:	d10c      	bne.n	800f6c4 <vTaskStartScheduler+0xa8>
	__asm volatile
 800f6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6ae:	b672      	cpsid	i
 800f6b0:	f383 8811 	msr	BASEPRI, r3
 800f6b4:	f3bf 8f6f 	isb	sy
 800f6b8:	f3bf 8f4f 	dsb	sy
 800f6bc:	b662      	cpsie	i
 800f6be:	60fb      	str	r3, [r7, #12]
}
 800f6c0:	bf00      	nop
 800f6c2:	e7fe      	b.n	800f6c2 <vTaskStartScheduler+0xa6>
}
 800f6c4:	bf00      	nop
 800f6c6:	3718      	adds	r7, #24
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bd80      	pop	{r7, pc}
 800f6cc:	08011af0 	.word	0x08011af0
 800f6d0:	0800fd1d 	.word	0x0800fd1d
 800f6d4:	200008cc 	.word	0x200008cc
 800f6d8:	200008c8 	.word	0x200008c8
 800f6dc:	200008b4 	.word	0x200008b4
 800f6e0:	200008ac 	.word	0x200008ac

0800f6e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f6e4:	b480      	push	{r7}
 800f6e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f6e8:	4b04      	ldr	r3, [pc, #16]	; (800f6fc <vTaskSuspendAll+0x18>)
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	3301      	adds	r3, #1
 800f6ee:	4a03      	ldr	r2, [pc, #12]	; (800f6fc <vTaskSuspendAll+0x18>)
 800f6f0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f6f2:	bf00      	nop
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fa:	4770      	bx	lr
 800f6fc:	200008d0 	.word	0x200008d0

0800f700 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b084      	sub	sp, #16
 800f704:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f706:	2300      	movs	r3, #0
 800f708:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f70a:	2300      	movs	r3, #0
 800f70c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f70e:	4b42      	ldr	r3, [pc, #264]	; (800f818 <xTaskResumeAll+0x118>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d10c      	bne.n	800f730 <xTaskResumeAll+0x30>
	__asm volatile
 800f716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f71a:	b672      	cpsid	i
 800f71c:	f383 8811 	msr	BASEPRI, r3
 800f720:	f3bf 8f6f 	isb	sy
 800f724:	f3bf 8f4f 	dsb	sy
 800f728:	b662      	cpsie	i
 800f72a:	603b      	str	r3, [r7, #0]
}
 800f72c:	bf00      	nop
 800f72e:	e7fe      	b.n	800f72e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f730:	f000 ff1c 	bl	801056c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f734:	4b38      	ldr	r3, [pc, #224]	; (800f818 <xTaskResumeAll+0x118>)
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	3b01      	subs	r3, #1
 800f73a:	4a37      	ldr	r2, [pc, #220]	; (800f818 <xTaskResumeAll+0x118>)
 800f73c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f73e:	4b36      	ldr	r3, [pc, #216]	; (800f818 <xTaskResumeAll+0x118>)
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d161      	bne.n	800f80a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f746:	4b35      	ldr	r3, [pc, #212]	; (800f81c <xTaskResumeAll+0x11c>)
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d05d      	beq.n	800f80a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f74e:	e02e      	b.n	800f7ae <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f750:	4b33      	ldr	r3, [pc, #204]	; (800f820 <xTaskResumeAll+0x120>)
 800f752:	68db      	ldr	r3, [r3, #12]
 800f754:	68db      	ldr	r3, [r3, #12]
 800f756:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	3318      	adds	r3, #24
 800f75c:	4618      	mov	r0, r3
 800f75e:	f7fe fd63 	bl	800e228 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	3304      	adds	r3, #4
 800f766:	4618      	mov	r0, r3
 800f768:	f7fe fd5e 	bl	800e228 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f770:	2201      	movs	r2, #1
 800f772:	409a      	lsls	r2, r3
 800f774:	4b2b      	ldr	r3, [pc, #172]	; (800f824 <xTaskResumeAll+0x124>)
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	4313      	orrs	r3, r2
 800f77a:	4a2a      	ldr	r2, [pc, #168]	; (800f824 <xTaskResumeAll+0x124>)
 800f77c:	6013      	str	r3, [r2, #0]
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f782:	4613      	mov	r3, r2
 800f784:	009b      	lsls	r3, r3, #2
 800f786:	4413      	add	r3, r2
 800f788:	009b      	lsls	r3, r3, #2
 800f78a:	4a27      	ldr	r2, [pc, #156]	; (800f828 <xTaskResumeAll+0x128>)
 800f78c:	441a      	add	r2, r3
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	3304      	adds	r3, #4
 800f792:	4619      	mov	r1, r3
 800f794:	4610      	mov	r0, r2
 800f796:	f7fe fcea 	bl	800e16e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f79e:	4b23      	ldr	r3, [pc, #140]	; (800f82c <xTaskResumeAll+0x12c>)
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7a4:	429a      	cmp	r2, r3
 800f7a6:	d302      	bcc.n	800f7ae <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800f7a8:	4b21      	ldr	r3, [pc, #132]	; (800f830 <xTaskResumeAll+0x130>)
 800f7aa:	2201      	movs	r2, #1
 800f7ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f7ae:	4b1c      	ldr	r3, [pc, #112]	; (800f820 <xTaskResumeAll+0x120>)
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d1cc      	bne.n	800f750 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d001      	beq.n	800f7c0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f7bc:	f000 fb68 	bl	800fe90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f7c0:	4b1c      	ldr	r3, [pc, #112]	; (800f834 <xTaskResumeAll+0x134>)
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d010      	beq.n	800f7ee <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f7cc:	f000 f858 	bl	800f880 <xTaskIncrementTick>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d002      	beq.n	800f7dc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800f7d6:	4b16      	ldr	r3, [pc, #88]	; (800f830 <xTaskResumeAll+0x130>)
 800f7d8:	2201      	movs	r2, #1
 800f7da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	3b01      	subs	r3, #1
 800f7e0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d1f1      	bne.n	800f7cc <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800f7e8:	4b12      	ldr	r3, [pc, #72]	; (800f834 <xTaskResumeAll+0x134>)
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f7ee:	4b10      	ldr	r3, [pc, #64]	; (800f830 <xTaskResumeAll+0x130>)
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d009      	beq.n	800f80a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f7f6:	2301      	movs	r3, #1
 800f7f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f7fa:	4b0f      	ldr	r3, [pc, #60]	; (800f838 <xTaskResumeAll+0x138>)
 800f7fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f800:	601a      	str	r2, [r3, #0]
 800f802:	f3bf 8f4f 	dsb	sy
 800f806:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f80a:	f000 fee3 	bl	80105d4 <vPortExitCritical>

	return xAlreadyYielded;
 800f80e:	68bb      	ldr	r3, [r7, #8]
}
 800f810:	4618      	mov	r0, r3
 800f812:	3710      	adds	r7, #16
 800f814:	46bd      	mov	sp, r7
 800f816:	bd80      	pop	{r7, pc}
 800f818:	200008d0 	.word	0x200008d0
 800f81c:	200008a8 	.word	0x200008a8
 800f820:	20000868 	.word	0x20000868
 800f824:	200008b0 	.word	0x200008b0
 800f828:	200007ac 	.word	0x200007ac
 800f82c:	200007a8 	.word	0x200007a8
 800f830:	200008bc 	.word	0x200008bc
 800f834:	200008b8 	.word	0x200008b8
 800f838:	e000ed04 	.word	0xe000ed04

0800f83c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f83c:	b480      	push	{r7}
 800f83e:	b083      	sub	sp, #12
 800f840:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f842:	4b05      	ldr	r3, [pc, #20]	; (800f858 <xTaskGetTickCount+0x1c>)
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f848:	687b      	ldr	r3, [r7, #4]
}
 800f84a:	4618      	mov	r0, r3
 800f84c:	370c      	adds	r7, #12
 800f84e:	46bd      	mov	sp, r7
 800f850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f854:	4770      	bx	lr
 800f856:	bf00      	nop
 800f858:	200008ac 	.word	0x200008ac

0800f85c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b082      	sub	sp, #8
 800f860:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f862:	f000 ff6b 	bl	801073c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f866:	2300      	movs	r3, #0
 800f868:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f86a:	4b04      	ldr	r3, [pc, #16]	; (800f87c <xTaskGetTickCountFromISR+0x20>)
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f870:	683b      	ldr	r3, [r7, #0]
}
 800f872:	4618      	mov	r0, r3
 800f874:	3708      	adds	r7, #8
 800f876:	46bd      	mov	sp, r7
 800f878:	bd80      	pop	{r7, pc}
 800f87a:	bf00      	nop
 800f87c:	200008ac 	.word	0x200008ac

0800f880 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b086      	sub	sp, #24
 800f884:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f886:	2300      	movs	r3, #0
 800f888:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f88a:	4b4f      	ldr	r3, [pc, #316]	; (800f9c8 <xTaskIncrementTick+0x148>)
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	f040 808a 	bne.w	800f9a8 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f894:	4b4d      	ldr	r3, [pc, #308]	; (800f9cc <xTaskIncrementTick+0x14c>)
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	3301      	adds	r3, #1
 800f89a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f89c:	4a4b      	ldr	r2, [pc, #300]	; (800f9cc <xTaskIncrementTick+0x14c>)
 800f89e:	693b      	ldr	r3, [r7, #16]
 800f8a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f8a2:	693b      	ldr	r3, [r7, #16]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d122      	bne.n	800f8ee <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800f8a8:	4b49      	ldr	r3, [pc, #292]	; (800f9d0 <xTaskIncrementTick+0x150>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d00c      	beq.n	800f8cc <xTaskIncrementTick+0x4c>
	__asm volatile
 800f8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8b6:	b672      	cpsid	i
 800f8b8:	f383 8811 	msr	BASEPRI, r3
 800f8bc:	f3bf 8f6f 	isb	sy
 800f8c0:	f3bf 8f4f 	dsb	sy
 800f8c4:	b662      	cpsie	i
 800f8c6:	603b      	str	r3, [r7, #0]
}
 800f8c8:	bf00      	nop
 800f8ca:	e7fe      	b.n	800f8ca <xTaskIncrementTick+0x4a>
 800f8cc:	4b40      	ldr	r3, [pc, #256]	; (800f9d0 <xTaskIncrementTick+0x150>)
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	60fb      	str	r3, [r7, #12]
 800f8d2:	4b40      	ldr	r3, [pc, #256]	; (800f9d4 <xTaskIncrementTick+0x154>)
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	4a3e      	ldr	r2, [pc, #248]	; (800f9d0 <xTaskIncrementTick+0x150>)
 800f8d8:	6013      	str	r3, [r2, #0]
 800f8da:	4a3e      	ldr	r2, [pc, #248]	; (800f9d4 <xTaskIncrementTick+0x154>)
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	6013      	str	r3, [r2, #0]
 800f8e0:	4b3d      	ldr	r3, [pc, #244]	; (800f9d8 <xTaskIncrementTick+0x158>)
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	3301      	adds	r3, #1
 800f8e6:	4a3c      	ldr	r2, [pc, #240]	; (800f9d8 <xTaskIncrementTick+0x158>)
 800f8e8:	6013      	str	r3, [r2, #0]
 800f8ea:	f000 fad1 	bl	800fe90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f8ee:	4b3b      	ldr	r3, [pc, #236]	; (800f9dc <xTaskIncrementTick+0x15c>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	693a      	ldr	r2, [r7, #16]
 800f8f4:	429a      	cmp	r2, r3
 800f8f6:	d348      	bcc.n	800f98a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f8f8:	4b35      	ldr	r3, [pc, #212]	; (800f9d0 <xTaskIncrementTick+0x150>)
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d104      	bne.n	800f90c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f902:	4b36      	ldr	r3, [pc, #216]	; (800f9dc <xTaskIncrementTick+0x15c>)
 800f904:	f04f 32ff 	mov.w	r2, #4294967295
 800f908:	601a      	str	r2, [r3, #0]
					break;
 800f90a:	e03e      	b.n	800f98a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f90c:	4b30      	ldr	r3, [pc, #192]	; (800f9d0 <xTaskIncrementTick+0x150>)
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	68db      	ldr	r3, [r3, #12]
 800f912:	68db      	ldr	r3, [r3, #12]
 800f914:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f916:	68bb      	ldr	r3, [r7, #8]
 800f918:	685b      	ldr	r3, [r3, #4]
 800f91a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f91c:	693a      	ldr	r2, [r7, #16]
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	429a      	cmp	r2, r3
 800f922:	d203      	bcs.n	800f92c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f924:	4a2d      	ldr	r2, [pc, #180]	; (800f9dc <xTaskIncrementTick+0x15c>)
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f92a:	e02e      	b.n	800f98a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f92c:	68bb      	ldr	r3, [r7, #8]
 800f92e:	3304      	adds	r3, #4
 800f930:	4618      	mov	r0, r3
 800f932:	f7fe fc79 	bl	800e228 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f936:	68bb      	ldr	r3, [r7, #8]
 800f938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d004      	beq.n	800f948 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f93e:	68bb      	ldr	r3, [r7, #8]
 800f940:	3318      	adds	r3, #24
 800f942:	4618      	mov	r0, r3
 800f944:	f7fe fc70 	bl	800e228 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f94c:	2201      	movs	r2, #1
 800f94e:	409a      	lsls	r2, r3
 800f950:	4b23      	ldr	r3, [pc, #140]	; (800f9e0 <xTaskIncrementTick+0x160>)
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	4313      	orrs	r3, r2
 800f956:	4a22      	ldr	r2, [pc, #136]	; (800f9e0 <xTaskIncrementTick+0x160>)
 800f958:	6013      	str	r3, [r2, #0]
 800f95a:	68bb      	ldr	r3, [r7, #8]
 800f95c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f95e:	4613      	mov	r3, r2
 800f960:	009b      	lsls	r3, r3, #2
 800f962:	4413      	add	r3, r2
 800f964:	009b      	lsls	r3, r3, #2
 800f966:	4a1f      	ldr	r2, [pc, #124]	; (800f9e4 <xTaskIncrementTick+0x164>)
 800f968:	441a      	add	r2, r3
 800f96a:	68bb      	ldr	r3, [r7, #8]
 800f96c:	3304      	adds	r3, #4
 800f96e:	4619      	mov	r1, r3
 800f970:	4610      	mov	r0, r2
 800f972:	f7fe fbfc 	bl	800e16e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f976:	68bb      	ldr	r3, [r7, #8]
 800f978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f97a:	4b1b      	ldr	r3, [pc, #108]	; (800f9e8 <xTaskIncrementTick+0x168>)
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f980:	429a      	cmp	r2, r3
 800f982:	d3b9      	bcc.n	800f8f8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800f984:	2301      	movs	r3, #1
 800f986:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f988:	e7b6      	b.n	800f8f8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f98a:	4b17      	ldr	r3, [pc, #92]	; (800f9e8 <xTaskIncrementTick+0x168>)
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f990:	4914      	ldr	r1, [pc, #80]	; (800f9e4 <xTaskIncrementTick+0x164>)
 800f992:	4613      	mov	r3, r2
 800f994:	009b      	lsls	r3, r3, #2
 800f996:	4413      	add	r3, r2
 800f998:	009b      	lsls	r3, r3, #2
 800f99a:	440b      	add	r3, r1
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	2b01      	cmp	r3, #1
 800f9a0:	d907      	bls.n	800f9b2 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800f9a2:	2301      	movs	r3, #1
 800f9a4:	617b      	str	r3, [r7, #20]
 800f9a6:	e004      	b.n	800f9b2 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f9a8:	4b10      	ldr	r3, [pc, #64]	; (800f9ec <xTaskIncrementTick+0x16c>)
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	3301      	adds	r3, #1
 800f9ae:	4a0f      	ldr	r2, [pc, #60]	; (800f9ec <xTaskIncrementTick+0x16c>)
 800f9b0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f9b2:	4b0f      	ldr	r3, [pc, #60]	; (800f9f0 <xTaskIncrementTick+0x170>)
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d001      	beq.n	800f9be <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800f9ba:	2301      	movs	r3, #1
 800f9bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f9be:	697b      	ldr	r3, [r7, #20]
}
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	3718      	adds	r7, #24
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd80      	pop	{r7, pc}
 800f9c8:	200008d0 	.word	0x200008d0
 800f9cc:	200008ac 	.word	0x200008ac
 800f9d0:	20000860 	.word	0x20000860
 800f9d4:	20000864 	.word	0x20000864
 800f9d8:	200008c0 	.word	0x200008c0
 800f9dc:	200008c8 	.word	0x200008c8
 800f9e0:	200008b0 	.word	0x200008b0
 800f9e4:	200007ac 	.word	0x200007ac
 800f9e8:	200007a8 	.word	0x200007a8
 800f9ec:	200008b8 	.word	0x200008b8
 800f9f0:	200008bc 	.word	0x200008bc

0800f9f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b088      	sub	sp, #32
 800f9f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f9fa:	4b3a      	ldr	r3, [pc, #232]	; (800fae4 <vTaskSwitchContext+0xf0>)
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d003      	beq.n	800fa0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fa02:	4b39      	ldr	r3, [pc, #228]	; (800fae8 <vTaskSwitchContext+0xf4>)
 800fa04:	2201      	movs	r2, #1
 800fa06:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fa08:	e068      	b.n	800fadc <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 800fa0a:	4b37      	ldr	r3, [pc, #220]	; (800fae8 <vTaskSwitchContext+0xf4>)
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800fa10:	4b36      	ldr	r3, [pc, #216]	; (800faec <vTaskSwitchContext+0xf8>)
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa16:	61fb      	str	r3, [r7, #28]
 800fa18:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800fa1c:	61bb      	str	r3, [r7, #24]
 800fa1e:	69fb      	ldr	r3, [r7, #28]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	69ba      	ldr	r2, [r7, #24]
 800fa24:	429a      	cmp	r2, r3
 800fa26:	d111      	bne.n	800fa4c <vTaskSwitchContext+0x58>
 800fa28:	69fb      	ldr	r3, [r7, #28]
 800fa2a:	3304      	adds	r3, #4
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	69ba      	ldr	r2, [r7, #24]
 800fa30:	429a      	cmp	r2, r3
 800fa32:	d10b      	bne.n	800fa4c <vTaskSwitchContext+0x58>
 800fa34:	69fb      	ldr	r3, [r7, #28]
 800fa36:	3308      	adds	r3, #8
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	69ba      	ldr	r2, [r7, #24]
 800fa3c:	429a      	cmp	r2, r3
 800fa3e:	d105      	bne.n	800fa4c <vTaskSwitchContext+0x58>
 800fa40:	69fb      	ldr	r3, [r7, #28]
 800fa42:	330c      	adds	r3, #12
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	69ba      	ldr	r2, [r7, #24]
 800fa48:	429a      	cmp	r2, r3
 800fa4a:	d008      	beq.n	800fa5e <vTaskSwitchContext+0x6a>
 800fa4c:	4b27      	ldr	r3, [pc, #156]	; (800faec <vTaskSwitchContext+0xf8>)
 800fa4e:	681a      	ldr	r2, [r3, #0]
 800fa50:	4b26      	ldr	r3, [pc, #152]	; (800faec <vTaskSwitchContext+0xf8>)
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	3334      	adds	r3, #52	; 0x34
 800fa56:	4619      	mov	r1, r3
 800fa58:	4610      	mov	r0, r2
 800fa5a:	f7f0 fdac 	bl	80005b6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa5e:	4b24      	ldr	r3, [pc, #144]	; (800faf0 <vTaskSwitchContext+0xfc>)
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	fab3 f383 	clz	r3, r3
 800fa6a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800fa6c:	7afb      	ldrb	r3, [r7, #11]
 800fa6e:	f1c3 031f 	rsb	r3, r3, #31
 800fa72:	617b      	str	r3, [r7, #20]
 800fa74:	491f      	ldr	r1, [pc, #124]	; (800faf4 <vTaskSwitchContext+0x100>)
 800fa76:	697a      	ldr	r2, [r7, #20]
 800fa78:	4613      	mov	r3, r2
 800fa7a:	009b      	lsls	r3, r3, #2
 800fa7c:	4413      	add	r3, r2
 800fa7e:	009b      	lsls	r3, r3, #2
 800fa80:	440b      	add	r3, r1
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d10c      	bne.n	800faa2 <vTaskSwitchContext+0xae>
	__asm volatile
 800fa88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa8c:	b672      	cpsid	i
 800fa8e:	f383 8811 	msr	BASEPRI, r3
 800fa92:	f3bf 8f6f 	isb	sy
 800fa96:	f3bf 8f4f 	dsb	sy
 800fa9a:	b662      	cpsie	i
 800fa9c:	607b      	str	r3, [r7, #4]
}
 800fa9e:	bf00      	nop
 800faa0:	e7fe      	b.n	800faa0 <vTaskSwitchContext+0xac>
 800faa2:	697a      	ldr	r2, [r7, #20]
 800faa4:	4613      	mov	r3, r2
 800faa6:	009b      	lsls	r3, r3, #2
 800faa8:	4413      	add	r3, r2
 800faaa:	009b      	lsls	r3, r3, #2
 800faac:	4a11      	ldr	r2, [pc, #68]	; (800faf4 <vTaskSwitchContext+0x100>)
 800faae:	4413      	add	r3, r2
 800fab0:	613b      	str	r3, [r7, #16]
 800fab2:	693b      	ldr	r3, [r7, #16]
 800fab4:	685b      	ldr	r3, [r3, #4]
 800fab6:	685a      	ldr	r2, [r3, #4]
 800fab8:	693b      	ldr	r3, [r7, #16]
 800faba:	605a      	str	r2, [r3, #4]
 800fabc:	693b      	ldr	r3, [r7, #16]
 800fabe:	685a      	ldr	r2, [r3, #4]
 800fac0:	693b      	ldr	r3, [r7, #16]
 800fac2:	3308      	adds	r3, #8
 800fac4:	429a      	cmp	r2, r3
 800fac6:	d104      	bne.n	800fad2 <vTaskSwitchContext+0xde>
 800fac8:	693b      	ldr	r3, [r7, #16]
 800faca:	685b      	ldr	r3, [r3, #4]
 800facc:	685a      	ldr	r2, [r3, #4]
 800face:	693b      	ldr	r3, [r7, #16]
 800fad0:	605a      	str	r2, [r3, #4]
 800fad2:	693b      	ldr	r3, [r7, #16]
 800fad4:	685b      	ldr	r3, [r3, #4]
 800fad6:	68db      	ldr	r3, [r3, #12]
 800fad8:	4a04      	ldr	r2, [pc, #16]	; (800faec <vTaskSwitchContext+0xf8>)
 800fada:	6013      	str	r3, [r2, #0]
}
 800fadc:	bf00      	nop
 800fade:	3720      	adds	r7, #32
 800fae0:	46bd      	mov	sp, r7
 800fae2:	bd80      	pop	{r7, pc}
 800fae4:	200008d0 	.word	0x200008d0
 800fae8:	200008bc 	.word	0x200008bc
 800faec:	200007a8 	.word	0x200007a8
 800faf0:	200008b0 	.word	0x200008b0
 800faf4:	200007ac 	.word	0x200007ac

0800faf8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b084      	sub	sp, #16
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
 800fb00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d10c      	bne.n	800fb22 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800fb08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb0c:	b672      	cpsid	i
 800fb0e:	f383 8811 	msr	BASEPRI, r3
 800fb12:	f3bf 8f6f 	isb	sy
 800fb16:	f3bf 8f4f 	dsb	sy
 800fb1a:	b662      	cpsie	i
 800fb1c:	60fb      	str	r3, [r7, #12]
}
 800fb1e:	bf00      	nop
 800fb20:	e7fe      	b.n	800fb20 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fb22:	4b07      	ldr	r3, [pc, #28]	; (800fb40 <vTaskPlaceOnEventList+0x48>)
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	3318      	adds	r3, #24
 800fb28:	4619      	mov	r1, r3
 800fb2a:	6878      	ldr	r0, [r7, #4]
 800fb2c:	f7fe fb43 	bl	800e1b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fb30:	2101      	movs	r1, #1
 800fb32:	6838      	ldr	r0, [r7, #0]
 800fb34:	f000 fba6 	bl	8010284 <prvAddCurrentTaskToDelayedList>
}
 800fb38:	bf00      	nop
 800fb3a:	3710      	adds	r7, #16
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}
 800fb40:	200007a8 	.word	0x200007a8

0800fb44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b086      	sub	sp, #24
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	68db      	ldr	r3, [r3, #12]
 800fb50:	68db      	ldr	r3, [r3, #12]
 800fb52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fb54:	693b      	ldr	r3, [r7, #16]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d10c      	bne.n	800fb74 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800fb5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb5e:	b672      	cpsid	i
 800fb60:	f383 8811 	msr	BASEPRI, r3
 800fb64:	f3bf 8f6f 	isb	sy
 800fb68:	f3bf 8f4f 	dsb	sy
 800fb6c:	b662      	cpsie	i
 800fb6e:	60fb      	str	r3, [r7, #12]
}
 800fb70:	bf00      	nop
 800fb72:	e7fe      	b.n	800fb72 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fb74:	693b      	ldr	r3, [r7, #16]
 800fb76:	3318      	adds	r3, #24
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f7fe fb55 	bl	800e228 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb7e:	4b1d      	ldr	r3, [pc, #116]	; (800fbf4 <xTaskRemoveFromEventList+0xb0>)
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d11c      	bne.n	800fbc0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fb86:	693b      	ldr	r3, [r7, #16]
 800fb88:	3304      	adds	r3, #4
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f7fe fb4c 	bl	800e228 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fb90:	693b      	ldr	r3, [r7, #16]
 800fb92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb94:	2201      	movs	r2, #1
 800fb96:	409a      	lsls	r2, r3
 800fb98:	4b17      	ldr	r3, [pc, #92]	; (800fbf8 <xTaskRemoveFromEventList+0xb4>)
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	4313      	orrs	r3, r2
 800fb9e:	4a16      	ldr	r2, [pc, #88]	; (800fbf8 <xTaskRemoveFromEventList+0xb4>)
 800fba0:	6013      	str	r3, [r2, #0]
 800fba2:	693b      	ldr	r3, [r7, #16]
 800fba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fba6:	4613      	mov	r3, r2
 800fba8:	009b      	lsls	r3, r3, #2
 800fbaa:	4413      	add	r3, r2
 800fbac:	009b      	lsls	r3, r3, #2
 800fbae:	4a13      	ldr	r2, [pc, #76]	; (800fbfc <xTaskRemoveFromEventList+0xb8>)
 800fbb0:	441a      	add	r2, r3
 800fbb2:	693b      	ldr	r3, [r7, #16]
 800fbb4:	3304      	adds	r3, #4
 800fbb6:	4619      	mov	r1, r3
 800fbb8:	4610      	mov	r0, r2
 800fbba:	f7fe fad8 	bl	800e16e <vListInsertEnd>
 800fbbe:	e005      	b.n	800fbcc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fbc0:	693b      	ldr	r3, [r7, #16]
 800fbc2:	3318      	adds	r3, #24
 800fbc4:	4619      	mov	r1, r3
 800fbc6:	480e      	ldr	r0, [pc, #56]	; (800fc00 <xTaskRemoveFromEventList+0xbc>)
 800fbc8:	f7fe fad1 	bl	800e16e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fbcc:	693b      	ldr	r3, [r7, #16]
 800fbce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbd0:	4b0c      	ldr	r3, [pc, #48]	; (800fc04 <xTaskRemoveFromEventList+0xc0>)
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbd6:	429a      	cmp	r2, r3
 800fbd8:	d905      	bls.n	800fbe6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fbda:	2301      	movs	r3, #1
 800fbdc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fbde:	4b0a      	ldr	r3, [pc, #40]	; (800fc08 <xTaskRemoveFromEventList+0xc4>)
 800fbe0:	2201      	movs	r2, #1
 800fbe2:	601a      	str	r2, [r3, #0]
 800fbe4:	e001      	b.n	800fbea <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fbea:	697b      	ldr	r3, [r7, #20]
}
 800fbec:	4618      	mov	r0, r3
 800fbee:	3718      	adds	r7, #24
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	bd80      	pop	{r7, pc}
 800fbf4:	200008d0 	.word	0x200008d0
 800fbf8:	200008b0 	.word	0x200008b0
 800fbfc:	200007ac 	.word	0x200007ac
 800fc00:	20000868 	.word	0x20000868
 800fc04:	200007a8 	.word	0x200007a8
 800fc08:	200008bc 	.word	0x200008bc

0800fc0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fc0c:	b480      	push	{r7}
 800fc0e:	b083      	sub	sp, #12
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fc14:	4b06      	ldr	r3, [pc, #24]	; (800fc30 <vTaskInternalSetTimeOutState+0x24>)
 800fc16:	681a      	ldr	r2, [r3, #0]
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fc1c:	4b05      	ldr	r3, [pc, #20]	; (800fc34 <vTaskInternalSetTimeOutState+0x28>)
 800fc1e:	681a      	ldr	r2, [r3, #0]
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	605a      	str	r2, [r3, #4]
}
 800fc24:	bf00      	nop
 800fc26:	370c      	adds	r7, #12
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2e:	4770      	bx	lr
 800fc30:	200008c0 	.word	0x200008c0
 800fc34:	200008ac 	.word	0x200008ac

0800fc38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b088      	sub	sp, #32
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
 800fc40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d10c      	bne.n	800fc62 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800fc48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc4c:	b672      	cpsid	i
 800fc4e:	f383 8811 	msr	BASEPRI, r3
 800fc52:	f3bf 8f6f 	isb	sy
 800fc56:	f3bf 8f4f 	dsb	sy
 800fc5a:	b662      	cpsie	i
 800fc5c:	613b      	str	r3, [r7, #16]
}
 800fc5e:	bf00      	nop
 800fc60:	e7fe      	b.n	800fc60 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d10c      	bne.n	800fc82 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800fc68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc6c:	b672      	cpsid	i
 800fc6e:	f383 8811 	msr	BASEPRI, r3
 800fc72:	f3bf 8f6f 	isb	sy
 800fc76:	f3bf 8f4f 	dsb	sy
 800fc7a:	b662      	cpsie	i
 800fc7c:	60fb      	str	r3, [r7, #12]
}
 800fc7e:	bf00      	nop
 800fc80:	e7fe      	b.n	800fc80 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800fc82:	f000 fc73 	bl	801056c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fc86:	4b1d      	ldr	r3, [pc, #116]	; (800fcfc <xTaskCheckForTimeOut+0xc4>)
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	685b      	ldr	r3, [r3, #4]
 800fc90:	69ba      	ldr	r2, [r7, #24]
 800fc92:	1ad3      	subs	r3, r2, r3
 800fc94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fc96:	683b      	ldr	r3, [r7, #0]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc9e:	d102      	bne.n	800fca6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fca0:	2300      	movs	r3, #0
 800fca2:	61fb      	str	r3, [r7, #28]
 800fca4:	e023      	b.n	800fcee <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681a      	ldr	r2, [r3, #0]
 800fcaa:	4b15      	ldr	r3, [pc, #84]	; (800fd00 <xTaskCheckForTimeOut+0xc8>)
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	429a      	cmp	r2, r3
 800fcb0:	d007      	beq.n	800fcc2 <xTaskCheckForTimeOut+0x8a>
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	685b      	ldr	r3, [r3, #4]
 800fcb6:	69ba      	ldr	r2, [r7, #24]
 800fcb8:	429a      	cmp	r2, r3
 800fcba:	d302      	bcc.n	800fcc2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fcbc:	2301      	movs	r3, #1
 800fcbe:	61fb      	str	r3, [r7, #28]
 800fcc0:	e015      	b.n	800fcee <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fcc2:	683b      	ldr	r3, [r7, #0]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	697a      	ldr	r2, [r7, #20]
 800fcc8:	429a      	cmp	r2, r3
 800fcca:	d20b      	bcs.n	800fce4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	681a      	ldr	r2, [r3, #0]
 800fcd0:	697b      	ldr	r3, [r7, #20]
 800fcd2:	1ad2      	subs	r2, r2, r3
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fcd8:	6878      	ldr	r0, [r7, #4]
 800fcda:	f7ff ff97 	bl	800fc0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fcde:	2300      	movs	r3, #0
 800fce0:	61fb      	str	r3, [r7, #28]
 800fce2:	e004      	b.n	800fcee <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800fce4:	683b      	ldr	r3, [r7, #0]
 800fce6:	2200      	movs	r2, #0
 800fce8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fcea:	2301      	movs	r3, #1
 800fcec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fcee:	f000 fc71 	bl	80105d4 <vPortExitCritical>

	return xReturn;
 800fcf2:	69fb      	ldr	r3, [r7, #28]
}
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	3720      	adds	r7, #32
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}
 800fcfc:	200008ac 	.word	0x200008ac
 800fd00:	200008c0 	.word	0x200008c0

0800fd04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fd04:	b480      	push	{r7}
 800fd06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fd08:	4b03      	ldr	r3, [pc, #12]	; (800fd18 <vTaskMissedYield+0x14>)
 800fd0a:	2201      	movs	r2, #1
 800fd0c:	601a      	str	r2, [r3, #0]
}
 800fd0e:	bf00      	nop
 800fd10:	46bd      	mov	sp, r7
 800fd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd16:	4770      	bx	lr
 800fd18:	200008bc 	.word	0x200008bc

0800fd1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b082      	sub	sp, #8
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fd24:	f000 f854 	bl	800fdd0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fd28:	4b07      	ldr	r3, [pc, #28]	; (800fd48 <prvIdleTask+0x2c>)
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	2b01      	cmp	r3, #1
 800fd2e:	d907      	bls.n	800fd40 <prvIdleTask+0x24>
			{
				taskYIELD();
 800fd30:	4b06      	ldr	r3, [pc, #24]	; (800fd4c <prvIdleTask+0x30>)
 800fd32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd36:	601a      	str	r2, [r3, #0]
 800fd38:	f3bf 8f4f 	dsb	sy
 800fd3c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800fd40:	f7f0 fc32 	bl	80005a8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800fd44:	e7ee      	b.n	800fd24 <prvIdleTask+0x8>
 800fd46:	bf00      	nop
 800fd48:	200007ac 	.word	0x200007ac
 800fd4c:	e000ed04 	.word	0xe000ed04

0800fd50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b082      	sub	sp, #8
 800fd54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fd56:	2300      	movs	r3, #0
 800fd58:	607b      	str	r3, [r7, #4]
 800fd5a:	e00c      	b.n	800fd76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fd5c:	687a      	ldr	r2, [r7, #4]
 800fd5e:	4613      	mov	r3, r2
 800fd60:	009b      	lsls	r3, r3, #2
 800fd62:	4413      	add	r3, r2
 800fd64:	009b      	lsls	r3, r3, #2
 800fd66:	4a12      	ldr	r2, [pc, #72]	; (800fdb0 <prvInitialiseTaskLists+0x60>)
 800fd68:	4413      	add	r3, r2
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f7fe f9d2 	bl	800e114 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	3301      	adds	r3, #1
 800fd74:	607b      	str	r3, [r7, #4]
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	2b06      	cmp	r3, #6
 800fd7a:	d9ef      	bls.n	800fd5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fd7c:	480d      	ldr	r0, [pc, #52]	; (800fdb4 <prvInitialiseTaskLists+0x64>)
 800fd7e:	f7fe f9c9 	bl	800e114 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fd82:	480d      	ldr	r0, [pc, #52]	; (800fdb8 <prvInitialiseTaskLists+0x68>)
 800fd84:	f7fe f9c6 	bl	800e114 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fd88:	480c      	ldr	r0, [pc, #48]	; (800fdbc <prvInitialiseTaskLists+0x6c>)
 800fd8a:	f7fe f9c3 	bl	800e114 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fd8e:	480c      	ldr	r0, [pc, #48]	; (800fdc0 <prvInitialiseTaskLists+0x70>)
 800fd90:	f7fe f9c0 	bl	800e114 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fd94:	480b      	ldr	r0, [pc, #44]	; (800fdc4 <prvInitialiseTaskLists+0x74>)
 800fd96:	f7fe f9bd 	bl	800e114 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fd9a:	4b0b      	ldr	r3, [pc, #44]	; (800fdc8 <prvInitialiseTaskLists+0x78>)
 800fd9c:	4a05      	ldr	r2, [pc, #20]	; (800fdb4 <prvInitialiseTaskLists+0x64>)
 800fd9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fda0:	4b0a      	ldr	r3, [pc, #40]	; (800fdcc <prvInitialiseTaskLists+0x7c>)
 800fda2:	4a05      	ldr	r2, [pc, #20]	; (800fdb8 <prvInitialiseTaskLists+0x68>)
 800fda4:	601a      	str	r2, [r3, #0]
}
 800fda6:	bf00      	nop
 800fda8:	3708      	adds	r7, #8
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	bd80      	pop	{r7, pc}
 800fdae:	bf00      	nop
 800fdb0:	200007ac 	.word	0x200007ac
 800fdb4:	20000838 	.word	0x20000838
 800fdb8:	2000084c 	.word	0x2000084c
 800fdbc:	20000868 	.word	0x20000868
 800fdc0:	2000087c 	.word	0x2000087c
 800fdc4:	20000894 	.word	0x20000894
 800fdc8:	20000860 	.word	0x20000860
 800fdcc:	20000864 	.word	0x20000864

0800fdd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b082      	sub	sp, #8
 800fdd4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fdd6:	e019      	b.n	800fe0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fdd8:	f000 fbc8 	bl	801056c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fddc:	4b10      	ldr	r3, [pc, #64]	; (800fe20 <prvCheckTasksWaitingTermination+0x50>)
 800fdde:	68db      	ldr	r3, [r3, #12]
 800fde0:	68db      	ldr	r3, [r3, #12]
 800fde2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	3304      	adds	r3, #4
 800fde8:	4618      	mov	r0, r3
 800fdea:	f7fe fa1d 	bl	800e228 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fdee:	4b0d      	ldr	r3, [pc, #52]	; (800fe24 <prvCheckTasksWaitingTermination+0x54>)
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	3b01      	subs	r3, #1
 800fdf4:	4a0b      	ldr	r2, [pc, #44]	; (800fe24 <prvCheckTasksWaitingTermination+0x54>)
 800fdf6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fdf8:	4b0b      	ldr	r3, [pc, #44]	; (800fe28 <prvCheckTasksWaitingTermination+0x58>)
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	3b01      	subs	r3, #1
 800fdfe:	4a0a      	ldr	r2, [pc, #40]	; (800fe28 <prvCheckTasksWaitingTermination+0x58>)
 800fe00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fe02:	f000 fbe7 	bl	80105d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	f000 f810 	bl	800fe2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fe0c:	4b06      	ldr	r3, [pc, #24]	; (800fe28 <prvCheckTasksWaitingTermination+0x58>)
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d1e1      	bne.n	800fdd8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fe14:	bf00      	nop
 800fe16:	bf00      	nop
 800fe18:	3708      	adds	r7, #8
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}
 800fe1e:	bf00      	nop
 800fe20:	2000087c 	.word	0x2000087c
 800fe24:	200008a8 	.word	0x200008a8
 800fe28:	20000890 	.word	0x20000890

0800fe2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b084      	sub	sp, #16
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d108      	bne.n	800fe50 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe42:	4618      	mov	r0, r3
 800fe44:	f000 fd5d 	bl	8010902 <vPortFree>
				vPortFree( pxTCB );
 800fe48:	6878      	ldr	r0, [r7, #4]
 800fe4a:	f000 fd5a 	bl	8010902 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fe4e:	e01a      	b.n	800fe86 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800fe56:	2b01      	cmp	r3, #1
 800fe58:	d103      	bne.n	800fe62 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800fe5a:	6878      	ldr	r0, [r7, #4]
 800fe5c:	f000 fd51 	bl	8010902 <vPortFree>
	}
 800fe60:	e011      	b.n	800fe86 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800fe68:	2b02      	cmp	r3, #2
 800fe6a:	d00c      	beq.n	800fe86 <prvDeleteTCB+0x5a>
	__asm volatile
 800fe6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe70:	b672      	cpsid	i
 800fe72:	f383 8811 	msr	BASEPRI, r3
 800fe76:	f3bf 8f6f 	isb	sy
 800fe7a:	f3bf 8f4f 	dsb	sy
 800fe7e:	b662      	cpsie	i
 800fe80:	60fb      	str	r3, [r7, #12]
}
 800fe82:	bf00      	nop
 800fe84:	e7fe      	b.n	800fe84 <prvDeleteTCB+0x58>
	}
 800fe86:	bf00      	nop
 800fe88:	3710      	adds	r7, #16
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bd80      	pop	{r7, pc}
	...

0800fe90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fe90:	b480      	push	{r7}
 800fe92:	b083      	sub	sp, #12
 800fe94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fe96:	4b0c      	ldr	r3, [pc, #48]	; (800fec8 <prvResetNextTaskUnblockTime+0x38>)
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d104      	bne.n	800feaa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fea0:	4b0a      	ldr	r3, [pc, #40]	; (800fecc <prvResetNextTaskUnblockTime+0x3c>)
 800fea2:	f04f 32ff 	mov.w	r2, #4294967295
 800fea6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fea8:	e008      	b.n	800febc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800feaa:	4b07      	ldr	r3, [pc, #28]	; (800fec8 <prvResetNextTaskUnblockTime+0x38>)
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	68db      	ldr	r3, [r3, #12]
 800feb0:	68db      	ldr	r3, [r3, #12]
 800feb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	685b      	ldr	r3, [r3, #4]
 800feb8:	4a04      	ldr	r2, [pc, #16]	; (800fecc <prvResetNextTaskUnblockTime+0x3c>)
 800feba:	6013      	str	r3, [r2, #0]
}
 800febc:	bf00      	nop
 800febe:	370c      	adds	r7, #12
 800fec0:	46bd      	mov	sp, r7
 800fec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec6:	4770      	bx	lr
 800fec8:	20000860 	.word	0x20000860
 800fecc:	200008c8 	.word	0x200008c8

0800fed0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fed0:	b480      	push	{r7}
 800fed2:	b083      	sub	sp, #12
 800fed4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fed6:	4b0b      	ldr	r3, [pc, #44]	; (800ff04 <xTaskGetSchedulerState+0x34>)
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d102      	bne.n	800fee4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fede:	2301      	movs	r3, #1
 800fee0:	607b      	str	r3, [r7, #4]
 800fee2:	e008      	b.n	800fef6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fee4:	4b08      	ldr	r3, [pc, #32]	; (800ff08 <xTaskGetSchedulerState+0x38>)
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d102      	bne.n	800fef2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800feec:	2302      	movs	r3, #2
 800feee:	607b      	str	r3, [r7, #4]
 800fef0:	e001      	b.n	800fef6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fef2:	2300      	movs	r3, #0
 800fef4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fef6:	687b      	ldr	r3, [r7, #4]
	}
 800fef8:	4618      	mov	r0, r3
 800fefa:	370c      	adds	r7, #12
 800fefc:	46bd      	mov	sp, r7
 800fefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff02:	4770      	bx	lr
 800ff04:	200008b4 	.word	0x200008b4
 800ff08:	200008d0 	.word	0x200008d0

0800ff0c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b084      	sub	sp, #16
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d069      	beq.n	800fff6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ff22:	68bb      	ldr	r3, [r7, #8]
 800ff24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff26:	4b36      	ldr	r3, [pc, #216]	; (8010000 <xTaskPriorityInherit+0xf4>)
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff2c:	429a      	cmp	r2, r3
 800ff2e:	d259      	bcs.n	800ffe4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ff30:	68bb      	ldr	r3, [r7, #8]
 800ff32:	699b      	ldr	r3, [r3, #24]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	db06      	blt.n	800ff46 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff38:	4b31      	ldr	r3, [pc, #196]	; (8010000 <xTaskPriorityInherit+0xf4>)
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff3e:	f1c3 0207 	rsb	r2, r3, #7
 800ff42:	68bb      	ldr	r3, [r7, #8]
 800ff44:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ff46:	68bb      	ldr	r3, [r7, #8]
 800ff48:	6959      	ldr	r1, [r3, #20]
 800ff4a:	68bb      	ldr	r3, [r7, #8]
 800ff4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff4e:	4613      	mov	r3, r2
 800ff50:	009b      	lsls	r3, r3, #2
 800ff52:	4413      	add	r3, r2
 800ff54:	009b      	lsls	r3, r3, #2
 800ff56:	4a2b      	ldr	r2, [pc, #172]	; (8010004 <xTaskPriorityInherit+0xf8>)
 800ff58:	4413      	add	r3, r2
 800ff5a:	4299      	cmp	r1, r3
 800ff5c:	d13a      	bne.n	800ffd4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff5e:	68bb      	ldr	r3, [r7, #8]
 800ff60:	3304      	adds	r3, #4
 800ff62:	4618      	mov	r0, r3
 800ff64:	f7fe f960 	bl	800e228 <uxListRemove>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d115      	bne.n	800ff9a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800ff6e:	68bb      	ldr	r3, [r7, #8]
 800ff70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff72:	4924      	ldr	r1, [pc, #144]	; (8010004 <xTaskPriorityInherit+0xf8>)
 800ff74:	4613      	mov	r3, r2
 800ff76:	009b      	lsls	r3, r3, #2
 800ff78:	4413      	add	r3, r2
 800ff7a:	009b      	lsls	r3, r3, #2
 800ff7c:	440b      	add	r3, r1
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d10a      	bne.n	800ff9a <xTaskPriorityInherit+0x8e>
 800ff84:	68bb      	ldr	r3, [r7, #8]
 800ff86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff88:	2201      	movs	r2, #1
 800ff8a:	fa02 f303 	lsl.w	r3, r2, r3
 800ff8e:	43da      	mvns	r2, r3
 800ff90:	4b1d      	ldr	r3, [pc, #116]	; (8010008 <xTaskPriorityInherit+0xfc>)
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	4013      	ands	r3, r2
 800ff96:	4a1c      	ldr	r2, [pc, #112]	; (8010008 <xTaskPriorityInherit+0xfc>)
 800ff98:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ff9a:	4b19      	ldr	r3, [pc, #100]	; (8010000 <xTaskPriorityInherit+0xf4>)
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ffa4:	68bb      	ldr	r3, [r7, #8]
 800ffa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffa8:	2201      	movs	r2, #1
 800ffaa:	409a      	lsls	r2, r3
 800ffac:	4b16      	ldr	r3, [pc, #88]	; (8010008 <xTaskPriorityInherit+0xfc>)
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	4313      	orrs	r3, r2
 800ffb2:	4a15      	ldr	r2, [pc, #84]	; (8010008 <xTaskPriorityInherit+0xfc>)
 800ffb4:	6013      	str	r3, [r2, #0]
 800ffb6:	68bb      	ldr	r3, [r7, #8]
 800ffb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffba:	4613      	mov	r3, r2
 800ffbc:	009b      	lsls	r3, r3, #2
 800ffbe:	4413      	add	r3, r2
 800ffc0:	009b      	lsls	r3, r3, #2
 800ffc2:	4a10      	ldr	r2, [pc, #64]	; (8010004 <xTaskPriorityInherit+0xf8>)
 800ffc4:	441a      	add	r2, r3
 800ffc6:	68bb      	ldr	r3, [r7, #8]
 800ffc8:	3304      	adds	r3, #4
 800ffca:	4619      	mov	r1, r3
 800ffcc:	4610      	mov	r0, r2
 800ffce:	f7fe f8ce 	bl	800e16e <vListInsertEnd>
 800ffd2:	e004      	b.n	800ffde <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ffd4:	4b0a      	ldr	r3, [pc, #40]	; (8010000 <xTaskPriorityInherit+0xf4>)
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffda:	68bb      	ldr	r3, [r7, #8]
 800ffdc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ffde:	2301      	movs	r3, #1
 800ffe0:	60fb      	str	r3, [r7, #12]
 800ffe2:	e008      	b.n	800fff6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ffe4:	68bb      	ldr	r3, [r7, #8]
 800ffe6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ffe8:	4b05      	ldr	r3, [pc, #20]	; (8010000 <xTaskPriorityInherit+0xf4>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffee:	429a      	cmp	r2, r3
 800fff0:	d201      	bcs.n	800fff6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800fff2:	2301      	movs	r3, #1
 800fff4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fff6:	68fb      	ldr	r3, [r7, #12]
	}
 800fff8:	4618      	mov	r0, r3
 800fffa:	3710      	adds	r7, #16
 800fffc:	46bd      	mov	sp, r7
 800fffe:	bd80      	pop	{r7, pc}
 8010000:	200007a8 	.word	0x200007a8
 8010004:	200007ac 	.word	0x200007ac
 8010008:	200008b0 	.word	0x200008b0

0801000c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801000c:	b580      	push	{r7, lr}
 801000e:	b086      	sub	sp, #24
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010018:	2300      	movs	r3, #0
 801001a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d072      	beq.n	8010108 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010022:	4b3c      	ldr	r3, [pc, #240]	; (8010114 <xTaskPriorityDisinherit+0x108>)
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	693a      	ldr	r2, [r7, #16]
 8010028:	429a      	cmp	r2, r3
 801002a:	d00c      	beq.n	8010046 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 801002c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010030:	b672      	cpsid	i
 8010032:	f383 8811 	msr	BASEPRI, r3
 8010036:	f3bf 8f6f 	isb	sy
 801003a:	f3bf 8f4f 	dsb	sy
 801003e:	b662      	cpsie	i
 8010040:	60fb      	str	r3, [r7, #12]
}
 8010042:	bf00      	nop
 8010044:	e7fe      	b.n	8010044 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8010046:	693b      	ldr	r3, [r7, #16]
 8010048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801004a:	2b00      	cmp	r3, #0
 801004c:	d10c      	bne.n	8010068 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 801004e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010052:	b672      	cpsid	i
 8010054:	f383 8811 	msr	BASEPRI, r3
 8010058:	f3bf 8f6f 	isb	sy
 801005c:	f3bf 8f4f 	dsb	sy
 8010060:	b662      	cpsie	i
 8010062:	60bb      	str	r3, [r7, #8]
}
 8010064:	bf00      	nop
 8010066:	e7fe      	b.n	8010066 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8010068:	693b      	ldr	r3, [r7, #16]
 801006a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801006c:	1e5a      	subs	r2, r3, #1
 801006e:	693b      	ldr	r3, [r7, #16]
 8010070:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010072:	693b      	ldr	r3, [r7, #16]
 8010074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010076:	693b      	ldr	r3, [r7, #16]
 8010078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801007a:	429a      	cmp	r2, r3
 801007c:	d044      	beq.n	8010108 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801007e:	693b      	ldr	r3, [r7, #16]
 8010080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010082:	2b00      	cmp	r3, #0
 8010084:	d140      	bne.n	8010108 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010086:	693b      	ldr	r3, [r7, #16]
 8010088:	3304      	adds	r3, #4
 801008a:	4618      	mov	r0, r3
 801008c:	f7fe f8cc 	bl	800e228 <uxListRemove>
 8010090:	4603      	mov	r3, r0
 8010092:	2b00      	cmp	r3, #0
 8010094:	d115      	bne.n	80100c2 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010096:	693b      	ldr	r3, [r7, #16]
 8010098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801009a:	491f      	ldr	r1, [pc, #124]	; (8010118 <xTaskPriorityDisinherit+0x10c>)
 801009c:	4613      	mov	r3, r2
 801009e:	009b      	lsls	r3, r3, #2
 80100a0:	4413      	add	r3, r2
 80100a2:	009b      	lsls	r3, r3, #2
 80100a4:	440b      	add	r3, r1
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d10a      	bne.n	80100c2 <xTaskPriorityDisinherit+0xb6>
 80100ac:	693b      	ldr	r3, [r7, #16]
 80100ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100b0:	2201      	movs	r2, #1
 80100b2:	fa02 f303 	lsl.w	r3, r2, r3
 80100b6:	43da      	mvns	r2, r3
 80100b8:	4b18      	ldr	r3, [pc, #96]	; (801011c <xTaskPriorityDisinherit+0x110>)
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	4013      	ands	r3, r2
 80100be:	4a17      	ldr	r2, [pc, #92]	; (801011c <xTaskPriorityDisinherit+0x110>)
 80100c0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80100c2:	693b      	ldr	r3, [r7, #16]
 80100c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80100c6:	693b      	ldr	r3, [r7, #16]
 80100c8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100ca:	693b      	ldr	r3, [r7, #16]
 80100cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100ce:	f1c3 0207 	rsb	r2, r3, #7
 80100d2:	693b      	ldr	r3, [r7, #16]
 80100d4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80100d6:	693b      	ldr	r3, [r7, #16]
 80100d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100da:	2201      	movs	r2, #1
 80100dc:	409a      	lsls	r2, r3
 80100de:	4b0f      	ldr	r3, [pc, #60]	; (801011c <xTaskPriorityDisinherit+0x110>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	4313      	orrs	r3, r2
 80100e4:	4a0d      	ldr	r2, [pc, #52]	; (801011c <xTaskPriorityDisinherit+0x110>)
 80100e6:	6013      	str	r3, [r2, #0]
 80100e8:	693b      	ldr	r3, [r7, #16]
 80100ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100ec:	4613      	mov	r3, r2
 80100ee:	009b      	lsls	r3, r3, #2
 80100f0:	4413      	add	r3, r2
 80100f2:	009b      	lsls	r3, r3, #2
 80100f4:	4a08      	ldr	r2, [pc, #32]	; (8010118 <xTaskPriorityDisinherit+0x10c>)
 80100f6:	441a      	add	r2, r3
 80100f8:	693b      	ldr	r3, [r7, #16]
 80100fa:	3304      	adds	r3, #4
 80100fc:	4619      	mov	r1, r3
 80100fe:	4610      	mov	r0, r2
 8010100:	f7fe f835 	bl	800e16e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010104:	2301      	movs	r3, #1
 8010106:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010108:	697b      	ldr	r3, [r7, #20]
	}
 801010a:	4618      	mov	r0, r3
 801010c:	3718      	adds	r7, #24
 801010e:	46bd      	mov	sp, r7
 8010110:	bd80      	pop	{r7, pc}
 8010112:	bf00      	nop
 8010114:	200007a8 	.word	0x200007a8
 8010118:	200007ac 	.word	0x200007ac
 801011c:	200008b0 	.word	0x200008b0

08010120 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010120:	b580      	push	{r7, lr}
 8010122:	b088      	sub	sp, #32
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
 8010128:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801012e:	2301      	movs	r3, #1
 8010130:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	2b00      	cmp	r3, #0
 8010136:	f000 8087 	beq.w	8010248 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801013a:	69bb      	ldr	r3, [r7, #24]
 801013c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801013e:	2b00      	cmp	r3, #0
 8010140:	d10c      	bne.n	801015c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8010142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010146:	b672      	cpsid	i
 8010148:	f383 8811 	msr	BASEPRI, r3
 801014c:	f3bf 8f6f 	isb	sy
 8010150:	f3bf 8f4f 	dsb	sy
 8010154:	b662      	cpsie	i
 8010156:	60fb      	str	r3, [r7, #12]
}
 8010158:	bf00      	nop
 801015a:	e7fe      	b.n	801015a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801015c:	69bb      	ldr	r3, [r7, #24]
 801015e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010160:	683a      	ldr	r2, [r7, #0]
 8010162:	429a      	cmp	r2, r3
 8010164:	d902      	bls.n	801016c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	61fb      	str	r3, [r7, #28]
 801016a:	e002      	b.n	8010172 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801016c:	69bb      	ldr	r3, [r7, #24]
 801016e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010170:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010172:	69bb      	ldr	r3, [r7, #24]
 8010174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010176:	69fa      	ldr	r2, [r7, #28]
 8010178:	429a      	cmp	r2, r3
 801017a:	d065      	beq.n	8010248 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801017c:	69bb      	ldr	r3, [r7, #24]
 801017e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010180:	697a      	ldr	r2, [r7, #20]
 8010182:	429a      	cmp	r2, r3
 8010184:	d160      	bne.n	8010248 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010186:	4b32      	ldr	r3, [pc, #200]	; (8010250 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	69ba      	ldr	r2, [r7, #24]
 801018c:	429a      	cmp	r2, r3
 801018e:	d10c      	bne.n	80101aa <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8010190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010194:	b672      	cpsid	i
 8010196:	f383 8811 	msr	BASEPRI, r3
 801019a:	f3bf 8f6f 	isb	sy
 801019e:	f3bf 8f4f 	dsb	sy
 80101a2:	b662      	cpsie	i
 80101a4:	60bb      	str	r3, [r7, #8]
}
 80101a6:	bf00      	nop
 80101a8:	e7fe      	b.n	80101a8 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80101aa:	69bb      	ldr	r3, [r7, #24]
 80101ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101ae:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80101b0:	69bb      	ldr	r3, [r7, #24]
 80101b2:	69fa      	ldr	r2, [r7, #28]
 80101b4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80101b6:	69bb      	ldr	r3, [r7, #24]
 80101b8:	699b      	ldr	r3, [r3, #24]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	db04      	blt.n	80101c8 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101be:	69fb      	ldr	r3, [r7, #28]
 80101c0:	f1c3 0207 	rsb	r2, r3, #7
 80101c4:	69bb      	ldr	r3, [r7, #24]
 80101c6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80101c8:	69bb      	ldr	r3, [r7, #24]
 80101ca:	6959      	ldr	r1, [r3, #20]
 80101cc:	693a      	ldr	r2, [r7, #16]
 80101ce:	4613      	mov	r3, r2
 80101d0:	009b      	lsls	r3, r3, #2
 80101d2:	4413      	add	r3, r2
 80101d4:	009b      	lsls	r3, r3, #2
 80101d6:	4a1f      	ldr	r2, [pc, #124]	; (8010254 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80101d8:	4413      	add	r3, r2
 80101da:	4299      	cmp	r1, r3
 80101dc:	d134      	bne.n	8010248 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80101de:	69bb      	ldr	r3, [r7, #24]
 80101e0:	3304      	adds	r3, #4
 80101e2:	4618      	mov	r0, r3
 80101e4:	f7fe f820 	bl	800e228 <uxListRemove>
 80101e8:	4603      	mov	r3, r0
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d115      	bne.n	801021a <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80101ee:	69bb      	ldr	r3, [r7, #24]
 80101f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101f2:	4918      	ldr	r1, [pc, #96]	; (8010254 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80101f4:	4613      	mov	r3, r2
 80101f6:	009b      	lsls	r3, r3, #2
 80101f8:	4413      	add	r3, r2
 80101fa:	009b      	lsls	r3, r3, #2
 80101fc:	440b      	add	r3, r1
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d10a      	bne.n	801021a <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8010204:	69bb      	ldr	r3, [r7, #24]
 8010206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010208:	2201      	movs	r2, #1
 801020a:	fa02 f303 	lsl.w	r3, r2, r3
 801020e:	43da      	mvns	r2, r3
 8010210:	4b11      	ldr	r3, [pc, #68]	; (8010258 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	4013      	ands	r3, r2
 8010216:	4a10      	ldr	r2, [pc, #64]	; (8010258 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8010218:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801021a:	69bb      	ldr	r3, [r7, #24]
 801021c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801021e:	2201      	movs	r2, #1
 8010220:	409a      	lsls	r2, r3
 8010222:	4b0d      	ldr	r3, [pc, #52]	; (8010258 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	4313      	orrs	r3, r2
 8010228:	4a0b      	ldr	r2, [pc, #44]	; (8010258 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801022a:	6013      	str	r3, [r2, #0]
 801022c:	69bb      	ldr	r3, [r7, #24]
 801022e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010230:	4613      	mov	r3, r2
 8010232:	009b      	lsls	r3, r3, #2
 8010234:	4413      	add	r3, r2
 8010236:	009b      	lsls	r3, r3, #2
 8010238:	4a06      	ldr	r2, [pc, #24]	; (8010254 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801023a:	441a      	add	r2, r3
 801023c:	69bb      	ldr	r3, [r7, #24]
 801023e:	3304      	adds	r3, #4
 8010240:	4619      	mov	r1, r3
 8010242:	4610      	mov	r0, r2
 8010244:	f7fd ff93 	bl	800e16e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010248:	bf00      	nop
 801024a:	3720      	adds	r7, #32
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}
 8010250:	200007a8 	.word	0x200007a8
 8010254:	200007ac 	.word	0x200007ac
 8010258:	200008b0 	.word	0x200008b0

0801025c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801025c:	b480      	push	{r7}
 801025e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010260:	4b07      	ldr	r3, [pc, #28]	; (8010280 <pvTaskIncrementMutexHeldCount+0x24>)
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d004      	beq.n	8010272 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010268:	4b05      	ldr	r3, [pc, #20]	; (8010280 <pvTaskIncrementMutexHeldCount+0x24>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801026e:	3201      	adds	r2, #1
 8010270:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8010272:	4b03      	ldr	r3, [pc, #12]	; (8010280 <pvTaskIncrementMutexHeldCount+0x24>)
 8010274:	681b      	ldr	r3, [r3, #0]
	}
 8010276:	4618      	mov	r0, r3
 8010278:	46bd      	mov	sp, r7
 801027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027e:	4770      	bx	lr
 8010280:	200007a8 	.word	0x200007a8

08010284 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b084      	sub	sp, #16
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
 801028c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801028e:	4b29      	ldr	r3, [pc, #164]	; (8010334 <prvAddCurrentTaskToDelayedList+0xb0>)
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010294:	4b28      	ldr	r3, [pc, #160]	; (8010338 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	3304      	adds	r3, #4
 801029a:	4618      	mov	r0, r3
 801029c:	f7fd ffc4 	bl	800e228 <uxListRemove>
 80102a0:	4603      	mov	r3, r0
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d10b      	bne.n	80102be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80102a6:	4b24      	ldr	r3, [pc, #144]	; (8010338 <prvAddCurrentTaskToDelayedList+0xb4>)
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102ac:	2201      	movs	r2, #1
 80102ae:	fa02 f303 	lsl.w	r3, r2, r3
 80102b2:	43da      	mvns	r2, r3
 80102b4:	4b21      	ldr	r3, [pc, #132]	; (801033c <prvAddCurrentTaskToDelayedList+0xb8>)
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	4013      	ands	r3, r2
 80102ba:	4a20      	ldr	r2, [pc, #128]	; (801033c <prvAddCurrentTaskToDelayedList+0xb8>)
 80102bc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102c4:	d10a      	bne.n	80102dc <prvAddCurrentTaskToDelayedList+0x58>
 80102c6:	683b      	ldr	r3, [r7, #0]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d007      	beq.n	80102dc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80102cc:	4b1a      	ldr	r3, [pc, #104]	; (8010338 <prvAddCurrentTaskToDelayedList+0xb4>)
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	3304      	adds	r3, #4
 80102d2:	4619      	mov	r1, r3
 80102d4:	481a      	ldr	r0, [pc, #104]	; (8010340 <prvAddCurrentTaskToDelayedList+0xbc>)
 80102d6:	f7fd ff4a 	bl	800e16e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80102da:	e026      	b.n	801032a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80102dc:	68fa      	ldr	r2, [r7, #12]
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	4413      	add	r3, r2
 80102e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80102e4:	4b14      	ldr	r3, [pc, #80]	; (8010338 <prvAddCurrentTaskToDelayedList+0xb4>)
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	68ba      	ldr	r2, [r7, #8]
 80102ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80102ec:	68ba      	ldr	r2, [r7, #8]
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	429a      	cmp	r2, r3
 80102f2:	d209      	bcs.n	8010308 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80102f4:	4b13      	ldr	r3, [pc, #76]	; (8010344 <prvAddCurrentTaskToDelayedList+0xc0>)
 80102f6:	681a      	ldr	r2, [r3, #0]
 80102f8:	4b0f      	ldr	r3, [pc, #60]	; (8010338 <prvAddCurrentTaskToDelayedList+0xb4>)
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	3304      	adds	r3, #4
 80102fe:	4619      	mov	r1, r3
 8010300:	4610      	mov	r0, r2
 8010302:	f7fd ff58 	bl	800e1b6 <vListInsert>
}
 8010306:	e010      	b.n	801032a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010308:	4b0f      	ldr	r3, [pc, #60]	; (8010348 <prvAddCurrentTaskToDelayedList+0xc4>)
 801030a:	681a      	ldr	r2, [r3, #0]
 801030c:	4b0a      	ldr	r3, [pc, #40]	; (8010338 <prvAddCurrentTaskToDelayedList+0xb4>)
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	3304      	adds	r3, #4
 8010312:	4619      	mov	r1, r3
 8010314:	4610      	mov	r0, r2
 8010316:	f7fd ff4e 	bl	800e1b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801031a:	4b0c      	ldr	r3, [pc, #48]	; (801034c <prvAddCurrentTaskToDelayedList+0xc8>)
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	68ba      	ldr	r2, [r7, #8]
 8010320:	429a      	cmp	r2, r3
 8010322:	d202      	bcs.n	801032a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010324:	4a09      	ldr	r2, [pc, #36]	; (801034c <prvAddCurrentTaskToDelayedList+0xc8>)
 8010326:	68bb      	ldr	r3, [r7, #8]
 8010328:	6013      	str	r3, [r2, #0]
}
 801032a:	bf00      	nop
 801032c:	3710      	adds	r7, #16
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}
 8010332:	bf00      	nop
 8010334:	200008ac 	.word	0x200008ac
 8010338:	200007a8 	.word	0x200007a8
 801033c:	200008b0 	.word	0x200008b0
 8010340:	20000894 	.word	0x20000894
 8010344:	20000864 	.word	0x20000864
 8010348:	20000860 	.word	0x20000860
 801034c:	200008c8 	.word	0x200008c8

08010350 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010350:	b480      	push	{r7}
 8010352:	b085      	sub	sp, #20
 8010354:	af00      	add	r7, sp, #0
 8010356:	60f8      	str	r0, [r7, #12]
 8010358:	60b9      	str	r1, [r7, #8]
 801035a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	3b04      	subs	r3, #4
 8010360:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010368:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	3b04      	subs	r3, #4
 801036e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010370:	68bb      	ldr	r3, [r7, #8]
 8010372:	f023 0201 	bic.w	r2, r3, #1
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	3b04      	subs	r3, #4
 801037e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010380:	4a0c      	ldr	r2, [pc, #48]	; (80103b4 <pxPortInitialiseStack+0x64>)
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	3b14      	subs	r3, #20
 801038a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801038c:	687a      	ldr	r2, [r7, #4]
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	3b04      	subs	r3, #4
 8010396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	f06f 0202 	mvn.w	r2, #2
 801039e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	3b20      	subs	r3, #32
 80103a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80103a6:	68fb      	ldr	r3, [r7, #12]
}
 80103a8:	4618      	mov	r0, r3
 80103aa:	3714      	adds	r7, #20
 80103ac:	46bd      	mov	sp, r7
 80103ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b2:	4770      	bx	lr
 80103b4:	080103b9 	.word	0x080103b9

080103b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80103b8:	b480      	push	{r7}
 80103ba:	b085      	sub	sp, #20
 80103bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80103be:	2300      	movs	r3, #0
 80103c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80103c2:	4b14      	ldr	r3, [pc, #80]	; (8010414 <prvTaskExitError+0x5c>)
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103ca:	d00c      	beq.n	80103e6 <prvTaskExitError+0x2e>
	__asm volatile
 80103cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103d0:	b672      	cpsid	i
 80103d2:	f383 8811 	msr	BASEPRI, r3
 80103d6:	f3bf 8f6f 	isb	sy
 80103da:	f3bf 8f4f 	dsb	sy
 80103de:	b662      	cpsie	i
 80103e0:	60fb      	str	r3, [r7, #12]
}
 80103e2:	bf00      	nop
 80103e4:	e7fe      	b.n	80103e4 <prvTaskExitError+0x2c>
	__asm volatile
 80103e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ea:	b672      	cpsid	i
 80103ec:	f383 8811 	msr	BASEPRI, r3
 80103f0:	f3bf 8f6f 	isb	sy
 80103f4:	f3bf 8f4f 	dsb	sy
 80103f8:	b662      	cpsie	i
 80103fa:	60bb      	str	r3, [r7, #8]
}
 80103fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80103fe:	bf00      	nop
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d0fc      	beq.n	8010400 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010406:	bf00      	nop
 8010408:	bf00      	nop
 801040a:	3714      	adds	r7, #20
 801040c:	46bd      	mov	sp, r7
 801040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010412:	4770      	bx	lr
 8010414:	20000024 	.word	0x20000024
	...

08010420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010420:	4b07      	ldr	r3, [pc, #28]	; (8010440 <pxCurrentTCBConst2>)
 8010422:	6819      	ldr	r1, [r3, #0]
 8010424:	6808      	ldr	r0, [r1, #0]
 8010426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801042a:	f380 8809 	msr	PSP, r0
 801042e:	f3bf 8f6f 	isb	sy
 8010432:	f04f 0000 	mov.w	r0, #0
 8010436:	f380 8811 	msr	BASEPRI, r0
 801043a:	4770      	bx	lr
 801043c:	f3af 8000 	nop.w

08010440 <pxCurrentTCBConst2>:
 8010440:	200007a8 	.word	0x200007a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010444:	bf00      	nop
 8010446:	bf00      	nop

08010448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010448:	4808      	ldr	r0, [pc, #32]	; (801046c <prvPortStartFirstTask+0x24>)
 801044a:	6800      	ldr	r0, [r0, #0]
 801044c:	6800      	ldr	r0, [r0, #0]
 801044e:	f380 8808 	msr	MSP, r0
 8010452:	f04f 0000 	mov.w	r0, #0
 8010456:	f380 8814 	msr	CONTROL, r0
 801045a:	b662      	cpsie	i
 801045c:	b661      	cpsie	f
 801045e:	f3bf 8f4f 	dsb	sy
 8010462:	f3bf 8f6f 	isb	sy
 8010466:	df00      	svc	0
 8010468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801046a:	bf00      	nop
 801046c:	e000ed08 	.word	0xe000ed08

08010470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b084      	sub	sp, #16
 8010474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010476:	4b37      	ldr	r3, [pc, #220]	; (8010554 <xPortStartScheduler+0xe4>)
 8010478:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	781b      	ldrb	r3, [r3, #0]
 801047e:	b2db      	uxtb	r3, r3
 8010480:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	22ff      	movs	r2, #255	; 0xff
 8010486:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	781b      	ldrb	r3, [r3, #0]
 801048c:	b2db      	uxtb	r3, r3
 801048e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010490:	78fb      	ldrb	r3, [r7, #3]
 8010492:	b2db      	uxtb	r3, r3
 8010494:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010498:	b2da      	uxtb	r2, r3
 801049a:	4b2f      	ldr	r3, [pc, #188]	; (8010558 <xPortStartScheduler+0xe8>)
 801049c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801049e:	4b2f      	ldr	r3, [pc, #188]	; (801055c <xPortStartScheduler+0xec>)
 80104a0:	2207      	movs	r2, #7
 80104a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80104a4:	e009      	b.n	80104ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80104a6:	4b2d      	ldr	r3, [pc, #180]	; (801055c <xPortStartScheduler+0xec>)
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	3b01      	subs	r3, #1
 80104ac:	4a2b      	ldr	r2, [pc, #172]	; (801055c <xPortStartScheduler+0xec>)
 80104ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80104b0:	78fb      	ldrb	r3, [r7, #3]
 80104b2:	b2db      	uxtb	r3, r3
 80104b4:	005b      	lsls	r3, r3, #1
 80104b6:	b2db      	uxtb	r3, r3
 80104b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80104ba:	78fb      	ldrb	r3, [r7, #3]
 80104bc:	b2db      	uxtb	r3, r3
 80104be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80104c2:	2b80      	cmp	r3, #128	; 0x80
 80104c4:	d0ef      	beq.n	80104a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80104c6:	4b25      	ldr	r3, [pc, #148]	; (801055c <xPortStartScheduler+0xec>)
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	f1c3 0307 	rsb	r3, r3, #7
 80104ce:	2b04      	cmp	r3, #4
 80104d0:	d00c      	beq.n	80104ec <xPortStartScheduler+0x7c>
	__asm volatile
 80104d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104d6:	b672      	cpsid	i
 80104d8:	f383 8811 	msr	BASEPRI, r3
 80104dc:	f3bf 8f6f 	isb	sy
 80104e0:	f3bf 8f4f 	dsb	sy
 80104e4:	b662      	cpsie	i
 80104e6:	60bb      	str	r3, [r7, #8]
}
 80104e8:	bf00      	nop
 80104ea:	e7fe      	b.n	80104ea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80104ec:	4b1b      	ldr	r3, [pc, #108]	; (801055c <xPortStartScheduler+0xec>)
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	021b      	lsls	r3, r3, #8
 80104f2:	4a1a      	ldr	r2, [pc, #104]	; (801055c <xPortStartScheduler+0xec>)
 80104f4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80104f6:	4b19      	ldr	r3, [pc, #100]	; (801055c <xPortStartScheduler+0xec>)
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80104fe:	4a17      	ldr	r2, [pc, #92]	; (801055c <xPortStartScheduler+0xec>)
 8010500:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	b2da      	uxtb	r2, r3
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801050a:	4b15      	ldr	r3, [pc, #84]	; (8010560 <xPortStartScheduler+0xf0>)
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	4a14      	ldr	r2, [pc, #80]	; (8010560 <xPortStartScheduler+0xf0>)
 8010510:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010514:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010516:	4b12      	ldr	r3, [pc, #72]	; (8010560 <xPortStartScheduler+0xf0>)
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	4a11      	ldr	r2, [pc, #68]	; (8010560 <xPortStartScheduler+0xf0>)
 801051c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010520:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010522:	f000 f8dd 	bl	80106e0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010526:	4b0f      	ldr	r3, [pc, #60]	; (8010564 <xPortStartScheduler+0xf4>)
 8010528:	2200      	movs	r2, #0
 801052a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801052c:	f000 f8fc 	bl	8010728 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010530:	4b0d      	ldr	r3, [pc, #52]	; (8010568 <xPortStartScheduler+0xf8>)
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	4a0c      	ldr	r2, [pc, #48]	; (8010568 <xPortStartScheduler+0xf8>)
 8010536:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801053a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801053c:	f7ff ff84 	bl	8010448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010540:	f7ff fa58 	bl	800f9f4 <vTaskSwitchContext>
	prvTaskExitError();
 8010544:	f7ff ff38 	bl	80103b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010548:	2300      	movs	r3, #0
}
 801054a:	4618      	mov	r0, r3
 801054c:	3710      	adds	r7, #16
 801054e:	46bd      	mov	sp, r7
 8010550:	bd80      	pop	{r7, pc}
 8010552:	bf00      	nop
 8010554:	e000e400 	.word	0xe000e400
 8010558:	200008d4 	.word	0x200008d4
 801055c:	200008d8 	.word	0x200008d8
 8010560:	e000ed20 	.word	0xe000ed20
 8010564:	20000024 	.word	0x20000024
 8010568:	e000ef34 	.word	0xe000ef34

0801056c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801056c:	b480      	push	{r7}
 801056e:	b083      	sub	sp, #12
 8010570:	af00      	add	r7, sp, #0
	__asm volatile
 8010572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010576:	b672      	cpsid	i
 8010578:	f383 8811 	msr	BASEPRI, r3
 801057c:	f3bf 8f6f 	isb	sy
 8010580:	f3bf 8f4f 	dsb	sy
 8010584:	b662      	cpsie	i
 8010586:	607b      	str	r3, [r7, #4]
}
 8010588:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801058a:	4b10      	ldr	r3, [pc, #64]	; (80105cc <vPortEnterCritical+0x60>)
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	3301      	adds	r3, #1
 8010590:	4a0e      	ldr	r2, [pc, #56]	; (80105cc <vPortEnterCritical+0x60>)
 8010592:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010594:	4b0d      	ldr	r3, [pc, #52]	; (80105cc <vPortEnterCritical+0x60>)
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	2b01      	cmp	r3, #1
 801059a:	d111      	bne.n	80105c0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801059c:	4b0c      	ldr	r3, [pc, #48]	; (80105d0 <vPortEnterCritical+0x64>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	b2db      	uxtb	r3, r3
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d00c      	beq.n	80105c0 <vPortEnterCritical+0x54>
	__asm volatile
 80105a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105aa:	b672      	cpsid	i
 80105ac:	f383 8811 	msr	BASEPRI, r3
 80105b0:	f3bf 8f6f 	isb	sy
 80105b4:	f3bf 8f4f 	dsb	sy
 80105b8:	b662      	cpsie	i
 80105ba:	603b      	str	r3, [r7, #0]
}
 80105bc:	bf00      	nop
 80105be:	e7fe      	b.n	80105be <vPortEnterCritical+0x52>
	}
}
 80105c0:	bf00      	nop
 80105c2:	370c      	adds	r7, #12
 80105c4:	46bd      	mov	sp, r7
 80105c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ca:	4770      	bx	lr
 80105cc:	20000024 	.word	0x20000024
 80105d0:	e000ed04 	.word	0xe000ed04

080105d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80105d4:	b480      	push	{r7}
 80105d6:	b083      	sub	sp, #12
 80105d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80105da:	4b13      	ldr	r3, [pc, #76]	; (8010628 <vPortExitCritical+0x54>)
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d10c      	bne.n	80105fc <vPortExitCritical+0x28>
	__asm volatile
 80105e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105e6:	b672      	cpsid	i
 80105e8:	f383 8811 	msr	BASEPRI, r3
 80105ec:	f3bf 8f6f 	isb	sy
 80105f0:	f3bf 8f4f 	dsb	sy
 80105f4:	b662      	cpsie	i
 80105f6:	607b      	str	r3, [r7, #4]
}
 80105f8:	bf00      	nop
 80105fa:	e7fe      	b.n	80105fa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80105fc:	4b0a      	ldr	r3, [pc, #40]	; (8010628 <vPortExitCritical+0x54>)
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	3b01      	subs	r3, #1
 8010602:	4a09      	ldr	r2, [pc, #36]	; (8010628 <vPortExitCritical+0x54>)
 8010604:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010606:	4b08      	ldr	r3, [pc, #32]	; (8010628 <vPortExitCritical+0x54>)
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d105      	bne.n	801061a <vPortExitCritical+0x46>
 801060e:	2300      	movs	r3, #0
 8010610:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010612:	683b      	ldr	r3, [r7, #0]
 8010614:	f383 8811 	msr	BASEPRI, r3
}
 8010618:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801061a:	bf00      	nop
 801061c:	370c      	adds	r7, #12
 801061e:	46bd      	mov	sp, r7
 8010620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010624:	4770      	bx	lr
 8010626:	bf00      	nop
 8010628:	20000024 	.word	0x20000024
 801062c:	00000000 	.word	0x00000000

08010630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010630:	f3ef 8009 	mrs	r0, PSP
 8010634:	f3bf 8f6f 	isb	sy
 8010638:	4b15      	ldr	r3, [pc, #84]	; (8010690 <pxCurrentTCBConst>)
 801063a:	681a      	ldr	r2, [r3, #0]
 801063c:	f01e 0f10 	tst.w	lr, #16
 8010640:	bf08      	it	eq
 8010642:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010646:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801064a:	6010      	str	r0, [r2, #0]
 801064c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010650:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010654:	b672      	cpsid	i
 8010656:	f380 8811 	msr	BASEPRI, r0
 801065a:	f3bf 8f4f 	dsb	sy
 801065e:	f3bf 8f6f 	isb	sy
 8010662:	b662      	cpsie	i
 8010664:	f7ff f9c6 	bl	800f9f4 <vTaskSwitchContext>
 8010668:	f04f 0000 	mov.w	r0, #0
 801066c:	f380 8811 	msr	BASEPRI, r0
 8010670:	bc09      	pop	{r0, r3}
 8010672:	6819      	ldr	r1, [r3, #0]
 8010674:	6808      	ldr	r0, [r1, #0]
 8010676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801067a:	f01e 0f10 	tst.w	lr, #16
 801067e:	bf08      	it	eq
 8010680:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010684:	f380 8809 	msr	PSP, r0
 8010688:	f3bf 8f6f 	isb	sy
 801068c:	4770      	bx	lr
 801068e:	bf00      	nop

08010690 <pxCurrentTCBConst>:
 8010690:	200007a8 	.word	0x200007a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010694:	bf00      	nop
 8010696:	bf00      	nop

08010698 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010698:	b580      	push	{r7, lr}
 801069a:	b082      	sub	sp, #8
 801069c:	af00      	add	r7, sp, #0
	__asm volatile
 801069e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106a2:	b672      	cpsid	i
 80106a4:	f383 8811 	msr	BASEPRI, r3
 80106a8:	f3bf 8f6f 	isb	sy
 80106ac:	f3bf 8f4f 	dsb	sy
 80106b0:	b662      	cpsie	i
 80106b2:	607b      	str	r3, [r7, #4]
}
 80106b4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80106b6:	f7ff f8e3 	bl	800f880 <xTaskIncrementTick>
 80106ba:	4603      	mov	r3, r0
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d003      	beq.n	80106c8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80106c0:	4b06      	ldr	r3, [pc, #24]	; (80106dc <xPortSysTickHandler+0x44>)
 80106c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106c6:	601a      	str	r2, [r3, #0]
 80106c8:	2300      	movs	r3, #0
 80106ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 80106cc:	683b      	ldr	r3, [r7, #0]
 80106ce:	f383 8811 	msr	BASEPRI, r3
}
 80106d2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80106d4:	bf00      	nop
 80106d6:	3708      	adds	r7, #8
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd80      	pop	{r7, pc}
 80106dc:	e000ed04 	.word	0xe000ed04

080106e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80106e0:	b480      	push	{r7}
 80106e2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80106e4:	4b0b      	ldr	r3, [pc, #44]	; (8010714 <vPortSetupTimerInterrupt+0x34>)
 80106e6:	2200      	movs	r2, #0
 80106e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80106ea:	4b0b      	ldr	r3, [pc, #44]	; (8010718 <vPortSetupTimerInterrupt+0x38>)
 80106ec:	2200      	movs	r2, #0
 80106ee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80106f0:	4b0a      	ldr	r3, [pc, #40]	; (801071c <vPortSetupTimerInterrupt+0x3c>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	4a0a      	ldr	r2, [pc, #40]	; (8010720 <vPortSetupTimerInterrupt+0x40>)
 80106f6:	fba2 2303 	umull	r2, r3, r2, r3
 80106fa:	099b      	lsrs	r3, r3, #6
 80106fc:	4a09      	ldr	r2, [pc, #36]	; (8010724 <vPortSetupTimerInterrupt+0x44>)
 80106fe:	3b01      	subs	r3, #1
 8010700:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010702:	4b04      	ldr	r3, [pc, #16]	; (8010714 <vPortSetupTimerInterrupt+0x34>)
 8010704:	2207      	movs	r2, #7
 8010706:	601a      	str	r2, [r3, #0]
}
 8010708:	bf00      	nop
 801070a:	46bd      	mov	sp, r7
 801070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010710:	4770      	bx	lr
 8010712:	bf00      	nop
 8010714:	e000e010 	.word	0xe000e010
 8010718:	e000e018 	.word	0xe000e018
 801071c:	20000004 	.word	0x20000004
 8010720:	10624dd3 	.word	0x10624dd3
 8010724:	e000e014 	.word	0xe000e014

08010728 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010728:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010738 <vPortEnableVFP+0x10>
 801072c:	6801      	ldr	r1, [r0, #0]
 801072e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010732:	6001      	str	r1, [r0, #0]
 8010734:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010736:	bf00      	nop
 8010738:	e000ed88 	.word	0xe000ed88

0801073c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801073c:	b480      	push	{r7}
 801073e:	b085      	sub	sp, #20
 8010740:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010742:	f3ef 8305 	mrs	r3, IPSR
 8010746:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	2b0f      	cmp	r3, #15
 801074c:	d916      	bls.n	801077c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801074e:	4a19      	ldr	r2, [pc, #100]	; (80107b4 <vPortValidateInterruptPriority+0x78>)
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	4413      	add	r3, r2
 8010754:	781b      	ldrb	r3, [r3, #0]
 8010756:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010758:	4b17      	ldr	r3, [pc, #92]	; (80107b8 <vPortValidateInterruptPriority+0x7c>)
 801075a:	781b      	ldrb	r3, [r3, #0]
 801075c:	7afa      	ldrb	r2, [r7, #11]
 801075e:	429a      	cmp	r2, r3
 8010760:	d20c      	bcs.n	801077c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8010762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010766:	b672      	cpsid	i
 8010768:	f383 8811 	msr	BASEPRI, r3
 801076c:	f3bf 8f6f 	isb	sy
 8010770:	f3bf 8f4f 	dsb	sy
 8010774:	b662      	cpsie	i
 8010776:	607b      	str	r3, [r7, #4]
}
 8010778:	bf00      	nop
 801077a:	e7fe      	b.n	801077a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801077c:	4b0f      	ldr	r3, [pc, #60]	; (80107bc <vPortValidateInterruptPriority+0x80>)
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010784:	4b0e      	ldr	r3, [pc, #56]	; (80107c0 <vPortValidateInterruptPriority+0x84>)
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	429a      	cmp	r2, r3
 801078a:	d90c      	bls.n	80107a6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801078c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010790:	b672      	cpsid	i
 8010792:	f383 8811 	msr	BASEPRI, r3
 8010796:	f3bf 8f6f 	isb	sy
 801079a:	f3bf 8f4f 	dsb	sy
 801079e:	b662      	cpsie	i
 80107a0:	603b      	str	r3, [r7, #0]
}
 80107a2:	bf00      	nop
 80107a4:	e7fe      	b.n	80107a4 <vPortValidateInterruptPriority+0x68>
	}
 80107a6:	bf00      	nop
 80107a8:	3714      	adds	r7, #20
 80107aa:	46bd      	mov	sp, r7
 80107ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b0:	4770      	bx	lr
 80107b2:	bf00      	nop
 80107b4:	e000e3f0 	.word	0xe000e3f0
 80107b8:	200008d4 	.word	0x200008d4
 80107bc:	e000ed0c 	.word	0xe000ed0c
 80107c0:	200008d8 	.word	0x200008d8

080107c4 <_sbrk_r>:
    static int totalBytesProvidedBySBRK = 0;
#endif
extern char __HeapBase, __HeapLimit;  // make sure to define these symbols in linker LD command file

//! _sbrk_r version supporting reentrant newlib (depends upon above symbols defined by linker control file).
void * _sbrk_r(struct _reent *pReent, int incr) {
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b084      	sub	sp, #16
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
 80107cc:	6039      	str	r1, [r7, #0]
    #ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
      UBaseType_t usis; // saved interrupt status
    #endif
    static char *currentHeapEnd = &__HeapBase;
    #ifdef STM_VERSION // Use STM CubeMX LD symbols for heap
      if(TotalHeapSize==0) {
 80107ce:	4b24      	ldr	r3, [pc, #144]	; (8010860 <_sbrk_r+0x9c>)
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d10e      	bne.n	80107f4 <_sbrk_r+0x30>
        TotalHeapSize = heapBytesRemaining = (int)((&__HeapLimit)-(&__HeapBase))-ISR_STACK_LENGTH_BYTES;
 80107d6:	4a23      	ldr	r2, [pc, #140]	; (8010864 <_sbrk_r+0xa0>)
 80107d8:	4b23      	ldr	r3, [pc, #140]	; (8010868 <_sbrk_r+0xa4>)
 80107da:	1ad3      	subs	r3, r2, r3
 80107dc:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80107e0:	4a22      	ldr	r2, [pc, #136]	; (801086c <_sbrk_r+0xa8>)
 80107e2:	6013      	str	r3, [r2, #0]
 80107e4:	4a1f      	ldr	r2, [pc, #124]	; (8010864 <_sbrk_r+0xa0>)
 80107e6:	4b20      	ldr	r3, [pc, #128]	; (8010868 <_sbrk_r+0xa4>)
 80107e8:	1ad3      	subs	r3, r2, r3
 80107ea:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80107ee:	461a      	mov	r2, r3
 80107f0:	4b1b      	ldr	r3, [pc, #108]	; (8010860 <_sbrk_r+0x9c>)
 80107f2:	601a      	str	r2, [r3, #0]
      };
    #endif
    char* limit = (xTaskGetSchedulerState()==taskSCHEDULER_NOT_STARTED) ?
 80107f4:	f7ff fb6c 	bl	800fed0 <xTaskGetSchedulerState>
 80107f8:	4603      	mov	r3, r0
            stack_ptr   :  // Before scheduler is started, limit is stack pointer (risky!)
 80107fa:	2b01      	cmp	r3, #1
 80107fc:	d101      	bne.n	8010802 <_sbrk_r+0x3e>
 80107fe:	466b      	mov	r3, sp
 8010800:	e000      	b.n	8010804 <_sbrk_r+0x40>
 8010802:	4b1b      	ldr	r3, [pc, #108]	; (8010870 <_sbrk_r+0xac>)
    char* limit = (xTaskGetSchedulerState()==taskSCHEDULER_NOT_STARTED) ?
 8010804:	60fb      	str	r3, [r7, #12]
            &__HeapLimit-ISR_STACK_LENGTH_BYTES;  // Once running, OK to reuse all remaining RAM except ISR stack (MSP) stack
    DRN_ENTER_CRITICAL_SECTION(usis);
 8010806:	f7fe ff6d 	bl	800f6e4 <vTaskSuspendAll>
    char *previousHeapEnd = currentHeapEnd;
 801080a:	4b1a      	ldr	r3, [pc, #104]	; (8010874 <_sbrk_r+0xb0>)
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	60bb      	str	r3, [r7, #8]
    if (currentHeapEnd + incr > limit) {
 8010810:	4b18      	ldr	r3, [pc, #96]	; (8010874 <_sbrk_r+0xb0>)
 8010812:	681a      	ldr	r2, [r3, #0]
 8010814:	683b      	ldr	r3, [r7, #0]
 8010816:	4413      	add	r3, r2
 8010818:	68fa      	ldr	r2, [r7, #12]
 801081a:	429a      	cmp	r2, r3
 801081c:	d206      	bcs.n	801082c <_sbrk_r+0x68>
        // Ooops, no more memory available...
        #if( configUSE_MALLOC_FAILED_HOOK == 1 )
          {
            extern void vApplicationMallocFailedHook( void );
            DRN_EXIT_CRITICAL_SECTION(usis);
 801081e:	f7fe ff6f 	bl	800f700 <xTaskResumeAll>
            vApplicationMallocFailedHook();
 8010822:	f7ef fed3 	bl	80005cc <vApplicationMallocFailedHook>
        #else
            // Default, if you prefer to believe your application will gracefully trap out-of-memory...
            pReent->_errno = ENOMEM; // newlib's thread-specific errno
            DRN_EXIT_CRITICAL_SECTION(usis);
        #endif
        return (char *)-1; // the malloc-family routine that called sbrk will return 0
 8010826:	f04f 33ff 	mov.w	r3, #4294967295
 801082a:	e014      	b.n	8010856 <_sbrk_r+0x92>
    }
    // 'incr' of memory is available: update accounting and return it.
    currentHeapEnd += incr;
 801082c:	4b11      	ldr	r3, [pc, #68]	; (8010874 <_sbrk_r+0xb0>)
 801082e:	681a      	ldr	r2, [r3, #0]
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	4413      	add	r3, r2
 8010834:	4a0f      	ldr	r2, [pc, #60]	; (8010874 <_sbrk_r+0xb0>)
 8010836:	6013      	str	r3, [r2, #0]
    heapBytesRemaining -= incr;
 8010838:	4b0c      	ldr	r3, [pc, #48]	; (801086c <_sbrk_r+0xa8>)
 801083a:	681a      	ldr	r2, [r3, #0]
 801083c:	683b      	ldr	r3, [r7, #0]
 801083e:	1ad3      	subs	r3, r2, r3
 8010840:	4a0a      	ldr	r2, [pc, #40]	; (801086c <_sbrk_r+0xa8>)
 8010842:	6013      	str	r3, [r2, #0]
    #ifndef NDEBUG
        totalBytesProvidedBySBRK += incr;
 8010844:	4b0c      	ldr	r3, [pc, #48]	; (8010878 <_sbrk_r+0xb4>)
 8010846:	681a      	ldr	r2, [r3, #0]
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	4413      	add	r3, r2
 801084c:	4a0a      	ldr	r2, [pc, #40]	; (8010878 <_sbrk_r+0xb4>)
 801084e:	6013      	str	r3, [r2, #0]
    #endif
    DRN_EXIT_CRITICAL_SECTION(usis);
 8010850:	f7fe ff56 	bl	800f700 <xTaskResumeAll>
    return (char *) previousHeapEnd;
 8010854:	68bb      	ldr	r3, [r7, #8]
}
 8010856:	4618      	mov	r0, r3
 8010858:	3710      	adds	r7, #16
 801085a:	46bd      	mov	sp, r7
 801085c:	bd80      	pop	{r7, pc}
 801085e:	bf00      	nop
 8010860:	20004d0c 	.word	0x20004d0c
 8010864:	20050000 	.word	0x20050000
 8010868:	20004d28 	.word	0x20004d28
 801086c:	200008dc 	.word	0x200008dc
 8010870:	2004fe00 	.word	0x2004fe00
 8010874:	20000028 	.word	0x20000028
 8010878:	200008e0 	.word	0x200008e0

0801087c <__malloc_lock>:
//char * _sbrk(int incr) { return sbrk(incr); };

#ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
  static UBaseType_t malLock_uxSavedInterruptStatus;
#endif
void __malloc_lock(struct _reent *r)     {
 801087c:	b580      	push	{r7, lr}
 801087e:	b086      	sub	sp, #24
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010884:	f3ef 8305 	mrs	r3, IPSR
 8010888:	613b      	str	r3, [r7, #16]
	if( ulCurrentInterrupt == 0 )
 801088a:	693b      	ldr	r3, [r7, #16]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d102      	bne.n	8010896 <__malloc_lock+0x1a>
		xReturn = pdFALSE;
 8010890:	2300      	movs	r3, #0
 8010892:	60fb      	str	r3, [r7, #12]
 8010894:	e001      	b.n	801089a <__malloc_lock+0x1e>
		xReturn = pdTRUE;
 8010896:	2301      	movs	r3, #1
 8010898:	60fb      	str	r3, [r7, #12]
	return xReturn;
 801089a:	68fb      	ldr	r3, [r7, #12]
  #if defined(MALLOCS_INSIDE_ISRs)
    DRN_ENTER_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
  #else
    bool insideAnISR = xPortIsInsideInterrupt();
 801089c:	2b00      	cmp	r3, #0
 801089e:	bf14      	ite	ne
 80108a0:	2301      	movne	r3, #1
 80108a2:	2300      	moveq	r3, #0
 80108a4:	75fb      	strb	r3, [r7, #23]
    configASSERT( !insideAnISR ); // Make damn sure no more mallocs inside ISRs!!
 80108a6:	7dfb      	ldrb	r3, [r7, #23]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d00c      	beq.n	80108c6 <__malloc_lock+0x4a>
	__asm volatile
 80108ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108b0:	b672      	cpsid	i
 80108b2:	f383 8811 	msr	BASEPRI, r3
 80108b6:	f3bf 8f6f 	isb	sy
 80108ba:	f3bf 8f4f 	dsb	sy
 80108be:	b662      	cpsie	i
 80108c0:	60bb      	str	r3, [r7, #8]
}
 80108c2:	bf00      	nop
 80108c4:	e7fe      	b.n	80108c4 <__malloc_lock+0x48>
    vTaskSuspendAll();
 80108c6:	f7fe ff0d 	bl	800f6e4 <vTaskSuspendAll>
  #endif
};
 80108ca:	bf00      	nop
 80108cc:	3718      	adds	r7, #24
 80108ce:	46bd      	mov	sp, r7
 80108d0:	bd80      	pop	{r7, pc}

080108d2 <__malloc_unlock>:
void __malloc_unlock(struct _reent *r)   {
 80108d2:	b580      	push	{r7, lr}
 80108d4:	b082      	sub	sp, #8
 80108d6:	af00      	add	r7, sp, #0
 80108d8:	6078      	str	r0, [r7, #4]
  #if defined(MALLOCS_INSIDE_ISRs)
    DRN_EXIT_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
  #else
    (void)xTaskResumeAll();
 80108da:	f7fe ff11 	bl	800f700 <xTaskResumeAll>
  #endif
};
 80108de:	bf00      	nop
 80108e0:	3708      	adds	r7, #8
 80108e2:	46bd      	mov	sp, r7
 80108e4:	bd80      	pop	{r7, pc}

080108e6 <pvPortMalloc>:

// ================================================================================================
// Implement FreeRTOS's memory API using newlib-provided malloc family.
// ================================================================================================

void *pvPortMalloc( size_t xSize ) PRIVILEGED_FUNCTION {
 80108e6:	b580      	push	{r7, lr}
 80108e8:	b084      	sub	sp, #16
 80108ea:	af00      	add	r7, sp, #0
 80108ec:	6078      	str	r0, [r7, #4]
    void *p = malloc(xSize);
 80108ee:	6878      	ldr	r0, [r7, #4]
 80108f0:	f000 f836 	bl	8010960 <malloc>
 80108f4:	4603      	mov	r3, r0
 80108f6:	60fb      	str	r3, [r7, #12]
    return p;
 80108f8:	68fb      	ldr	r3, [r7, #12]
}
 80108fa:	4618      	mov	r0, r3
 80108fc:	3710      	adds	r7, #16
 80108fe:	46bd      	mov	sp, r7
 8010900:	bd80      	pop	{r7, pc}

08010902 <vPortFree>:
void vPortFree( void *pv ) PRIVILEGED_FUNCTION {
 8010902:	b580      	push	{r7, lr}
 8010904:	b082      	sub	sp, #8
 8010906:	af00      	add	r7, sp, #0
 8010908:	6078      	str	r0, [r7, #4]
    free(pv);
 801090a:	6878      	ldr	r0, [r7, #4]
 801090c:	f000 f830 	bl	8010970 <free>
};
 8010910:	bf00      	nop
 8010912:	3708      	adds	r7, #8
 8010914:	46bd      	mov	sp, r7
 8010916:	bd80      	pop	{r7, pc}

08010918 <__libc_init_array>:
 8010918:	b570      	push	{r4, r5, r6, lr}
 801091a:	4d0d      	ldr	r5, [pc, #52]	; (8010950 <__libc_init_array+0x38>)
 801091c:	4c0d      	ldr	r4, [pc, #52]	; (8010954 <__libc_init_array+0x3c>)
 801091e:	1b64      	subs	r4, r4, r5
 8010920:	10a4      	asrs	r4, r4, #2
 8010922:	2600      	movs	r6, #0
 8010924:	42a6      	cmp	r6, r4
 8010926:	d109      	bne.n	801093c <__libc_init_array+0x24>
 8010928:	4d0b      	ldr	r5, [pc, #44]	; (8010958 <__libc_init_array+0x40>)
 801092a:	4c0c      	ldr	r4, [pc, #48]	; (801095c <__libc_init_array+0x44>)
 801092c:	f001 f854 	bl	80119d8 <_init>
 8010930:	1b64      	subs	r4, r4, r5
 8010932:	10a4      	asrs	r4, r4, #2
 8010934:	2600      	movs	r6, #0
 8010936:	42a6      	cmp	r6, r4
 8010938:	d105      	bne.n	8010946 <__libc_init_array+0x2e>
 801093a:	bd70      	pop	{r4, r5, r6, pc}
 801093c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010940:	4798      	blx	r3
 8010942:	3601      	adds	r6, #1
 8010944:	e7ee      	b.n	8010924 <__libc_init_array+0xc>
 8010946:	f855 3b04 	ldr.w	r3, [r5], #4
 801094a:	4798      	blx	r3
 801094c:	3601      	adds	r6, #1
 801094e:	e7f2      	b.n	8010936 <__libc_init_array+0x1e>
 8010950:	08013f38 	.word	0x08013f38
 8010954:	08013f38 	.word	0x08013f38
 8010958:	08013f38 	.word	0x08013f38
 801095c:	08013f3c 	.word	0x08013f3c

08010960 <malloc>:
 8010960:	4b02      	ldr	r3, [pc, #8]	; (801096c <malloc+0xc>)
 8010962:	4601      	mov	r1, r0
 8010964:	6818      	ldr	r0, [r3, #0]
 8010966:	f000 b871 	b.w	8010a4c <_malloc_r>
 801096a:	bf00      	nop
 801096c:	2000002c 	.word	0x2000002c

08010970 <free>:
 8010970:	4b02      	ldr	r3, [pc, #8]	; (801097c <free+0xc>)
 8010972:	4601      	mov	r1, r0
 8010974:	6818      	ldr	r0, [r3, #0]
 8010976:	f000 b819 	b.w	80109ac <_free_r>
 801097a:	bf00      	nop
 801097c:	2000002c 	.word	0x2000002c

08010980 <memcpy>:
 8010980:	440a      	add	r2, r1
 8010982:	4291      	cmp	r1, r2
 8010984:	f100 33ff 	add.w	r3, r0, #4294967295
 8010988:	d100      	bne.n	801098c <memcpy+0xc>
 801098a:	4770      	bx	lr
 801098c:	b510      	push	{r4, lr}
 801098e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010992:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010996:	4291      	cmp	r1, r2
 8010998:	d1f9      	bne.n	801098e <memcpy+0xe>
 801099a:	bd10      	pop	{r4, pc}

0801099c <memset>:
 801099c:	4402      	add	r2, r0
 801099e:	4603      	mov	r3, r0
 80109a0:	4293      	cmp	r3, r2
 80109a2:	d100      	bne.n	80109a6 <memset+0xa>
 80109a4:	4770      	bx	lr
 80109a6:	f803 1b01 	strb.w	r1, [r3], #1
 80109aa:	e7f9      	b.n	80109a0 <memset+0x4>

080109ac <_free_r>:
 80109ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80109ae:	2900      	cmp	r1, #0
 80109b0:	d048      	beq.n	8010a44 <_free_r+0x98>
 80109b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80109b6:	9001      	str	r0, [sp, #4]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	f1a1 0404 	sub.w	r4, r1, #4
 80109be:	bfb8      	it	lt
 80109c0:	18e4      	addlt	r4, r4, r3
 80109c2:	f7ff ff5b 	bl	801087c <__malloc_lock>
 80109c6:	4a20      	ldr	r2, [pc, #128]	; (8010a48 <_free_r+0x9c>)
 80109c8:	9801      	ldr	r0, [sp, #4]
 80109ca:	6813      	ldr	r3, [r2, #0]
 80109cc:	4615      	mov	r5, r2
 80109ce:	b933      	cbnz	r3, 80109de <_free_r+0x32>
 80109d0:	6063      	str	r3, [r4, #4]
 80109d2:	6014      	str	r4, [r2, #0]
 80109d4:	b003      	add	sp, #12
 80109d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80109da:	f7ff bf7a 	b.w	80108d2 <__malloc_unlock>
 80109de:	42a3      	cmp	r3, r4
 80109e0:	d90b      	bls.n	80109fa <_free_r+0x4e>
 80109e2:	6821      	ldr	r1, [r4, #0]
 80109e4:	1862      	adds	r2, r4, r1
 80109e6:	4293      	cmp	r3, r2
 80109e8:	bf04      	itt	eq
 80109ea:	681a      	ldreq	r2, [r3, #0]
 80109ec:	685b      	ldreq	r3, [r3, #4]
 80109ee:	6063      	str	r3, [r4, #4]
 80109f0:	bf04      	itt	eq
 80109f2:	1852      	addeq	r2, r2, r1
 80109f4:	6022      	streq	r2, [r4, #0]
 80109f6:	602c      	str	r4, [r5, #0]
 80109f8:	e7ec      	b.n	80109d4 <_free_r+0x28>
 80109fa:	461a      	mov	r2, r3
 80109fc:	685b      	ldr	r3, [r3, #4]
 80109fe:	b10b      	cbz	r3, 8010a04 <_free_r+0x58>
 8010a00:	42a3      	cmp	r3, r4
 8010a02:	d9fa      	bls.n	80109fa <_free_r+0x4e>
 8010a04:	6811      	ldr	r1, [r2, #0]
 8010a06:	1855      	adds	r5, r2, r1
 8010a08:	42a5      	cmp	r5, r4
 8010a0a:	d10b      	bne.n	8010a24 <_free_r+0x78>
 8010a0c:	6824      	ldr	r4, [r4, #0]
 8010a0e:	4421      	add	r1, r4
 8010a10:	1854      	adds	r4, r2, r1
 8010a12:	42a3      	cmp	r3, r4
 8010a14:	6011      	str	r1, [r2, #0]
 8010a16:	d1dd      	bne.n	80109d4 <_free_r+0x28>
 8010a18:	681c      	ldr	r4, [r3, #0]
 8010a1a:	685b      	ldr	r3, [r3, #4]
 8010a1c:	6053      	str	r3, [r2, #4]
 8010a1e:	4421      	add	r1, r4
 8010a20:	6011      	str	r1, [r2, #0]
 8010a22:	e7d7      	b.n	80109d4 <_free_r+0x28>
 8010a24:	d902      	bls.n	8010a2c <_free_r+0x80>
 8010a26:	230c      	movs	r3, #12
 8010a28:	6003      	str	r3, [r0, #0]
 8010a2a:	e7d3      	b.n	80109d4 <_free_r+0x28>
 8010a2c:	6825      	ldr	r5, [r4, #0]
 8010a2e:	1961      	adds	r1, r4, r5
 8010a30:	428b      	cmp	r3, r1
 8010a32:	bf04      	itt	eq
 8010a34:	6819      	ldreq	r1, [r3, #0]
 8010a36:	685b      	ldreq	r3, [r3, #4]
 8010a38:	6063      	str	r3, [r4, #4]
 8010a3a:	bf04      	itt	eq
 8010a3c:	1949      	addeq	r1, r1, r5
 8010a3e:	6021      	streq	r1, [r4, #0]
 8010a40:	6054      	str	r4, [r2, #4]
 8010a42:	e7c7      	b.n	80109d4 <_free_r+0x28>
 8010a44:	b003      	add	sp, #12
 8010a46:	bd30      	pop	{r4, r5, pc}
 8010a48:	200008e4 	.word	0x200008e4

08010a4c <_malloc_r>:
 8010a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a4e:	1ccd      	adds	r5, r1, #3
 8010a50:	f025 0503 	bic.w	r5, r5, #3
 8010a54:	3508      	adds	r5, #8
 8010a56:	2d0c      	cmp	r5, #12
 8010a58:	bf38      	it	cc
 8010a5a:	250c      	movcc	r5, #12
 8010a5c:	2d00      	cmp	r5, #0
 8010a5e:	4606      	mov	r6, r0
 8010a60:	db01      	blt.n	8010a66 <_malloc_r+0x1a>
 8010a62:	42a9      	cmp	r1, r5
 8010a64:	d903      	bls.n	8010a6e <_malloc_r+0x22>
 8010a66:	230c      	movs	r3, #12
 8010a68:	6033      	str	r3, [r6, #0]
 8010a6a:	2000      	movs	r0, #0
 8010a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a6e:	f7ff ff05 	bl	801087c <__malloc_lock>
 8010a72:	4921      	ldr	r1, [pc, #132]	; (8010af8 <_malloc_r+0xac>)
 8010a74:	680a      	ldr	r2, [r1, #0]
 8010a76:	4614      	mov	r4, r2
 8010a78:	b99c      	cbnz	r4, 8010aa2 <_malloc_r+0x56>
 8010a7a:	4f20      	ldr	r7, [pc, #128]	; (8010afc <_malloc_r+0xb0>)
 8010a7c:	683b      	ldr	r3, [r7, #0]
 8010a7e:	b923      	cbnz	r3, 8010a8a <_malloc_r+0x3e>
 8010a80:	4621      	mov	r1, r4
 8010a82:	4630      	mov	r0, r6
 8010a84:	f7ff fe9e 	bl	80107c4 <_sbrk_r>
 8010a88:	6038      	str	r0, [r7, #0]
 8010a8a:	4629      	mov	r1, r5
 8010a8c:	4630      	mov	r0, r6
 8010a8e:	f7ff fe99 	bl	80107c4 <_sbrk_r>
 8010a92:	1c43      	adds	r3, r0, #1
 8010a94:	d123      	bne.n	8010ade <_malloc_r+0x92>
 8010a96:	230c      	movs	r3, #12
 8010a98:	6033      	str	r3, [r6, #0]
 8010a9a:	4630      	mov	r0, r6
 8010a9c:	f7ff ff19 	bl	80108d2 <__malloc_unlock>
 8010aa0:	e7e3      	b.n	8010a6a <_malloc_r+0x1e>
 8010aa2:	6823      	ldr	r3, [r4, #0]
 8010aa4:	1b5b      	subs	r3, r3, r5
 8010aa6:	d417      	bmi.n	8010ad8 <_malloc_r+0x8c>
 8010aa8:	2b0b      	cmp	r3, #11
 8010aaa:	d903      	bls.n	8010ab4 <_malloc_r+0x68>
 8010aac:	6023      	str	r3, [r4, #0]
 8010aae:	441c      	add	r4, r3
 8010ab0:	6025      	str	r5, [r4, #0]
 8010ab2:	e004      	b.n	8010abe <_malloc_r+0x72>
 8010ab4:	6863      	ldr	r3, [r4, #4]
 8010ab6:	42a2      	cmp	r2, r4
 8010ab8:	bf0c      	ite	eq
 8010aba:	600b      	streq	r3, [r1, #0]
 8010abc:	6053      	strne	r3, [r2, #4]
 8010abe:	4630      	mov	r0, r6
 8010ac0:	f7ff ff07 	bl	80108d2 <__malloc_unlock>
 8010ac4:	f104 000b 	add.w	r0, r4, #11
 8010ac8:	1d23      	adds	r3, r4, #4
 8010aca:	f020 0007 	bic.w	r0, r0, #7
 8010ace:	1ac2      	subs	r2, r0, r3
 8010ad0:	d0cc      	beq.n	8010a6c <_malloc_r+0x20>
 8010ad2:	1a1b      	subs	r3, r3, r0
 8010ad4:	50a3      	str	r3, [r4, r2]
 8010ad6:	e7c9      	b.n	8010a6c <_malloc_r+0x20>
 8010ad8:	4622      	mov	r2, r4
 8010ada:	6864      	ldr	r4, [r4, #4]
 8010adc:	e7cc      	b.n	8010a78 <_malloc_r+0x2c>
 8010ade:	1cc4      	adds	r4, r0, #3
 8010ae0:	f024 0403 	bic.w	r4, r4, #3
 8010ae4:	42a0      	cmp	r0, r4
 8010ae6:	d0e3      	beq.n	8010ab0 <_malloc_r+0x64>
 8010ae8:	1a21      	subs	r1, r4, r0
 8010aea:	4630      	mov	r0, r6
 8010aec:	f7ff fe6a 	bl	80107c4 <_sbrk_r>
 8010af0:	3001      	adds	r0, #1
 8010af2:	d1dd      	bne.n	8010ab0 <_malloc_r+0x64>
 8010af4:	e7cf      	b.n	8010a96 <_malloc_r+0x4a>
 8010af6:	bf00      	nop
 8010af8:	200008e4 	.word	0x200008e4
 8010afc:	200008e8 	.word	0x200008e8

08010b00 <_puts_r>:
 8010b00:	b570      	push	{r4, r5, r6, lr}
 8010b02:	460e      	mov	r6, r1
 8010b04:	4605      	mov	r5, r0
 8010b06:	b118      	cbz	r0, 8010b10 <_puts_r+0x10>
 8010b08:	6983      	ldr	r3, [r0, #24]
 8010b0a:	b90b      	cbnz	r3, 8010b10 <_puts_r+0x10>
 8010b0c:	f000 fa7c 	bl	8011008 <__sinit>
 8010b10:	69ab      	ldr	r3, [r5, #24]
 8010b12:	68ac      	ldr	r4, [r5, #8]
 8010b14:	b913      	cbnz	r3, 8010b1c <_puts_r+0x1c>
 8010b16:	4628      	mov	r0, r5
 8010b18:	f000 fa76 	bl	8011008 <__sinit>
 8010b1c:	4b2c      	ldr	r3, [pc, #176]	; (8010bd0 <_puts_r+0xd0>)
 8010b1e:	429c      	cmp	r4, r3
 8010b20:	d120      	bne.n	8010b64 <_puts_r+0x64>
 8010b22:	686c      	ldr	r4, [r5, #4]
 8010b24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010b26:	07db      	lsls	r3, r3, #31
 8010b28:	d405      	bmi.n	8010b36 <_puts_r+0x36>
 8010b2a:	89a3      	ldrh	r3, [r4, #12]
 8010b2c:	0598      	lsls	r0, r3, #22
 8010b2e:	d402      	bmi.n	8010b36 <_puts_r+0x36>
 8010b30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b32:	f000 fb07 	bl	8011144 <__retarget_lock_acquire_recursive>
 8010b36:	89a3      	ldrh	r3, [r4, #12]
 8010b38:	0719      	lsls	r1, r3, #28
 8010b3a:	d51d      	bpl.n	8010b78 <_puts_r+0x78>
 8010b3c:	6923      	ldr	r3, [r4, #16]
 8010b3e:	b1db      	cbz	r3, 8010b78 <_puts_r+0x78>
 8010b40:	3e01      	subs	r6, #1
 8010b42:	68a3      	ldr	r3, [r4, #8]
 8010b44:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010b48:	3b01      	subs	r3, #1
 8010b4a:	60a3      	str	r3, [r4, #8]
 8010b4c:	bb39      	cbnz	r1, 8010b9e <_puts_r+0x9e>
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	da38      	bge.n	8010bc4 <_puts_r+0xc4>
 8010b52:	4622      	mov	r2, r4
 8010b54:	210a      	movs	r1, #10
 8010b56:	4628      	mov	r0, r5
 8010b58:	f000 f87c 	bl	8010c54 <__swbuf_r>
 8010b5c:	3001      	adds	r0, #1
 8010b5e:	d011      	beq.n	8010b84 <_puts_r+0x84>
 8010b60:	250a      	movs	r5, #10
 8010b62:	e011      	b.n	8010b88 <_puts_r+0x88>
 8010b64:	4b1b      	ldr	r3, [pc, #108]	; (8010bd4 <_puts_r+0xd4>)
 8010b66:	429c      	cmp	r4, r3
 8010b68:	d101      	bne.n	8010b6e <_puts_r+0x6e>
 8010b6a:	68ac      	ldr	r4, [r5, #8]
 8010b6c:	e7da      	b.n	8010b24 <_puts_r+0x24>
 8010b6e:	4b1a      	ldr	r3, [pc, #104]	; (8010bd8 <_puts_r+0xd8>)
 8010b70:	429c      	cmp	r4, r3
 8010b72:	bf08      	it	eq
 8010b74:	68ec      	ldreq	r4, [r5, #12]
 8010b76:	e7d5      	b.n	8010b24 <_puts_r+0x24>
 8010b78:	4621      	mov	r1, r4
 8010b7a:	4628      	mov	r0, r5
 8010b7c:	f000 f8bc 	bl	8010cf8 <__swsetup_r>
 8010b80:	2800      	cmp	r0, #0
 8010b82:	d0dd      	beq.n	8010b40 <_puts_r+0x40>
 8010b84:	f04f 35ff 	mov.w	r5, #4294967295
 8010b88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010b8a:	07da      	lsls	r2, r3, #31
 8010b8c:	d405      	bmi.n	8010b9a <_puts_r+0x9a>
 8010b8e:	89a3      	ldrh	r3, [r4, #12]
 8010b90:	059b      	lsls	r3, r3, #22
 8010b92:	d402      	bmi.n	8010b9a <_puts_r+0x9a>
 8010b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b96:	f000 fad6 	bl	8011146 <__retarget_lock_release_recursive>
 8010b9a:	4628      	mov	r0, r5
 8010b9c:	bd70      	pop	{r4, r5, r6, pc}
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	da04      	bge.n	8010bac <_puts_r+0xac>
 8010ba2:	69a2      	ldr	r2, [r4, #24]
 8010ba4:	429a      	cmp	r2, r3
 8010ba6:	dc06      	bgt.n	8010bb6 <_puts_r+0xb6>
 8010ba8:	290a      	cmp	r1, #10
 8010baa:	d004      	beq.n	8010bb6 <_puts_r+0xb6>
 8010bac:	6823      	ldr	r3, [r4, #0]
 8010bae:	1c5a      	adds	r2, r3, #1
 8010bb0:	6022      	str	r2, [r4, #0]
 8010bb2:	7019      	strb	r1, [r3, #0]
 8010bb4:	e7c5      	b.n	8010b42 <_puts_r+0x42>
 8010bb6:	4622      	mov	r2, r4
 8010bb8:	4628      	mov	r0, r5
 8010bba:	f000 f84b 	bl	8010c54 <__swbuf_r>
 8010bbe:	3001      	adds	r0, #1
 8010bc0:	d1bf      	bne.n	8010b42 <_puts_r+0x42>
 8010bc2:	e7df      	b.n	8010b84 <_puts_r+0x84>
 8010bc4:	6823      	ldr	r3, [r4, #0]
 8010bc6:	250a      	movs	r5, #10
 8010bc8:	1c5a      	adds	r2, r3, #1
 8010bca:	6022      	str	r2, [r4, #0]
 8010bcc:	701d      	strb	r5, [r3, #0]
 8010bce:	e7db      	b.n	8010b88 <_puts_r+0x88>
 8010bd0:	08013ebc 	.word	0x08013ebc
 8010bd4:	08013edc 	.word	0x08013edc
 8010bd8:	08013e9c 	.word	0x08013e9c

08010bdc <puts>:
 8010bdc:	4b02      	ldr	r3, [pc, #8]	; (8010be8 <puts+0xc>)
 8010bde:	4601      	mov	r1, r0
 8010be0:	6818      	ldr	r0, [r3, #0]
 8010be2:	f7ff bf8d 	b.w	8010b00 <_puts_r>
 8010be6:	bf00      	nop
 8010be8:	2000002c 	.word	0x2000002c

08010bec <sniprintf>:
 8010bec:	b40c      	push	{r2, r3}
 8010bee:	b530      	push	{r4, r5, lr}
 8010bf0:	4b17      	ldr	r3, [pc, #92]	; (8010c50 <sniprintf+0x64>)
 8010bf2:	1e0c      	subs	r4, r1, #0
 8010bf4:	681d      	ldr	r5, [r3, #0]
 8010bf6:	b09d      	sub	sp, #116	; 0x74
 8010bf8:	da08      	bge.n	8010c0c <sniprintf+0x20>
 8010bfa:	238b      	movs	r3, #139	; 0x8b
 8010bfc:	602b      	str	r3, [r5, #0]
 8010bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8010c02:	b01d      	add	sp, #116	; 0x74
 8010c04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010c08:	b002      	add	sp, #8
 8010c0a:	4770      	bx	lr
 8010c0c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010c10:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010c14:	bf14      	ite	ne
 8010c16:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010c1a:	4623      	moveq	r3, r4
 8010c1c:	9304      	str	r3, [sp, #16]
 8010c1e:	9307      	str	r3, [sp, #28]
 8010c20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010c24:	9002      	str	r0, [sp, #8]
 8010c26:	9006      	str	r0, [sp, #24]
 8010c28:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010c2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010c2e:	ab21      	add	r3, sp, #132	; 0x84
 8010c30:	a902      	add	r1, sp, #8
 8010c32:	4628      	mov	r0, r5
 8010c34:	9301      	str	r3, [sp, #4]
 8010c36:	f000 fb47 	bl	80112c8 <_svfiprintf_r>
 8010c3a:	1c43      	adds	r3, r0, #1
 8010c3c:	bfbc      	itt	lt
 8010c3e:	238b      	movlt	r3, #139	; 0x8b
 8010c40:	602b      	strlt	r3, [r5, #0]
 8010c42:	2c00      	cmp	r4, #0
 8010c44:	d0dd      	beq.n	8010c02 <sniprintf+0x16>
 8010c46:	9b02      	ldr	r3, [sp, #8]
 8010c48:	2200      	movs	r2, #0
 8010c4a:	701a      	strb	r2, [r3, #0]
 8010c4c:	e7d9      	b.n	8010c02 <sniprintf+0x16>
 8010c4e:	bf00      	nop
 8010c50:	2000002c 	.word	0x2000002c

08010c54 <__swbuf_r>:
 8010c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c56:	460e      	mov	r6, r1
 8010c58:	4614      	mov	r4, r2
 8010c5a:	4605      	mov	r5, r0
 8010c5c:	b118      	cbz	r0, 8010c66 <__swbuf_r+0x12>
 8010c5e:	6983      	ldr	r3, [r0, #24]
 8010c60:	b90b      	cbnz	r3, 8010c66 <__swbuf_r+0x12>
 8010c62:	f000 f9d1 	bl	8011008 <__sinit>
 8010c66:	4b21      	ldr	r3, [pc, #132]	; (8010cec <__swbuf_r+0x98>)
 8010c68:	429c      	cmp	r4, r3
 8010c6a:	d12b      	bne.n	8010cc4 <__swbuf_r+0x70>
 8010c6c:	686c      	ldr	r4, [r5, #4]
 8010c6e:	69a3      	ldr	r3, [r4, #24]
 8010c70:	60a3      	str	r3, [r4, #8]
 8010c72:	89a3      	ldrh	r3, [r4, #12]
 8010c74:	071a      	lsls	r2, r3, #28
 8010c76:	d52f      	bpl.n	8010cd8 <__swbuf_r+0x84>
 8010c78:	6923      	ldr	r3, [r4, #16]
 8010c7a:	b36b      	cbz	r3, 8010cd8 <__swbuf_r+0x84>
 8010c7c:	6923      	ldr	r3, [r4, #16]
 8010c7e:	6820      	ldr	r0, [r4, #0]
 8010c80:	1ac0      	subs	r0, r0, r3
 8010c82:	6963      	ldr	r3, [r4, #20]
 8010c84:	b2f6      	uxtb	r6, r6
 8010c86:	4283      	cmp	r3, r0
 8010c88:	4637      	mov	r7, r6
 8010c8a:	dc04      	bgt.n	8010c96 <__swbuf_r+0x42>
 8010c8c:	4621      	mov	r1, r4
 8010c8e:	4628      	mov	r0, r5
 8010c90:	f000 f926 	bl	8010ee0 <_fflush_r>
 8010c94:	bb30      	cbnz	r0, 8010ce4 <__swbuf_r+0x90>
 8010c96:	68a3      	ldr	r3, [r4, #8]
 8010c98:	3b01      	subs	r3, #1
 8010c9a:	60a3      	str	r3, [r4, #8]
 8010c9c:	6823      	ldr	r3, [r4, #0]
 8010c9e:	1c5a      	adds	r2, r3, #1
 8010ca0:	6022      	str	r2, [r4, #0]
 8010ca2:	701e      	strb	r6, [r3, #0]
 8010ca4:	6963      	ldr	r3, [r4, #20]
 8010ca6:	3001      	adds	r0, #1
 8010ca8:	4283      	cmp	r3, r0
 8010caa:	d004      	beq.n	8010cb6 <__swbuf_r+0x62>
 8010cac:	89a3      	ldrh	r3, [r4, #12]
 8010cae:	07db      	lsls	r3, r3, #31
 8010cb0:	d506      	bpl.n	8010cc0 <__swbuf_r+0x6c>
 8010cb2:	2e0a      	cmp	r6, #10
 8010cb4:	d104      	bne.n	8010cc0 <__swbuf_r+0x6c>
 8010cb6:	4621      	mov	r1, r4
 8010cb8:	4628      	mov	r0, r5
 8010cba:	f000 f911 	bl	8010ee0 <_fflush_r>
 8010cbe:	b988      	cbnz	r0, 8010ce4 <__swbuf_r+0x90>
 8010cc0:	4638      	mov	r0, r7
 8010cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010cc4:	4b0a      	ldr	r3, [pc, #40]	; (8010cf0 <__swbuf_r+0x9c>)
 8010cc6:	429c      	cmp	r4, r3
 8010cc8:	d101      	bne.n	8010cce <__swbuf_r+0x7a>
 8010cca:	68ac      	ldr	r4, [r5, #8]
 8010ccc:	e7cf      	b.n	8010c6e <__swbuf_r+0x1a>
 8010cce:	4b09      	ldr	r3, [pc, #36]	; (8010cf4 <__swbuf_r+0xa0>)
 8010cd0:	429c      	cmp	r4, r3
 8010cd2:	bf08      	it	eq
 8010cd4:	68ec      	ldreq	r4, [r5, #12]
 8010cd6:	e7ca      	b.n	8010c6e <__swbuf_r+0x1a>
 8010cd8:	4621      	mov	r1, r4
 8010cda:	4628      	mov	r0, r5
 8010cdc:	f000 f80c 	bl	8010cf8 <__swsetup_r>
 8010ce0:	2800      	cmp	r0, #0
 8010ce2:	d0cb      	beq.n	8010c7c <__swbuf_r+0x28>
 8010ce4:	f04f 37ff 	mov.w	r7, #4294967295
 8010ce8:	e7ea      	b.n	8010cc0 <__swbuf_r+0x6c>
 8010cea:	bf00      	nop
 8010cec:	08013ebc 	.word	0x08013ebc
 8010cf0:	08013edc 	.word	0x08013edc
 8010cf4:	08013e9c 	.word	0x08013e9c

08010cf8 <__swsetup_r>:
 8010cf8:	4b32      	ldr	r3, [pc, #200]	; (8010dc4 <__swsetup_r+0xcc>)
 8010cfa:	b570      	push	{r4, r5, r6, lr}
 8010cfc:	681d      	ldr	r5, [r3, #0]
 8010cfe:	4606      	mov	r6, r0
 8010d00:	460c      	mov	r4, r1
 8010d02:	b125      	cbz	r5, 8010d0e <__swsetup_r+0x16>
 8010d04:	69ab      	ldr	r3, [r5, #24]
 8010d06:	b913      	cbnz	r3, 8010d0e <__swsetup_r+0x16>
 8010d08:	4628      	mov	r0, r5
 8010d0a:	f000 f97d 	bl	8011008 <__sinit>
 8010d0e:	4b2e      	ldr	r3, [pc, #184]	; (8010dc8 <__swsetup_r+0xd0>)
 8010d10:	429c      	cmp	r4, r3
 8010d12:	d10f      	bne.n	8010d34 <__swsetup_r+0x3c>
 8010d14:	686c      	ldr	r4, [r5, #4]
 8010d16:	89a3      	ldrh	r3, [r4, #12]
 8010d18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010d1c:	0719      	lsls	r1, r3, #28
 8010d1e:	d42c      	bmi.n	8010d7a <__swsetup_r+0x82>
 8010d20:	06dd      	lsls	r5, r3, #27
 8010d22:	d411      	bmi.n	8010d48 <__swsetup_r+0x50>
 8010d24:	2309      	movs	r3, #9
 8010d26:	6033      	str	r3, [r6, #0]
 8010d28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010d2c:	81a3      	strh	r3, [r4, #12]
 8010d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8010d32:	e03e      	b.n	8010db2 <__swsetup_r+0xba>
 8010d34:	4b25      	ldr	r3, [pc, #148]	; (8010dcc <__swsetup_r+0xd4>)
 8010d36:	429c      	cmp	r4, r3
 8010d38:	d101      	bne.n	8010d3e <__swsetup_r+0x46>
 8010d3a:	68ac      	ldr	r4, [r5, #8]
 8010d3c:	e7eb      	b.n	8010d16 <__swsetup_r+0x1e>
 8010d3e:	4b24      	ldr	r3, [pc, #144]	; (8010dd0 <__swsetup_r+0xd8>)
 8010d40:	429c      	cmp	r4, r3
 8010d42:	bf08      	it	eq
 8010d44:	68ec      	ldreq	r4, [r5, #12]
 8010d46:	e7e6      	b.n	8010d16 <__swsetup_r+0x1e>
 8010d48:	0758      	lsls	r0, r3, #29
 8010d4a:	d512      	bpl.n	8010d72 <__swsetup_r+0x7a>
 8010d4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010d4e:	b141      	cbz	r1, 8010d62 <__swsetup_r+0x6a>
 8010d50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010d54:	4299      	cmp	r1, r3
 8010d56:	d002      	beq.n	8010d5e <__swsetup_r+0x66>
 8010d58:	4630      	mov	r0, r6
 8010d5a:	f7ff fe27 	bl	80109ac <_free_r>
 8010d5e:	2300      	movs	r3, #0
 8010d60:	6363      	str	r3, [r4, #52]	; 0x34
 8010d62:	89a3      	ldrh	r3, [r4, #12]
 8010d64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010d68:	81a3      	strh	r3, [r4, #12]
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	6063      	str	r3, [r4, #4]
 8010d6e:	6923      	ldr	r3, [r4, #16]
 8010d70:	6023      	str	r3, [r4, #0]
 8010d72:	89a3      	ldrh	r3, [r4, #12]
 8010d74:	f043 0308 	orr.w	r3, r3, #8
 8010d78:	81a3      	strh	r3, [r4, #12]
 8010d7a:	6923      	ldr	r3, [r4, #16]
 8010d7c:	b94b      	cbnz	r3, 8010d92 <__swsetup_r+0x9a>
 8010d7e:	89a3      	ldrh	r3, [r4, #12]
 8010d80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010d88:	d003      	beq.n	8010d92 <__swsetup_r+0x9a>
 8010d8a:	4621      	mov	r1, r4
 8010d8c:	4630      	mov	r0, r6
 8010d8e:	f000 f9ff 	bl	8011190 <__smakebuf_r>
 8010d92:	89a0      	ldrh	r0, [r4, #12]
 8010d94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010d98:	f010 0301 	ands.w	r3, r0, #1
 8010d9c:	d00a      	beq.n	8010db4 <__swsetup_r+0xbc>
 8010d9e:	2300      	movs	r3, #0
 8010da0:	60a3      	str	r3, [r4, #8]
 8010da2:	6963      	ldr	r3, [r4, #20]
 8010da4:	425b      	negs	r3, r3
 8010da6:	61a3      	str	r3, [r4, #24]
 8010da8:	6923      	ldr	r3, [r4, #16]
 8010daa:	b943      	cbnz	r3, 8010dbe <__swsetup_r+0xc6>
 8010dac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010db0:	d1ba      	bne.n	8010d28 <__swsetup_r+0x30>
 8010db2:	bd70      	pop	{r4, r5, r6, pc}
 8010db4:	0781      	lsls	r1, r0, #30
 8010db6:	bf58      	it	pl
 8010db8:	6963      	ldrpl	r3, [r4, #20]
 8010dba:	60a3      	str	r3, [r4, #8]
 8010dbc:	e7f4      	b.n	8010da8 <__swsetup_r+0xb0>
 8010dbe:	2000      	movs	r0, #0
 8010dc0:	e7f7      	b.n	8010db2 <__swsetup_r+0xba>
 8010dc2:	bf00      	nop
 8010dc4:	2000002c 	.word	0x2000002c
 8010dc8:	08013ebc 	.word	0x08013ebc
 8010dcc:	08013edc 	.word	0x08013edc
 8010dd0:	08013e9c 	.word	0x08013e9c

08010dd4 <__sflush_r>:
 8010dd4:	898a      	ldrh	r2, [r1, #12]
 8010dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dda:	4605      	mov	r5, r0
 8010ddc:	0710      	lsls	r0, r2, #28
 8010dde:	460c      	mov	r4, r1
 8010de0:	d458      	bmi.n	8010e94 <__sflush_r+0xc0>
 8010de2:	684b      	ldr	r3, [r1, #4]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	dc05      	bgt.n	8010df4 <__sflush_r+0x20>
 8010de8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	dc02      	bgt.n	8010df4 <__sflush_r+0x20>
 8010dee:	2000      	movs	r0, #0
 8010df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010df4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010df6:	2e00      	cmp	r6, #0
 8010df8:	d0f9      	beq.n	8010dee <__sflush_r+0x1a>
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010e00:	682f      	ldr	r7, [r5, #0]
 8010e02:	602b      	str	r3, [r5, #0]
 8010e04:	d032      	beq.n	8010e6c <__sflush_r+0x98>
 8010e06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010e08:	89a3      	ldrh	r3, [r4, #12]
 8010e0a:	075a      	lsls	r2, r3, #29
 8010e0c:	d505      	bpl.n	8010e1a <__sflush_r+0x46>
 8010e0e:	6863      	ldr	r3, [r4, #4]
 8010e10:	1ac0      	subs	r0, r0, r3
 8010e12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010e14:	b10b      	cbz	r3, 8010e1a <__sflush_r+0x46>
 8010e16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010e18:	1ac0      	subs	r0, r0, r3
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	4602      	mov	r2, r0
 8010e1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010e20:	6a21      	ldr	r1, [r4, #32]
 8010e22:	4628      	mov	r0, r5
 8010e24:	47b0      	blx	r6
 8010e26:	1c43      	adds	r3, r0, #1
 8010e28:	89a3      	ldrh	r3, [r4, #12]
 8010e2a:	d106      	bne.n	8010e3a <__sflush_r+0x66>
 8010e2c:	6829      	ldr	r1, [r5, #0]
 8010e2e:	291d      	cmp	r1, #29
 8010e30:	d82c      	bhi.n	8010e8c <__sflush_r+0xb8>
 8010e32:	4a2a      	ldr	r2, [pc, #168]	; (8010edc <__sflush_r+0x108>)
 8010e34:	40ca      	lsrs	r2, r1
 8010e36:	07d6      	lsls	r6, r2, #31
 8010e38:	d528      	bpl.n	8010e8c <__sflush_r+0xb8>
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	6062      	str	r2, [r4, #4]
 8010e3e:	04d9      	lsls	r1, r3, #19
 8010e40:	6922      	ldr	r2, [r4, #16]
 8010e42:	6022      	str	r2, [r4, #0]
 8010e44:	d504      	bpl.n	8010e50 <__sflush_r+0x7c>
 8010e46:	1c42      	adds	r2, r0, #1
 8010e48:	d101      	bne.n	8010e4e <__sflush_r+0x7a>
 8010e4a:	682b      	ldr	r3, [r5, #0]
 8010e4c:	b903      	cbnz	r3, 8010e50 <__sflush_r+0x7c>
 8010e4e:	6560      	str	r0, [r4, #84]	; 0x54
 8010e50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010e52:	602f      	str	r7, [r5, #0]
 8010e54:	2900      	cmp	r1, #0
 8010e56:	d0ca      	beq.n	8010dee <__sflush_r+0x1a>
 8010e58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010e5c:	4299      	cmp	r1, r3
 8010e5e:	d002      	beq.n	8010e66 <__sflush_r+0x92>
 8010e60:	4628      	mov	r0, r5
 8010e62:	f7ff fda3 	bl	80109ac <_free_r>
 8010e66:	2000      	movs	r0, #0
 8010e68:	6360      	str	r0, [r4, #52]	; 0x34
 8010e6a:	e7c1      	b.n	8010df0 <__sflush_r+0x1c>
 8010e6c:	6a21      	ldr	r1, [r4, #32]
 8010e6e:	2301      	movs	r3, #1
 8010e70:	4628      	mov	r0, r5
 8010e72:	47b0      	blx	r6
 8010e74:	1c41      	adds	r1, r0, #1
 8010e76:	d1c7      	bne.n	8010e08 <__sflush_r+0x34>
 8010e78:	682b      	ldr	r3, [r5, #0]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d0c4      	beq.n	8010e08 <__sflush_r+0x34>
 8010e7e:	2b1d      	cmp	r3, #29
 8010e80:	d001      	beq.n	8010e86 <__sflush_r+0xb2>
 8010e82:	2b16      	cmp	r3, #22
 8010e84:	d101      	bne.n	8010e8a <__sflush_r+0xb6>
 8010e86:	602f      	str	r7, [r5, #0]
 8010e88:	e7b1      	b.n	8010dee <__sflush_r+0x1a>
 8010e8a:	89a3      	ldrh	r3, [r4, #12]
 8010e8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e90:	81a3      	strh	r3, [r4, #12]
 8010e92:	e7ad      	b.n	8010df0 <__sflush_r+0x1c>
 8010e94:	690f      	ldr	r7, [r1, #16]
 8010e96:	2f00      	cmp	r7, #0
 8010e98:	d0a9      	beq.n	8010dee <__sflush_r+0x1a>
 8010e9a:	0793      	lsls	r3, r2, #30
 8010e9c:	680e      	ldr	r6, [r1, #0]
 8010e9e:	bf08      	it	eq
 8010ea0:	694b      	ldreq	r3, [r1, #20]
 8010ea2:	600f      	str	r7, [r1, #0]
 8010ea4:	bf18      	it	ne
 8010ea6:	2300      	movne	r3, #0
 8010ea8:	eba6 0807 	sub.w	r8, r6, r7
 8010eac:	608b      	str	r3, [r1, #8]
 8010eae:	f1b8 0f00 	cmp.w	r8, #0
 8010eb2:	dd9c      	ble.n	8010dee <__sflush_r+0x1a>
 8010eb4:	6a21      	ldr	r1, [r4, #32]
 8010eb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010eb8:	4643      	mov	r3, r8
 8010eba:	463a      	mov	r2, r7
 8010ebc:	4628      	mov	r0, r5
 8010ebe:	47b0      	blx	r6
 8010ec0:	2800      	cmp	r0, #0
 8010ec2:	dc06      	bgt.n	8010ed2 <__sflush_r+0xfe>
 8010ec4:	89a3      	ldrh	r3, [r4, #12]
 8010ec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010eca:	81a3      	strh	r3, [r4, #12]
 8010ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8010ed0:	e78e      	b.n	8010df0 <__sflush_r+0x1c>
 8010ed2:	4407      	add	r7, r0
 8010ed4:	eba8 0800 	sub.w	r8, r8, r0
 8010ed8:	e7e9      	b.n	8010eae <__sflush_r+0xda>
 8010eda:	bf00      	nop
 8010edc:	20400001 	.word	0x20400001

08010ee0 <_fflush_r>:
 8010ee0:	b538      	push	{r3, r4, r5, lr}
 8010ee2:	690b      	ldr	r3, [r1, #16]
 8010ee4:	4605      	mov	r5, r0
 8010ee6:	460c      	mov	r4, r1
 8010ee8:	b913      	cbnz	r3, 8010ef0 <_fflush_r+0x10>
 8010eea:	2500      	movs	r5, #0
 8010eec:	4628      	mov	r0, r5
 8010eee:	bd38      	pop	{r3, r4, r5, pc}
 8010ef0:	b118      	cbz	r0, 8010efa <_fflush_r+0x1a>
 8010ef2:	6983      	ldr	r3, [r0, #24]
 8010ef4:	b90b      	cbnz	r3, 8010efa <_fflush_r+0x1a>
 8010ef6:	f000 f887 	bl	8011008 <__sinit>
 8010efa:	4b14      	ldr	r3, [pc, #80]	; (8010f4c <_fflush_r+0x6c>)
 8010efc:	429c      	cmp	r4, r3
 8010efe:	d11b      	bne.n	8010f38 <_fflush_r+0x58>
 8010f00:	686c      	ldr	r4, [r5, #4]
 8010f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d0ef      	beq.n	8010eea <_fflush_r+0xa>
 8010f0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010f0c:	07d0      	lsls	r0, r2, #31
 8010f0e:	d404      	bmi.n	8010f1a <_fflush_r+0x3a>
 8010f10:	0599      	lsls	r1, r3, #22
 8010f12:	d402      	bmi.n	8010f1a <_fflush_r+0x3a>
 8010f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010f16:	f000 f915 	bl	8011144 <__retarget_lock_acquire_recursive>
 8010f1a:	4628      	mov	r0, r5
 8010f1c:	4621      	mov	r1, r4
 8010f1e:	f7ff ff59 	bl	8010dd4 <__sflush_r>
 8010f22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010f24:	07da      	lsls	r2, r3, #31
 8010f26:	4605      	mov	r5, r0
 8010f28:	d4e0      	bmi.n	8010eec <_fflush_r+0xc>
 8010f2a:	89a3      	ldrh	r3, [r4, #12]
 8010f2c:	059b      	lsls	r3, r3, #22
 8010f2e:	d4dd      	bmi.n	8010eec <_fflush_r+0xc>
 8010f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010f32:	f000 f908 	bl	8011146 <__retarget_lock_release_recursive>
 8010f36:	e7d9      	b.n	8010eec <_fflush_r+0xc>
 8010f38:	4b05      	ldr	r3, [pc, #20]	; (8010f50 <_fflush_r+0x70>)
 8010f3a:	429c      	cmp	r4, r3
 8010f3c:	d101      	bne.n	8010f42 <_fflush_r+0x62>
 8010f3e:	68ac      	ldr	r4, [r5, #8]
 8010f40:	e7df      	b.n	8010f02 <_fflush_r+0x22>
 8010f42:	4b04      	ldr	r3, [pc, #16]	; (8010f54 <_fflush_r+0x74>)
 8010f44:	429c      	cmp	r4, r3
 8010f46:	bf08      	it	eq
 8010f48:	68ec      	ldreq	r4, [r5, #12]
 8010f4a:	e7da      	b.n	8010f02 <_fflush_r+0x22>
 8010f4c:	08013ebc 	.word	0x08013ebc
 8010f50:	08013edc 	.word	0x08013edc
 8010f54:	08013e9c 	.word	0x08013e9c

08010f58 <std>:
 8010f58:	2300      	movs	r3, #0
 8010f5a:	b510      	push	{r4, lr}
 8010f5c:	4604      	mov	r4, r0
 8010f5e:	e9c0 3300 	strd	r3, r3, [r0]
 8010f62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010f66:	6083      	str	r3, [r0, #8]
 8010f68:	8181      	strh	r1, [r0, #12]
 8010f6a:	6643      	str	r3, [r0, #100]	; 0x64
 8010f6c:	81c2      	strh	r2, [r0, #14]
 8010f6e:	6183      	str	r3, [r0, #24]
 8010f70:	4619      	mov	r1, r3
 8010f72:	2208      	movs	r2, #8
 8010f74:	305c      	adds	r0, #92	; 0x5c
 8010f76:	f7ff fd11 	bl	801099c <memset>
 8010f7a:	4b05      	ldr	r3, [pc, #20]	; (8010f90 <std+0x38>)
 8010f7c:	6263      	str	r3, [r4, #36]	; 0x24
 8010f7e:	4b05      	ldr	r3, [pc, #20]	; (8010f94 <std+0x3c>)
 8010f80:	62a3      	str	r3, [r4, #40]	; 0x28
 8010f82:	4b05      	ldr	r3, [pc, #20]	; (8010f98 <std+0x40>)
 8010f84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010f86:	4b05      	ldr	r3, [pc, #20]	; (8010f9c <std+0x44>)
 8010f88:	6224      	str	r4, [r4, #32]
 8010f8a:	6323      	str	r3, [r4, #48]	; 0x30
 8010f8c:	bd10      	pop	{r4, pc}
 8010f8e:	bf00      	nop
 8010f90:	080117f1 	.word	0x080117f1
 8010f94:	08011813 	.word	0x08011813
 8010f98:	0801184b 	.word	0x0801184b
 8010f9c:	0801186f 	.word	0x0801186f

08010fa0 <_cleanup_r>:
 8010fa0:	4901      	ldr	r1, [pc, #4]	; (8010fa8 <_cleanup_r+0x8>)
 8010fa2:	f000 b8af 	b.w	8011104 <_fwalk_reent>
 8010fa6:	bf00      	nop
 8010fa8:	08010ee1 	.word	0x08010ee1

08010fac <__sfmoreglue>:
 8010fac:	b570      	push	{r4, r5, r6, lr}
 8010fae:	1e4a      	subs	r2, r1, #1
 8010fb0:	2568      	movs	r5, #104	; 0x68
 8010fb2:	4355      	muls	r5, r2
 8010fb4:	460e      	mov	r6, r1
 8010fb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010fba:	f7ff fd47 	bl	8010a4c <_malloc_r>
 8010fbe:	4604      	mov	r4, r0
 8010fc0:	b140      	cbz	r0, 8010fd4 <__sfmoreglue+0x28>
 8010fc2:	2100      	movs	r1, #0
 8010fc4:	e9c0 1600 	strd	r1, r6, [r0]
 8010fc8:	300c      	adds	r0, #12
 8010fca:	60a0      	str	r0, [r4, #8]
 8010fcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010fd0:	f7ff fce4 	bl	801099c <memset>
 8010fd4:	4620      	mov	r0, r4
 8010fd6:	bd70      	pop	{r4, r5, r6, pc}

08010fd8 <__sfp_lock_acquire>:
 8010fd8:	4801      	ldr	r0, [pc, #4]	; (8010fe0 <__sfp_lock_acquire+0x8>)
 8010fda:	f000 b8b3 	b.w	8011144 <__retarget_lock_acquire_recursive>
 8010fde:	bf00      	nop
 8010fe0:	20004d1c 	.word	0x20004d1c

08010fe4 <__sfp_lock_release>:
 8010fe4:	4801      	ldr	r0, [pc, #4]	; (8010fec <__sfp_lock_release+0x8>)
 8010fe6:	f000 b8ae 	b.w	8011146 <__retarget_lock_release_recursive>
 8010fea:	bf00      	nop
 8010fec:	20004d1c 	.word	0x20004d1c

08010ff0 <__sinit_lock_acquire>:
 8010ff0:	4801      	ldr	r0, [pc, #4]	; (8010ff8 <__sinit_lock_acquire+0x8>)
 8010ff2:	f000 b8a7 	b.w	8011144 <__retarget_lock_acquire_recursive>
 8010ff6:	bf00      	nop
 8010ff8:	20004d17 	.word	0x20004d17

08010ffc <__sinit_lock_release>:
 8010ffc:	4801      	ldr	r0, [pc, #4]	; (8011004 <__sinit_lock_release+0x8>)
 8010ffe:	f000 b8a2 	b.w	8011146 <__retarget_lock_release_recursive>
 8011002:	bf00      	nop
 8011004:	20004d17 	.word	0x20004d17

08011008 <__sinit>:
 8011008:	b510      	push	{r4, lr}
 801100a:	4604      	mov	r4, r0
 801100c:	f7ff fff0 	bl	8010ff0 <__sinit_lock_acquire>
 8011010:	69a3      	ldr	r3, [r4, #24]
 8011012:	b11b      	cbz	r3, 801101c <__sinit+0x14>
 8011014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011018:	f7ff bff0 	b.w	8010ffc <__sinit_lock_release>
 801101c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011020:	6523      	str	r3, [r4, #80]	; 0x50
 8011022:	4b13      	ldr	r3, [pc, #76]	; (8011070 <__sinit+0x68>)
 8011024:	4a13      	ldr	r2, [pc, #76]	; (8011074 <__sinit+0x6c>)
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	62a2      	str	r2, [r4, #40]	; 0x28
 801102a:	42a3      	cmp	r3, r4
 801102c:	bf04      	itt	eq
 801102e:	2301      	moveq	r3, #1
 8011030:	61a3      	streq	r3, [r4, #24]
 8011032:	4620      	mov	r0, r4
 8011034:	f000 f820 	bl	8011078 <__sfp>
 8011038:	6060      	str	r0, [r4, #4]
 801103a:	4620      	mov	r0, r4
 801103c:	f000 f81c 	bl	8011078 <__sfp>
 8011040:	60a0      	str	r0, [r4, #8]
 8011042:	4620      	mov	r0, r4
 8011044:	f000 f818 	bl	8011078 <__sfp>
 8011048:	2200      	movs	r2, #0
 801104a:	60e0      	str	r0, [r4, #12]
 801104c:	2104      	movs	r1, #4
 801104e:	6860      	ldr	r0, [r4, #4]
 8011050:	f7ff ff82 	bl	8010f58 <std>
 8011054:	68a0      	ldr	r0, [r4, #8]
 8011056:	2201      	movs	r2, #1
 8011058:	2109      	movs	r1, #9
 801105a:	f7ff ff7d 	bl	8010f58 <std>
 801105e:	68e0      	ldr	r0, [r4, #12]
 8011060:	2202      	movs	r2, #2
 8011062:	2112      	movs	r1, #18
 8011064:	f7ff ff78 	bl	8010f58 <std>
 8011068:	2301      	movs	r3, #1
 801106a:	61a3      	str	r3, [r4, #24]
 801106c:	e7d2      	b.n	8011014 <__sinit+0xc>
 801106e:	bf00      	nop
 8011070:	08013e98 	.word	0x08013e98
 8011074:	08010fa1 	.word	0x08010fa1

08011078 <__sfp>:
 8011078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801107a:	4607      	mov	r7, r0
 801107c:	f7ff ffac 	bl	8010fd8 <__sfp_lock_acquire>
 8011080:	4b1e      	ldr	r3, [pc, #120]	; (80110fc <__sfp+0x84>)
 8011082:	681e      	ldr	r6, [r3, #0]
 8011084:	69b3      	ldr	r3, [r6, #24]
 8011086:	b913      	cbnz	r3, 801108e <__sfp+0x16>
 8011088:	4630      	mov	r0, r6
 801108a:	f7ff ffbd 	bl	8011008 <__sinit>
 801108e:	3648      	adds	r6, #72	; 0x48
 8011090:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011094:	3b01      	subs	r3, #1
 8011096:	d503      	bpl.n	80110a0 <__sfp+0x28>
 8011098:	6833      	ldr	r3, [r6, #0]
 801109a:	b30b      	cbz	r3, 80110e0 <__sfp+0x68>
 801109c:	6836      	ldr	r6, [r6, #0]
 801109e:	e7f7      	b.n	8011090 <__sfp+0x18>
 80110a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80110a4:	b9d5      	cbnz	r5, 80110dc <__sfp+0x64>
 80110a6:	4b16      	ldr	r3, [pc, #88]	; (8011100 <__sfp+0x88>)
 80110a8:	60e3      	str	r3, [r4, #12]
 80110aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80110ae:	6665      	str	r5, [r4, #100]	; 0x64
 80110b0:	f000 f847 	bl	8011142 <__retarget_lock_init_recursive>
 80110b4:	f7ff ff96 	bl	8010fe4 <__sfp_lock_release>
 80110b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80110bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80110c0:	6025      	str	r5, [r4, #0]
 80110c2:	61a5      	str	r5, [r4, #24]
 80110c4:	2208      	movs	r2, #8
 80110c6:	4629      	mov	r1, r5
 80110c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80110cc:	f7ff fc66 	bl	801099c <memset>
 80110d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80110d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80110d8:	4620      	mov	r0, r4
 80110da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110dc:	3468      	adds	r4, #104	; 0x68
 80110de:	e7d9      	b.n	8011094 <__sfp+0x1c>
 80110e0:	2104      	movs	r1, #4
 80110e2:	4638      	mov	r0, r7
 80110e4:	f7ff ff62 	bl	8010fac <__sfmoreglue>
 80110e8:	4604      	mov	r4, r0
 80110ea:	6030      	str	r0, [r6, #0]
 80110ec:	2800      	cmp	r0, #0
 80110ee:	d1d5      	bne.n	801109c <__sfp+0x24>
 80110f0:	f7ff ff78 	bl	8010fe4 <__sfp_lock_release>
 80110f4:	230c      	movs	r3, #12
 80110f6:	603b      	str	r3, [r7, #0]
 80110f8:	e7ee      	b.n	80110d8 <__sfp+0x60>
 80110fa:	bf00      	nop
 80110fc:	08013e98 	.word	0x08013e98
 8011100:	ffff0001 	.word	0xffff0001

08011104 <_fwalk_reent>:
 8011104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011108:	4606      	mov	r6, r0
 801110a:	4688      	mov	r8, r1
 801110c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011110:	2700      	movs	r7, #0
 8011112:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011116:	f1b9 0901 	subs.w	r9, r9, #1
 801111a:	d505      	bpl.n	8011128 <_fwalk_reent+0x24>
 801111c:	6824      	ldr	r4, [r4, #0]
 801111e:	2c00      	cmp	r4, #0
 8011120:	d1f7      	bne.n	8011112 <_fwalk_reent+0xe>
 8011122:	4638      	mov	r0, r7
 8011124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011128:	89ab      	ldrh	r3, [r5, #12]
 801112a:	2b01      	cmp	r3, #1
 801112c:	d907      	bls.n	801113e <_fwalk_reent+0x3a>
 801112e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011132:	3301      	adds	r3, #1
 8011134:	d003      	beq.n	801113e <_fwalk_reent+0x3a>
 8011136:	4629      	mov	r1, r5
 8011138:	4630      	mov	r0, r6
 801113a:	47c0      	blx	r8
 801113c:	4307      	orrs	r7, r0
 801113e:	3568      	adds	r5, #104	; 0x68
 8011140:	e7e9      	b.n	8011116 <_fwalk_reent+0x12>

08011142 <__retarget_lock_init_recursive>:
 8011142:	4770      	bx	lr

08011144 <__retarget_lock_acquire_recursive>:
 8011144:	4770      	bx	lr

08011146 <__retarget_lock_release_recursive>:
 8011146:	4770      	bx	lr

08011148 <__swhatbuf_r>:
 8011148:	b570      	push	{r4, r5, r6, lr}
 801114a:	460e      	mov	r6, r1
 801114c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011150:	2900      	cmp	r1, #0
 8011152:	b096      	sub	sp, #88	; 0x58
 8011154:	4614      	mov	r4, r2
 8011156:	461d      	mov	r5, r3
 8011158:	da07      	bge.n	801116a <__swhatbuf_r+0x22>
 801115a:	2300      	movs	r3, #0
 801115c:	602b      	str	r3, [r5, #0]
 801115e:	89b3      	ldrh	r3, [r6, #12]
 8011160:	061a      	lsls	r2, r3, #24
 8011162:	d410      	bmi.n	8011186 <__swhatbuf_r+0x3e>
 8011164:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011168:	e00e      	b.n	8011188 <__swhatbuf_r+0x40>
 801116a:	466a      	mov	r2, sp
 801116c:	f000 fba6 	bl	80118bc <_fstat_r>
 8011170:	2800      	cmp	r0, #0
 8011172:	dbf2      	blt.n	801115a <__swhatbuf_r+0x12>
 8011174:	9a01      	ldr	r2, [sp, #4]
 8011176:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801117a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801117e:	425a      	negs	r2, r3
 8011180:	415a      	adcs	r2, r3
 8011182:	602a      	str	r2, [r5, #0]
 8011184:	e7ee      	b.n	8011164 <__swhatbuf_r+0x1c>
 8011186:	2340      	movs	r3, #64	; 0x40
 8011188:	2000      	movs	r0, #0
 801118a:	6023      	str	r3, [r4, #0]
 801118c:	b016      	add	sp, #88	; 0x58
 801118e:	bd70      	pop	{r4, r5, r6, pc}

08011190 <__smakebuf_r>:
 8011190:	898b      	ldrh	r3, [r1, #12]
 8011192:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011194:	079d      	lsls	r5, r3, #30
 8011196:	4606      	mov	r6, r0
 8011198:	460c      	mov	r4, r1
 801119a:	d507      	bpl.n	80111ac <__smakebuf_r+0x1c>
 801119c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80111a0:	6023      	str	r3, [r4, #0]
 80111a2:	6123      	str	r3, [r4, #16]
 80111a4:	2301      	movs	r3, #1
 80111a6:	6163      	str	r3, [r4, #20]
 80111a8:	b002      	add	sp, #8
 80111aa:	bd70      	pop	{r4, r5, r6, pc}
 80111ac:	ab01      	add	r3, sp, #4
 80111ae:	466a      	mov	r2, sp
 80111b0:	f7ff ffca 	bl	8011148 <__swhatbuf_r>
 80111b4:	9900      	ldr	r1, [sp, #0]
 80111b6:	4605      	mov	r5, r0
 80111b8:	4630      	mov	r0, r6
 80111ba:	f7ff fc47 	bl	8010a4c <_malloc_r>
 80111be:	b948      	cbnz	r0, 80111d4 <__smakebuf_r+0x44>
 80111c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111c4:	059a      	lsls	r2, r3, #22
 80111c6:	d4ef      	bmi.n	80111a8 <__smakebuf_r+0x18>
 80111c8:	f023 0303 	bic.w	r3, r3, #3
 80111cc:	f043 0302 	orr.w	r3, r3, #2
 80111d0:	81a3      	strh	r3, [r4, #12]
 80111d2:	e7e3      	b.n	801119c <__smakebuf_r+0xc>
 80111d4:	4b0d      	ldr	r3, [pc, #52]	; (801120c <__smakebuf_r+0x7c>)
 80111d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80111d8:	89a3      	ldrh	r3, [r4, #12]
 80111da:	6020      	str	r0, [r4, #0]
 80111dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80111e0:	81a3      	strh	r3, [r4, #12]
 80111e2:	9b00      	ldr	r3, [sp, #0]
 80111e4:	6163      	str	r3, [r4, #20]
 80111e6:	9b01      	ldr	r3, [sp, #4]
 80111e8:	6120      	str	r0, [r4, #16]
 80111ea:	b15b      	cbz	r3, 8011204 <__smakebuf_r+0x74>
 80111ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80111f0:	4630      	mov	r0, r6
 80111f2:	f000 fb75 	bl	80118e0 <_isatty_r>
 80111f6:	b128      	cbz	r0, 8011204 <__smakebuf_r+0x74>
 80111f8:	89a3      	ldrh	r3, [r4, #12]
 80111fa:	f023 0303 	bic.w	r3, r3, #3
 80111fe:	f043 0301 	orr.w	r3, r3, #1
 8011202:	81a3      	strh	r3, [r4, #12]
 8011204:	89a0      	ldrh	r0, [r4, #12]
 8011206:	4305      	orrs	r5, r0
 8011208:	81a5      	strh	r5, [r4, #12]
 801120a:	e7cd      	b.n	80111a8 <__smakebuf_r+0x18>
 801120c:	08010fa1 	.word	0x08010fa1

08011210 <__ssputs_r>:
 8011210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011214:	688e      	ldr	r6, [r1, #8]
 8011216:	429e      	cmp	r6, r3
 8011218:	4682      	mov	sl, r0
 801121a:	460c      	mov	r4, r1
 801121c:	4690      	mov	r8, r2
 801121e:	461f      	mov	r7, r3
 8011220:	d838      	bhi.n	8011294 <__ssputs_r+0x84>
 8011222:	898a      	ldrh	r2, [r1, #12]
 8011224:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011228:	d032      	beq.n	8011290 <__ssputs_r+0x80>
 801122a:	6825      	ldr	r5, [r4, #0]
 801122c:	6909      	ldr	r1, [r1, #16]
 801122e:	eba5 0901 	sub.w	r9, r5, r1
 8011232:	6965      	ldr	r5, [r4, #20]
 8011234:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011238:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801123c:	3301      	adds	r3, #1
 801123e:	444b      	add	r3, r9
 8011240:	106d      	asrs	r5, r5, #1
 8011242:	429d      	cmp	r5, r3
 8011244:	bf38      	it	cc
 8011246:	461d      	movcc	r5, r3
 8011248:	0553      	lsls	r3, r2, #21
 801124a:	d531      	bpl.n	80112b0 <__ssputs_r+0xa0>
 801124c:	4629      	mov	r1, r5
 801124e:	f7ff fbfd 	bl	8010a4c <_malloc_r>
 8011252:	4606      	mov	r6, r0
 8011254:	b950      	cbnz	r0, 801126c <__ssputs_r+0x5c>
 8011256:	230c      	movs	r3, #12
 8011258:	f8ca 3000 	str.w	r3, [sl]
 801125c:	89a3      	ldrh	r3, [r4, #12]
 801125e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011262:	81a3      	strh	r3, [r4, #12]
 8011264:	f04f 30ff 	mov.w	r0, #4294967295
 8011268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801126c:	6921      	ldr	r1, [r4, #16]
 801126e:	464a      	mov	r2, r9
 8011270:	f7ff fb86 	bl	8010980 <memcpy>
 8011274:	89a3      	ldrh	r3, [r4, #12]
 8011276:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801127a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801127e:	81a3      	strh	r3, [r4, #12]
 8011280:	6126      	str	r6, [r4, #16]
 8011282:	6165      	str	r5, [r4, #20]
 8011284:	444e      	add	r6, r9
 8011286:	eba5 0509 	sub.w	r5, r5, r9
 801128a:	6026      	str	r6, [r4, #0]
 801128c:	60a5      	str	r5, [r4, #8]
 801128e:	463e      	mov	r6, r7
 8011290:	42be      	cmp	r6, r7
 8011292:	d900      	bls.n	8011296 <__ssputs_r+0x86>
 8011294:	463e      	mov	r6, r7
 8011296:	4632      	mov	r2, r6
 8011298:	6820      	ldr	r0, [r4, #0]
 801129a:	4641      	mov	r1, r8
 801129c:	f000 fb42 	bl	8011924 <memmove>
 80112a0:	68a3      	ldr	r3, [r4, #8]
 80112a2:	6822      	ldr	r2, [r4, #0]
 80112a4:	1b9b      	subs	r3, r3, r6
 80112a6:	4432      	add	r2, r6
 80112a8:	60a3      	str	r3, [r4, #8]
 80112aa:	6022      	str	r2, [r4, #0]
 80112ac:	2000      	movs	r0, #0
 80112ae:	e7db      	b.n	8011268 <__ssputs_r+0x58>
 80112b0:	462a      	mov	r2, r5
 80112b2:	f000 fb51 	bl	8011958 <_realloc_r>
 80112b6:	4606      	mov	r6, r0
 80112b8:	2800      	cmp	r0, #0
 80112ba:	d1e1      	bne.n	8011280 <__ssputs_r+0x70>
 80112bc:	6921      	ldr	r1, [r4, #16]
 80112be:	4650      	mov	r0, sl
 80112c0:	f7ff fb74 	bl	80109ac <_free_r>
 80112c4:	e7c7      	b.n	8011256 <__ssputs_r+0x46>
	...

080112c8 <_svfiprintf_r>:
 80112c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112cc:	4698      	mov	r8, r3
 80112ce:	898b      	ldrh	r3, [r1, #12]
 80112d0:	061b      	lsls	r3, r3, #24
 80112d2:	b09d      	sub	sp, #116	; 0x74
 80112d4:	4607      	mov	r7, r0
 80112d6:	460d      	mov	r5, r1
 80112d8:	4614      	mov	r4, r2
 80112da:	d50e      	bpl.n	80112fa <_svfiprintf_r+0x32>
 80112dc:	690b      	ldr	r3, [r1, #16]
 80112de:	b963      	cbnz	r3, 80112fa <_svfiprintf_r+0x32>
 80112e0:	2140      	movs	r1, #64	; 0x40
 80112e2:	f7ff fbb3 	bl	8010a4c <_malloc_r>
 80112e6:	6028      	str	r0, [r5, #0]
 80112e8:	6128      	str	r0, [r5, #16]
 80112ea:	b920      	cbnz	r0, 80112f6 <_svfiprintf_r+0x2e>
 80112ec:	230c      	movs	r3, #12
 80112ee:	603b      	str	r3, [r7, #0]
 80112f0:	f04f 30ff 	mov.w	r0, #4294967295
 80112f4:	e0d1      	b.n	801149a <_svfiprintf_r+0x1d2>
 80112f6:	2340      	movs	r3, #64	; 0x40
 80112f8:	616b      	str	r3, [r5, #20]
 80112fa:	2300      	movs	r3, #0
 80112fc:	9309      	str	r3, [sp, #36]	; 0x24
 80112fe:	2320      	movs	r3, #32
 8011300:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011304:	f8cd 800c 	str.w	r8, [sp, #12]
 8011308:	2330      	movs	r3, #48	; 0x30
 801130a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80114b4 <_svfiprintf_r+0x1ec>
 801130e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011312:	f04f 0901 	mov.w	r9, #1
 8011316:	4623      	mov	r3, r4
 8011318:	469a      	mov	sl, r3
 801131a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801131e:	b10a      	cbz	r2, 8011324 <_svfiprintf_r+0x5c>
 8011320:	2a25      	cmp	r2, #37	; 0x25
 8011322:	d1f9      	bne.n	8011318 <_svfiprintf_r+0x50>
 8011324:	ebba 0b04 	subs.w	fp, sl, r4
 8011328:	d00b      	beq.n	8011342 <_svfiprintf_r+0x7a>
 801132a:	465b      	mov	r3, fp
 801132c:	4622      	mov	r2, r4
 801132e:	4629      	mov	r1, r5
 8011330:	4638      	mov	r0, r7
 8011332:	f7ff ff6d 	bl	8011210 <__ssputs_r>
 8011336:	3001      	adds	r0, #1
 8011338:	f000 80aa 	beq.w	8011490 <_svfiprintf_r+0x1c8>
 801133c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801133e:	445a      	add	r2, fp
 8011340:	9209      	str	r2, [sp, #36]	; 0x24
 8011342:	f89a 3000 	ldrb.w	r3, [sl]
 8011346:	2b00      	cmp	r3, #0
 8011348:	f000 80a2 	beq.w	8011490 <_svfiprintf_r+0x1c8>
 801134c:	2300      	movs	r3, #0
 801134e:	f04f 32ff 	mov.w	r2, #4294967295
 8011352:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011356:	f10a 0a01 	add.w	sl, sl, #1
 801135a:	9304      	str	r3, [sp, #16]
 801135c:	9307      	str	r3, [sp, #28]
 801135e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011362:	931a      	str	r3, [sp, #104]	; 0x68
 8011364:	4654      	mov	r4, sl
 8011366:	2205      	movs	r2, #5
 8011368:	f814 1b01 	ldrb.w	r1, [r4], #1
 801136c:	4851      	ldr	r0, [pc, #324]	; (80114b4 <_svfiprintf_r+0x1ec>)
 801136e:	f7ee ff4f 	bl	8000210 <memchr>
 8011372:	9a04      	ldr	r2, [sp, #16]
 8011374:	b9d8      	cbnz	r0, 80113ae <_svfiprintf_r+0xe6>
 8011376:	06d0      	lsls	r0, r2, #27
 8011378:	bf44      	itt	mi
 801137a:	2320      	movmi	r3, #32
 801137c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011380:	0711      	lsls	r1, r2, #28
 8011382:	bf44      	itt	mi
 8011384:	232b      	movmi	r3, #43	; 0x2b
 8011386:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801138a:	f89a 3000 	ldrb.w	r3, [sl]
 801138e:	2b2a      	cmp	r3, #42	; 0x2a
 8011390:	d015      	beq.n	80113be <_svfiprintf_r+0xf6>
 8011392:	9a07      	ldr	r2, [sp, #28]
 8011394:	4654      	mov	r4, sl
 8011396:	2000      	movs	r0, #0
 8011398:	f04f 0c0a 	mov.w	ip, #10
 801139c:	4621      	mov	r1, r4
 801139e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80113a2:	3b30      	subs	r3, #48	; 0x30
 80113a4:	2b09      	cmp	r3, #9
 80113a6:	d94e      	bls.n	8011446 <_svfiprintf_r+0x17e>
 80113a8:	b1b0      	cbz	r0, 80113d8 <_svfiprintf_r+0x110>
 80113aa:	9207      	str	r2, [sp, #28]
 80113ac:	e014      	b.n	80113d8 <_svfiprintf_r+0x110>
 80113ae:	eba0 0308 	sub.w	r3, r0, r8
 80113b2:	fa09 f303 	lsl.w	r3, r9, r3
 80113b6:	4313      	orrs	r3, r2
 80113b8:	9304      	str	r3, [sp, #16]
 80113ba:	46a2      	mov	sl, r4
 80113bc:	e7d2      	b.n	8011364 <_svfiprintf_r+0x9c>
 80113be:	9b03      	ldr	r3, [sp, #12]
 80113c0:	1d19      	adds	r1, r3, #4
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	9103      	str	r1, [sp, #12]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	bfbb      	ittet	lt
 80113ca:	425b      	neglt	r3, r3
 80113cc:	f042 0202 	orrlt.w	r2, r2, #2
 80113d0:	9307      	strge	r3, [sp, #28]
 80113d2:	9307      	strlt	r3, [sp, #28]
 80113d4:	bfb8      	it	lt
 80113d6:	9204      	strlt	r2, [sp, #16]
 80113d8:	7823      	ldrb	r3, [r4, #0]
 80113da:	2b2e      	cmp	r3, #46	; 0x2e
 80113dc:	d10c      	bne.n	80113f8 <_svfiprintf_r+0x130>
 80113de:	7863      	ldrb	r3, [r4, #1]
 80113e0:	2b2a      	cmp	r3, #42	; 0x2a
 80113e2:	d135      	bne.n	8011450 <_svfiprintf_r+0x188>
 80113e4:	9b03      	ldr	r3, [sp, #12]
 80113e6:	1d1a      	adds	r2, r3, #4
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	9203      	str	r2, [sp, #12]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	bfb8      	it	lt
 80113f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80113f4:	3402      	adds	r4, #2
 80113f6:	9305      	str	r3, [sp, #20]
 80113f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80114c4 <_svfiprintf_r+0x1fc>
 80113fc:	7821      	ldrb	r1, [r4, #0]
 80113fe:	2203      	movs	r2, #3
 8011400:	4650      	mov	r0, sl
 8011402:	f7ee ff05 	bl	8000210 <memchr>
 8011406:	b140      	cbz	r0, 801141a <_svfiprintf_r+0x152>
 8011408:	2340      	movs	r3, #64	; 0x40
 801140a:	eba0 000a 	sub.w	r0, r0, sl
 801140e:	fa03 f000 	lsl.w	r0, r3, r0
 8011412:	9b04      	ldr	r3, [sp, #16]
 8011414:	4303      	orrs	r3, r0
 8011416:	3401      	adds	r4, #1
 8011418:	9304      	str	r3, [sp, #16]
 801141a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801141e:	4826      	ldr	r0, [pc, #152]	; (80114b8 <_svfiprintf_r+0x1f0>)
 8011420:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011424:	2206      	movs	r2, #6
 8011426:	f7ee fef3 	bl	8000210 <memchr>
 801142a:	2800      	cmp	r0, #0
 801142c:	d038      	beq.n	80114a0 <_svfiprintf_r+0x1d8>
 801142e:	4b23      	ldr	r3, [pc, #140]	; (80114bc <_svfiprintf_r+0x1f4>)
 8011430:	bb1b      	cbnz	r3, 801147a <_svfiprintf_r+0x1b2>
 8011432:	9b03      	ldr	r3, [sp, #12]
 8011434:	3307      	adds	r3, #7
 8011436:	f023 0307 	bic.w	r3, r3, #7
 801143a:	3308      	adds	r3, #8
 801143c:	9303      	str	r3, [sp, #12]
 801143e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011440:	4433      	add	r3, r6
 8011442:	9309      	str	r3, [sp, #36]	; 0x24
 8011444:	e767      	b.n	8011316 <_svfiprintf_r+0x4e>
 8011446:	fb0c 3202 	mla	r2, ip, r2, r3
 801144a:	460c      	mov	r4, r1
 801144c:	2001      	movs	r0, #1
 801144e:	e7a5      	b.n	801139c <_svfiprintf_r+0xd4>
 8011450:	2300      	movs	r3, #0
 8011452:	3401      	adds	r4, #1
 8011454:	9305      	str	r3, [sp, #20]
 8011456:	4619      	mov	r1, r3
 8011458:	f04f 0c0a 	mov.w	ip, #10
 801145c:	4620      	mov	r0, r4
 801145e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011462:	3a30      	subs	r2, #48	; 0x30
 8011464:	2a09      	cmp	r2, #9
 8011466:	d903      	bls.n	8011470 <_svfiprintf_r+0x1a8>
 8011468:	2b00      	cmp	r3, #0
 801146a:	d0c5      	beq.n	80113f8 <_svfiprintf_r+0x130>
 801146c:	9105      	str	r1, [sp, #20]
 801146e:	e7c3      	b.n	80113f8 <_svfiprintf_r+0x130>
 8011470:	fb0c 2101 	mla	r1, ip, r1, r2
 8011474:	4604      	mov	r4, r0
 8011476:	2301      	movs	r3, #1
 8011478:	e7f0      	b.n	801145c <_svfiprintf_r+0x194>
 801147a:	ab03      	add	r3, sp, #12
 801147c:	9300      	str	r3, [sp, #0]
 801147e:	462a      	mov	r2, r5
 8011480:	4b0f      	ldr	r3, [pc, #60]	; (80114c0 <_svfiprintf_r+0x1f8>)
 8011482:	a904      	add	r1, sp, #16
 8011484:	4638      	mov	r0, r7
 8011486:	f3af 8000 	nop.w
 801148a:	1c42      	adds	r2, r0, #1
 801148c:	4606      	mov	r6, r0
 801148e:	d1d6      	bne.n	801143e <_svfiprintf_r+0x176>
 8011490:	89ab      	ldrh	r3, [r5, #12]
 8011492:	065b      	lsls	r3, r3, #25
 8011494:	f53f af2c 	bmi.w	80112f0 <_svfiprintf_r+0x28>
 8011498:	9809      	ldr	r0, [sp, #36]	; 0x24
 801149a:	b01d      	add	sp, #116	; 0x74
 801149c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114a0:	ab03      	add	r3, sp, #12
 80114a2:	9300      	str	r3, [sp, #0]
 80114a4:	462a      	mov	r2, r5
 80114a6:	4b06      	ldr	r3, [pc, #24]	; (80114c0 <_svfiprintf_r+0x1f8>)
 80114a8:	a904      	add	r1, sp, #16
 80114aa:	4638      	mov	r0, r7
 80114ac:	f000 f87a 	bl	80115a4 <_printf_i>
 80114b0:	e7eb      	b.n	801148a <_svfiprintf_r+0x1c2>
 80114b2:	bf00      	nop
 80114b4:	08013efc 	.word	0x08013efc
 80114b8:	08013f06 	.word	0x08013f06
 80114bc:	00000000 	.word	0x00000000
 80114c0:	08011211 	.word	0x08011211
 80114c4:	08013f02 	.word	0x08013f02

080114c8 <_printf_common>:
 80114c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114cc:	4616      	mov	r6, r2
 80114ce:	4699      	mov	r9, r3
 80114d0:	688a      	ldr	r2, [r1, #8]
 80114d2:	690b      	ldr	r3, [r1, #16]
 80114d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80114d8:	4293      	cmp	r3, r2
 80114da:	bfb8      	it	lt
 80114dc:	4613      	movlt	r3, r2
 80114de:	6033      	str	r3, [r6, #0]
 80114e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80114e4:	4607      	mov	r7, r0
 80114e6:	460c      	mov	r4, r1
 80114e8:	b10a      	cbz	r2, 80114ee <_printf_common+0x26>
 80114ea:	3301      	adds	r3, #1
 80114ec:	6033      	str	r3, [r6, #0]
 80114ee:	6823      	ldr	r3, [r4, #0]
 80114f0:	0699      	lsls	r1, r3, #26
 80114f2:	bf42      	ittt	mi
 80114f4:	6833      	ldrmi	r3, [r6, #0]
 80114f6:	3302      	addmi	r3, #2
 80114f8:	6033      	strmi	r3, [r6, #0]
 80114fa:	6825      	ldr	r5, [r4, #0]
 80114fc:	f015 0506 	ands.w	r5, r5, #6
 8011500:	d106      	bne.n	8011510 <_printf_common+0x48>
 8011502:	f104 0a19 	add.w	sl, r4, #25
 8011506:	68e3      	ldr	r3, [r4, #12]
 8011508:	6832      	ldr	r2, [r6, #0]
 801150a:	1a9b      	subs	r3, r3, r2
 801150c:	42ab      	cmp	r3, r5
 801150e:	dc26      	bgt.n	801155e <_printf_common+0x96>
 8011510:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011514:	1e13      	subs	r3, r2, #0
 8011516:	6822      	ldr	r2, [r4, #0]
 8011518:	bf18      	it	ne
 801151a:	2301      	movne	r3, #1
 801151c:	0692      	lsls	r2, r2, #26
 801151e:	d42b      	bmi.n	8011578 <_printf_common+0xb0>
 8011520:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011524:	4649      	mov	r1, r9
 8011526:	4638      	mov	r0, r7
 8011528:	47c0      	blx	r8
 801152a:	3001      	adds	r0, #1
 801152c:	d01e      	beq.n	801156c <_printf_common+0xa4>
 801152e:	6823      	ldr	r3, [r4, #0]
 8011530:	68e5      	ldr	r5, [r4, #12]
 8011532:	6832      	ldr	r2, [r6, #0]
 8011534:	f003 0306 	and.w	r3, r3, #6
 8011538:	2b04      	cmp	r3, #4
 801153a:	bf08      	it	eq
 801153c:	1aad      	subeq	r5, r5, r2
 801153e:	68a3      	ldr	r3, [r4, #8]
 8011540:	6922      	ldr	r2, [r4, #16]
 8011542:	bf0c      	ite	eq
 8011544:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011548:	2500      	movne	r5, #0
 801154a:	4293      	cmp	r3, r2
 801154c:	bfc4      	itt	gt
 801154e:	1a9b      	subgt	r3, r3, r2
 8011550:	18ed      	addgt	r5, r5, r3
 8011552:	2600      	movs	r6, #0
 8011554:	341a      	adds	r4, #26
 8011556:	42b5      	cmp	r5, r6
 8011558:	d11a      	bne.n	8011590 <_printf_common+0xc8>
 801155a:	2000      	movs	r0, #0
 801155c:	e008      	b.n	8011570 <_printf_common+0xa8>
 801155e:	2301      	movs	r3, #1
 8011560:	4652      	mov	r2, sl
 8011562:	4649      	mov	r1, r9
 8011564:	4638      	mov	r0, r7
 8011566:	47c0      	blx	r8
 8011568:	3001      	adds	r0, #1
 801156a:	d103      	bne.n	8011574 <_printf_common+0xac>
 801156c:	f04f 30ff 	mov.w	r0, #4294967295
 8011570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011574:	3501      	adds	r5, #1
 8011576:	e7c6      	b.n	8011506 <_printf_common+0x3e>
 8011578:	18e1      	adds	r1, r4, r3
 801157a:	1c5a      	adds	r2, r3, #1
 801157c:	2030      	movs	r0, #48	; 0x30
 801157e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011582:	4422      	add	r2, r4
 8011584:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011588:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801158c:	3302      	adds	r3, #2
 801158e:	e7c7      	b.n	8011520 <_printf_common+0x58>
 8011590:	2301      	movs	r3, #1
 8011592:	4622      	mov	r2, r4
 8011594:	4649      	mov	r1, r9
 8011596:	4638      	mov	r0, r7
 8011598:	47c0      	blx	r8
 801159a:	3001      	adds	r0, #1
 801159c:	d0e6      	beq.n	801156c <_printf_common+0xa4>
 801159e:	3601      	adds	r6, #1
 80115a0:	e7d9      	b.n	8011556 <_printf_common+0x8e>
	...

080115a4 <_printf_i>:
 80115a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80115a8:	460c      	mov	r4, r1
 80115aa:	4691      	mov	r9, r2
 80115ac:	7e27      	ldrb	r7, [r4, #24]
 80115ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80115b0:	2f78      	cmp	r7, #120	; 0x78
 80115b2:	4680      	mov	r8, r0
 80115b4:	469a      	mov	sl, r3
 80115b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80115ba:	d807      	bhi.n	80115cc <_printf_i+0x28>
 80115bc:	2f62      	cmp	r7, #98	; 0x62
 80115be:	d80a      	bhi.n	80115d6 <_printf_i+0x32>
 80115c0:	2f00      	cmp	r7, #0
 80115c2:	f000 80d8 	beq.w	8011776 <_printf_i+0x1d2>
 80115c6:	2f58      	cmp	r7, #88	; 0x58
 80115c8:	f000 80a3 	beq.w	8011712 <_printf_i+0x16e>
 80115cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80115d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80115d4:	e03a      	b.n	801164c <_printf_i+0xa8>
 80115d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80115da:	2b15      	cmp	r3, #21
 80115dc:	d8f6      	bhi.n	80115cc <_printf_i+0x28>
 80115de:	a001      	add	r0, pc, #4	; (adr r0, 80115e4 <_printf_i+0x40>)
 80115e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80115e4:	0801163d 	.word	0x0801163d
 80115e8:	08011651 	.word	0x08011651
 80115ec:	080115cd 	.word	0x080115cd
 80115f0:	080115cd 	.word	0x080115cd
 80115f4:	080115cd 	.word	0x080115cd
 80115f8:	080115cd 	.word	0x080115cd
 80115fc:	08011651 	.word	0x08011651
 8011600:	080115cd 	.word	0x080115cd
 8011604:	080115cd 	.word	0x080115cd
 8011608:	080115cd 	.word	0x080115cd
 801160c:	080115cd 	.word	0x080115cd
 8011610:	0801175d 	.word	0x0801175d
 8011614:	08011681 	.word	0x08011681
 8011618:	0801173f 	.word	0x0801173f
 801161c:	080115cd 	.word	0x080115cd
 8011620:	080115cd 	.word	0x080115cd
 8011624:	0801177f 	.word	0x0801177f
 8011628:	080115cd 	.word	0x080115cd
 801162c:	08011681 	.word	0x08011681
 8011630:	080115cd 	.word	0x080115cd
 8011634:	080115cd 	.word	0x080115cd
 8011638:	08011747 	.word	0x08011747
 801163c:	680b      	ldr	r3, [r1, #0]
 801163e:	1d1a      	adds	r2, r3, #4
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	600a      	str	r2, [r1, #0]
 8011644:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011648:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801164c:	2301      	movs	r3, #1
 801164e:	e0a3      	b.n	8011798 <_printf_i+0x1f4>
 8011650:	6825      	ldr	r5, [r4, #0]
 8011652:	6808      	ldr	r0, [r1, #0]
 8011654:	062e      	lsls	r6, r5, #24
 8011656:	f100 0304 	add.w	r3, r0, #4
 801165a:	d50a      	bpl.n	8011672 <_printf_i+0xce>
 801165c:	6805      	ldr	r5, [r0, #0]
 801165e:	600b      	str	r3, [r1, #0]
 8011660:	2d00      	cmp	r5, #0
 8011662:	da03      	bge.n	801166c <_printf_i+0xc8>
 8011664:	232d      	movs	r3, #45	; 0x2d
 8011666:	426d      	negs	r5, r5
 8011668:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801166c:	485e      	ldr	r0, [pc, #376]	; (80117e8 <_printf_i+0x244>)
 801166e:	230a      	movs	r3, #10
 8011670:	e019      	b.n	80116a6 <_printf_i+0x102>
 8011672:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011676:	6805      	ldr	r5, [r0, #0]
 8011678:	600b      	str	r3, [r1, #0]
 801167a:	bf18      	it	ne
 801167c:	b22d      	sxthne	r5, r5
 801167e:	e7ef      	b.n	8011660 <_printf_i+0xbc>
 8011680:	680b      	ldr	r3, [r1, #0]
 8011682:	6825      	ldr	r5, [r4, #0]
 8011684:	1d18      	adds	r0, r3, #4
 8011686:	6008      	str	r0, [r1, #0]
 8011688:	0628      	lsls	r0, r5, #24
 801168a:	d501      	bpl.n	8011690 <_printf_i+0xec>
 801168c:	681d      	ldr	r5, [r3, #0]
 801168e:	e002      	b.n	8011696 <_printf_i+0xf2>
 8011690:	0669      	lsls	r1, r5, #25
 8011692:	d5fb      	bpl.n	801168c <_printf_i+0xe8>
 8011694:	881d      	ldrh	r5, [r3, #0]
 8011696:	4854      	ldr	r0, [pc, #336]	; (80117e8 <_printf_i+0x244>)
 8011698:	2f6f      	cmp	r7, #111	; 0x6f
 801169a:	bf0c      	ite	eq
 801169c:	2308      	moveq	r3, #8
 801169e:	230a      	movne	r3, #10
 80116a0:	2100      	movs	r1, #0
 80116a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80116a6:	6866      	ldr	r6, [r4, #4]
 80116a8:	60a6      	str	r6, [r4, #8]
 80116aa:	2e00      	cmp	r6, #0
 80116ac:	bfa2      	ittt	ge
 80116ae:	6821      	ldrge	r1, [r4, #0]
 80116b0:	f021 0104 	bicge.w	r1, r1, #4
 80116b4:	6021      	strge	r1, [r4, #0]
 80116b6:	b90d      	cbnz	r5, 80116bc <_printf_i+0x118>
 80116b8:	2e00      	cmp	r6, #0
 80116ba:	d04d      	beq.n	8011758 <_printf_i+0x1b4>
 80116bc:	4616      	mov	r6, r2
 80116be:	fbb5 f1f3 	udiv	r1, r5, r3
 80116c2:	fb03 5711 	mls	r7, r3, r1, r5
 80116c6:	5dc7      	ldrb	r7, [r0, r7]
 80116c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80116cc:	462f      	mov	r7, r5
 80116ce:	42bb      	cmp	r3, r7
 80116d0:	460d      	mov	r5, r1
 80116d2:	d9f4      	bls.n	80116be <_printf_i+0x11a>
 80116d4:	2b08      	cmp	r3, #8
 80116d6:	d10b      	bne.n	80116f0 <_printf_i+0x14c>
 80116d8:	6823      	ldr	r3, [r4, #0]
 80116da:	07df      	lsls	r7, r3, #31
 80116dc:	d508      	bpl.n	80116f0 <_printf_i+0x14c>
 80116de:	6923      	ldr	r3, [r4, #16]
 80116e0:	6861      	ldr	r1, [r4, #4]
 80116e2:	4299      	cmp	r1, r3
 80116e4:	bfde      	ittt	le
 80116e6:	2330      	movle	r3, #48	; 0x30
 80116e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80116ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80116f0:	1b92      	subs	r2, r2, r6
 80116f2:	6122      	str	r2, [r4, #16]
 80116f4:	f8cd a000 	str.w	sl, [sp]
 80116f8:	464b      	mov	r3, r9
 80116fa:	aa03      	add	r2, sp, #12
 80116fc:	4621      	mov	r1, r4
 80116fe:	4640      	mov	r0, r8
 8011700:	f7ff fee2 	bl	80114c8 <_printf_common>
 8011704:	3001      	adds	r0, #1
 8011706:	d14c      	bne.n	80117a2 <_printf_i+0x1fe>
 8011708:	f04f 30ff 	mov.w	r0, #4294967295
 801170c:	b004      	add	sp, #16
 801170e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011712:	4835      	ldr	r0, [pc, #212]	; (80117e8 <_printf_i+0x244>)
 8011714:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011718:	6823      	ldr	r3, [r4, #0]
 801171a:	680e      	ldr	r6, [r1, #0]
 801171c:	061f      	lsls	r7, r3, #24
 801171e:	f856 5b04 	ldr.w	r5, [r6], #4
 8011722:	600e      	str	r6, [r1, #0]
 8011724:	d514      	bpl.n	8011750 <_printf_i+0x1ac>
 8011726:	07d9      	lsls	r1, r3, #31
 8011728:	bf44      	itt	mi
 801172a:	f043 0320 	orrmi.w	r3, r3, #32
 801172e:	6023      	strmi	r3, [r4, #0]
 8011730:	b91d      	cbnz	r5, 801173a <_printf_i+0x196>
 8011732:	6823      	ldr	r3, [r4, #0]
 8011734:	f023 0320 	bic.w	r3, r3, #32
 8011738:	6023      	str	r3, [r4, #0]
 801173a:	2310      	movs	r3, #16
 801173c:	e7b0      	b.n	80116a0 <_printf_i+0xfc>
 801173e:	6823      	ldr	r3, [r4, #0]
 8011740:	f043 0320 	orr.w	r3, r3, #32
 8011744:	6023      	str	r3, [r4, #0]
 8011746:	2378      	movs	r3, #120	; 0x78
 8011748:	4828      	ldr	r0, [pc, #160]	; (80117ec <_printf_i+0x248>)
 801174a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801174e:	e7e3      	b.n	8011718 <_printf_i+0x174>
 8011750:	065e      	lsls	r6, r3, #25
 8011752:	bf48      	it	mi
 8011754:	b2ad      	uxthmi	r5, r5
 8011756:	e7e6      	b.n	8011726 <_printf_i+0x182>
 8011758:	4616      	mov	r6, r2
 801175a:	e7bb      	b.n	80116d4 <_printf_i+0x130>
 801175c:	680b      	ldr	r3, [r1, #0]
 801175e:	6826      	ldr	r6, [r4, #0]
 8011760:	6960      	ldr	r0, [r4, #20]
 8011762:	1d1d      	adds	r5, r3, #4
 8011764:	600d      	str	r5, [r1, #0]
 8011766:	0635      	lsls	r5, r6, #24
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	d501      	bpl.n	8011770 <_printf_i+0x1cc>
 801176c:	6018      	str	r0, [r3, #0]
 801176e:	e002      	b.n	8011776 <_printf_i+0x1d2>
 8011770:	0671      	lsls	r1, r6, #25
 8011772:	d5fb      	bpl.n	801176c <_printf_i+0x1c8>
 8011774:	8018      	strh	r0, [r3, #0]
 8011776:	2300      	movs	r3, #0
 8011778:	6123      	str	r3, [r4, #16]
 801177a:	4616      	mov	r6, r2
 801177c:	e7ba      	b.n	80116f4 <_printf_i+0x150>
 801177e:	680b      	ldr	r3, [r1, #0]
 8011780:	1d1a      	adds	r2, r3, #4
 8011782:	600a      	str	r2, [r1, #0]
 8011784:	681e      	ldr	r6, [r3, #0]
 8011786:	6862      	ldr	r2, [r4, #4]
 8011788:	2100      	movs	r1, #0
 801178a:	4630      	mov	r0, r6
 801178c:	f7ee fd40 	bl	8000210 <memchr>
 8011790:	b108      	cbz	r0, 8011796 <_printf_i+0x1f2>
 8011792:	1b80      	subs	r0, r0, r6
 8011794:	6060      	str	r0, [r4, #4]
 8011796:	6863      	ldr	r3, [r4, #4]
 8011798:	6123      	str	r3, [r4, #16]
 801179a:	2300      	movs	r3, #0
 801179c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80117a0:	e7a8      	b.n	80116f4 <_printf_i+0x150>
 80117a2:	6923      	ldr	r3, [r4, #16]
 80117a4:	4632      	mov	r2, r6
 80117a6:	4649      	mov	r1, r9
 80117a8:	4640      	mov	r0, r8
 80117aa:	47d0      	blx	sl
 80117ac:	3001      	adds	r0, #1
 80117ae:	d0ab      	beq.n	8011708 <_printf_i+0x164>
 80117b0:	6823      	ldr	r3, [r4, #0]
 80117b2:	079b      	lsls	r3, r3, #30
 80117b4:	d413      	bmi.n	80117de <_printf_i+0x23a>
 80117b6:	68e0      	ldr	r0, [r4, #12]
 80117b8:	9b03      	ldr	r3, [sp, #12]
 80117ba:	4298      	cmp	r0, r3
 80117bc:	bfb8      	it	lt
 80117be:	4618      	movlt	r0, r3
 80117c0:	e7a4      	b.n	801170c <_printf_i+0x168>
 80117c2:	2301      	movs	r3, #1
 80117c4:	4632      	mov	r2, r6
 80117c6:	4649      	mov	r1, r9
 80117c8:	4640      	mov	r0, r8
 80117ca:	47d0      	blx	sl
 80117cc:	3001      	adds	r0, #1
 80117ce:	d09b      	beq.n	8011708 <_printf_i+0x164>
 80117d0:	3501      	adds	r5, #1
 80117d2:	68e3      	ldr	r3, [r4, #12]
 80117d4:	9903      	ldr	r1, [sp, #12]
 80117d6:	1a5b      	subs	r3, r3, r1
 80117d8:	42ab      	cmp	r3, r5
 80117da:	dcf2      	bgt.n	80117c2 <_printf_i+0x21e>
 80117dc:	e7eb      	b.n	80117b6 <_printf_i+0x212>
 80117de:	2500      	movs	r5, #0
 80117e0:	f104 0619 	add.w	r6, r4, #25
 80117e4:	e7f5      	b.n	80117d2 <_printf_i+0x22e>
 80117e6:	bf00      	nop
 80117e8:	08013f0d 	.word	0x08013f0d
 80117ec:	08013f1e 	.word	0x08013f1e

080117f0 <__sread>:
 80117f0:	b510      	push	{r4, lr}
 80117f2:	460c      	mov	r4, r1
 80117f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117f8:	f000 f8d4 	bl	80119a4 <_read_r>
 80117fc:	2800      	cmp	r0, #0
 80117fe:	bfab      	itete	ge
 8011800:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011802:	89a3      	ldrhlt	r3, [r4, #12]
 8011804:	181b      	addge	r3, r3, r0
 8011806:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801180a:	bfac      	ite	ge
 801180c:	6563      	strge	r3, [r4, #84]	; 0x54
 801180e:	81a3      	strhlt	r3, [r4, #12]
 8011810:	bd10      	pop	{r4, pc}

08011812 <__swrite>:
 8011812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011816:	461f      	mov	r7, r3
 8011818:	898b      	ldrh	r3, [r1, #12]
 801181a:	05db      	lsls	r3, r3, #23
 801181c:	4605      	mov	r5, r0
 801181e:	460c      	mov	r4, r1
 8011820:	4616      	mov	r6, r2
 8011822:	d505      	bpl.n	8011830 <__swrite+0x1e>
 8011824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011828:	2302      	movs	r3, #2
 801182a:	2200      	movs	r2, #0
 801182c:	f000 f868 	bl	8011900 <_lseek_r>
 8011830:	89a3      	ldrh	r3, [r4, #12]
 8011832:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011836:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801183a:	81a3      	strh	r3, [r4, #12]
 801183c:	4632      	mov	r2, r6
 801183e:	463b      	mov	r3, r7
 8011840:	4628      	mov	r0, r5
 8011842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011846:	f000 b817 	b.w	8011878 <_write_r>

0801184a <__sseek>:
 801184a:	b510      	push	{r4, lr}
 801184c:	460c      	mov	r4, r1
 801184e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011852:	f000 f855 	bl	8011900 <_lseek_r>
 8011856:	1c43      	adds	r3, r0, #1
 8011858:	89a3      	ldrh	r3, [r4, #12]
 801185a:	bf15      	itete	ne
 801185c:	6560      	strne	r0, [r4, #84]	; 0x54
 801185e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011862:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011866:	81a3      	strheq	r3, [r4, #12]
 8011868:	bf18      	it	ne
 801186a:	81a3      	strhne	r3, [r4, #12]
 801186c:	bd10      	pop	{r4, pc}

0801186e <__sclose>:
 801186e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011872:	f000 b813 	b.w	801189c <_close_r>
	...

08011878 <_write_r>:
 8011878:	b538      	push	{r3, r4, r5, lr}
 801187a:	4d07      	ldr	r5, [pc, #28]	; (8011898 <_write_r+0x20>)
 801187c:	4604      	mov	r4, r0
 801187e:	4608      	mov	r0, r1
 8011880:	4611      	mov	r1, r2
 8011882:	2200      	movs	r2, #0
 8011884:	602a      	str	r2, [r5, #0]
 8011886:	461a      	mov	r2, r3
 8011888:	f7ee fee9 	bl	800065e <_write>
 801188c:	1c43      	adds	r3, r0, #1
 801188e:	d102      	bne.n	8011896 <_write_r+0x1e>
 8011890:	682b      	ldr	r3, [r5, #0]
 8011892:	b103      	cbz	r3, 8011896 <_write_r+0x1e>
 8011894:	6023      	str	r3, [r4, #0]
 8011896:	bd38      	pop	{r3, r4, r5, pc}
 8011898:	20004d20 	.word	0x20004d20

0801189c <_close_r>:
 801189c:	b538      	push	{r3, r4, r5, lr}
 801189e:	4d06      	ldr	r5, [pc, #24]	; (80118b8 <_close_r+0x1c>)
 80118a0:	2300      	movs	r3, #0
 80118a2:	4604      	mov	r4, r0
 80118a4:	4608      	mov	r0, r1
 80118a6:	602b      	str	r3, [r5, #0]
 80118a8:	f7f1 f9a5 	bl	8002bf6 <_close>
 80118ac:	1c43      	adds	r3, r0, #1
 80118ae:	d102      	bne.n	80118b6 <_close_r+0x1a>
 80118b0:	682b      	ldr	r3, [r5, #0]
 80118b2:	b103      	cbz	r3, 80118b6 <_close_r+0x1a>
 80118b4:	6023      	str	r3, [r4, #0]
 80118b6:	bd38      	pop	{r3, r4, r5, pc}
 80118b8:	20004d20 	.word	0x20004d20

080118bc <_fstat_r>:
 80118bc:	b538      	push	{r3, r4, r5, lr}
 80118be:	4d07      	ldr	r5, [pc, #28]	; (80118dc <_fstat_r+0x20>)
 80118c0:	2300      	movs	r3, #0
 80118c2:	4604      	mov	r4, r0
 80118c4:	4608      	mov	r0, r1
 80118c6:	4611      	mov	r1, r2
 80118c8:	602b      	str	r3, [r5, #0]
 80118ca:	f7f1 f9a0 	bl	8002c0e <_fstat>
 80118ce:	1c43      	adds	r3, r0, #1
 80118d0:	d102      	bne.n	80118d8 <_fstat_r+0x1c>
 80118d2:	682b      	ldr	r3, [r5, #0]
 80118d4:	b103      	cbz	r3, 80118d8 <_fstat_r+0x1c>
 80118d6:	6023      	str	r3, [r4, #0]
 80118d8:	bd38      	pop	{r3, r4, r5, pc}
 80118da:	bf00      	nop
 80118dc:	20004d20 	.word	0x20004d20

080118e0 <_isatty_r>:
 80118e0:	b538      	push	{r3, r4, r5, lr}
 80118e2:	4d06      	ldr	r5, [pc, #24]	; (80118fc <_isatty_r+0x1c>)
 80118e4:	2300      	movs	r3, #0
 80118e6:	4604      	mov	r4, r0
 80118e8:	4608      	mov	r0, r1
 80118ea:	602b      	str	r3, [r5, #0]
 80118ec:	f7f1 f99f 	bl	8002c2e <_isatty>
 80118f0:	1c43      	adds	r3, r0, #1
 80118f2:	d102      	bne.n	80118fa <_isatty_r+0x1a>
 80118f4:	682b      	ldr	r3, [r5, #0]
 80118f6:	b103      	cbz	r3, 80118fa <_isatty_r+0x1a>
 80118f8:	6023      	str	r3, [r4, #0]
 80118fa:	bd38      	pop	{r3, r4, r5, pc}
 80118fc:	20004d20 	.word	0x20004d20

08011900 <_lseek_r>:
 8011900:	b538      	push	{r3, r4, r5, lr}
 8011902:	4d07      	ldr	r5, [pc, #28]	; (8011920 <_lseek_r+0x20>)
 8011904:	4604      	mov	r4, r0
 8011906:	4608      	mov	r0, r1
 8011908:	4611      	mov	r1, r2
 801190a:	2200      	movs	r2, #0
 801190c:	602a      	str	r2, [r5, #0]
 801190e:	461a      	mov	r2, r3
 8011910:	f7f1 f998 	bl	8002c44 <_lseek>
 8011914:	1c43      	adds	r3, r0, #1
 8011916:	d102      	bne.n	801191e <_lseek_r+0x1e>
 8011918:	682b      	ldr	r3, [r5, #0]
 801191a:	b103      	cbz	r3, 801191e <_lseek_r+0x1e>
 801191c:	6023      	str	r3, [r4, #0]
 801191e:	bd38      	pop	{r3, r4, r5, pc}
 8011920:	20004d20 	.word	0x20004d20

08011924 <memmove>:
 8011924:	4288      	cmp	r0, r1
 8011926:	b510      	push	{r4, lr}
 8011928:	eb01 0402 	add.w	r4, r1, r2
 801192c:	d902      	bls.n	8011934 <memmove+0x10>
 801192e:	4284      	cmp	r4, r0
 8011930:	4623      	mov	r3, r4
 8011932:	d807      	bhi.n	8011944 <memmove+0x20>
 8011934:	1e43      	subs	r3, r0, #1
 8011936:	42a1      	cmp	r1, r4
 8011938:	d008      	beq.n	801194c <memmove+0x28>
 801193a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801193e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011942:	e7f8      	b.n	8011936 <memmove+0x12>
 8011944:	4402      	add	r2, r0
 8011946:	4601      	mov	r1, r0
 8011948:	428a      	cmp	r2, r1
 801194a:	d100      	bne.n	801194e <memmove+0x2a>
 801194c:	bd10      	pop	{r4, pc}
 801194e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011952:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011956:	e7f7      	b.n	8011948 <memmove+0x24>

08011958 <_realloc_r>:
 8011958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801195a:	4607      	mov	r7, r0
 801195c:	4614      	mov	r4, r2
 801195e:	460e      	mov	r6, r1
 8011960:	b921      	cbnz	r1, 801196c <_realloc_r+0x14>
 8011962:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011966:	4611      	mov	r1, r2
 8011968:	f7ff b870 	b.w	8010a4c <_malloc_r>
 801196c:	b922      	cbnz	r2, 8011978 <_realloc_r+0x20>
 801196e:	f7ff f81d 	bl	80109ac <_free_r>
 8011972:	4625      	mov	r5, r4
 8011974:	4628      	mov	r0, r5
 8011976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011978:	f000 f826 	bl	80119c8 <_malloc_usable_size_r>
 801197c:	42a0      	cmp	r0, r4
 801197e:	d20f      	bcs.n	80119a0 <_realloc_r+0x48>
 8011980:	4621      	mov	r1, r4
 8011982:	4638      	mov	r0, r7
 8011984:	f7ff f862 	bl	8010a4c <_malloc_r>
 8011988:	4605      	mov	r5, r0
 801198a:	2800      	cmp	r0, #0
 801198c:	d0f2      	beq.n	8011974 <_realloc_r+0x1c>
 801198e:	4631      	mov	r1, r6
 8011990:	4622      	mov	r2, r4
 8011992:	f7fe fff5 	bl	8010980 <memcpy>
 8011996:	4631      	mov	r1, r6
 8011998:	4638      	mov	r0, r7
 801199a:	f7ff f807 	bl	80109ac <_free_r>
 801199e:	e7e9      	b.n	8011974 <_realloc_r+0x1c>
 80119a0:	4635      	mov	r5, r6
 80119a2:	e7e7      	b.n	8011974 <_realloc_r+0x1c>

080119a4 <_read_r>:
 80119a4:	b538      	push	{r3, r4, r5, lr}
 80119a6:	4d07      	ldr	r5, [pc, #28]	; (80119c4 <_read_r+0x20>)
 80119a8:	4604      	mov	r4, r0
 80119aa:	4608      	mov	r0, r1
 80119ac:	4611      	mov	r1, r2
 80119ae:	2200      	movs	r2, #0
 80119b0:	602a      	str	r2, [r5, #0]
 80119b2:	461a      	mov	r2, r3
 80119b4:	f7f1 f902 	bl	8002bbc <_read>
 80119b8:	1c43      	adds	r3, r0, #1
 80119ba:	d102      	bne.n	80119c2 <_read_r+0x1e>
 80119bc:	682b      	ldr	r3, [r5, #0]
 80119be:	b103      	cbz	r3, 80119c2 <_read_r+0x1e>
 80119c0:	6023      	str	r3, [r4, #0]
 80119c2:	bd38      	pop	{r3, r4, r5, pc}
 80119c4:	20004d20 	.word	0x20004d20

080119c8 <_malloc_usable_size_r>:
 80119c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119cc:	1f18      	subs	r0, r3, #4
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	bfbc      	itt	lt
 80119d2:	580b      	ldrlt	r3, [r1, r0]
 80119d4:	18c0      	addlt	r0, r0, r3
 80119d6:	4770      	bx	lr

080119d8 <_init>:
 80119d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119da:	bf00      	nop
 80119dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119de:	bc08      	pop	{r3}
 80119e0:	469e      	mov	lr, r3
 80119e2:	4770      	bx	lr

080119e4 <_fini>:
 80119e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119e6:	bf00      	nop
 80119e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119ea:	bc08      	pop	{r3}
 80119ec:	469e      	mov	lr, r3
 80119ee:	4770      	bx	lr
